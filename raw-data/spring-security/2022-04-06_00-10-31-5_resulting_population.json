{
  "executionId" : "9f1e4417-af37-43e9-aef5-ff2032847a1c",
  "computingTime" : 709975,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2248831775700944,
    "meanNumConcerns" : 1.654293628808864,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "2db24202-253f-4335-a2a6-e3971ffc337e",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523300145973075,
      "MetricsIntensity" : 0.05327994433249576,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 8.142871195393058,
    "generation" : 12,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6499171728326893,
      "LackOfCohesion" : 0.5523300145973075,
      "MetricsIntensity" : 0.05327994433249576,
      "Density" : 3.2089639115250286
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e785e7f5-b3c5-4c88-a83a-158a15db3462",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523569094132045,
      "MetricsIntensity" : 0.053262999282870975,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 8.1428918614569,
    "generation" : 8,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480941,
      "LackOfCohesion" : 0.5523569094132045,
      "MetricsIntensity" : 0.053262999282870975,
      "Density" : 3.20838183934808
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e3d1fe25-c975-439f-bda6-c7f24de6fac4",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523569094132049,
      "MetricsIntensity" : 0.05326299928287095,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 8.1428918614569,
    "generation" : 14,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480948,
      "LackOfCohesion" : 0.5523569094132049,
      "MetricsIntensity" : 0.053262999282870954,
      "Density" : 3.2083818393480796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "736ecdc8-f5be-4a3c-b1b5-51f5868d963f",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 8.143004910676062,
    "generation" : 22,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515737161789064,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.05331026705665076,
      "Density" : 3.207799767171129
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "55f4b88a-a4e2-4a56-a9a0-b31c678766b9",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466372,
      "MetricsIntensity" : 0.05331026705665074,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 8.143004910676062,
    "generation" : 17,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515737161789068,
      "LackOfCohesion" : 0.5531315182466372,
      "MetricsIntensity" : 0.05331026705665074,
      "Density" : 3.2077997671711294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d47d1ce3-25f6-42fd-976a-8d04a18abfb9",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5527751068371303,
      "MetricsIntensity" : 0.05325499389116314,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 8.143028001843934,
    "generation" : 11,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6501103752759376,
      "LackOfCohesion" : 0.5527751068371303,
      "MetricsIntensity" : 0.053254993891163144,
      "Density" : 3.20826061663758
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "98f18452-358d-4658-b367-0bd88ff2fa0f",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528019840861982,
      "MetricsIntensity" : 0.05323805990950022,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 8.143048687400272,
    "generation" : 9,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6506622516556286,
      "LackOfCohesion" : 0.5528019840861982,
      "MetricsIntensity" : 0.053238059909500236,
      "Density" : 3.2076788830715546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f709d2a1-d6c8-4da0-a521-663a78ca0456",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526494659548669,
      "MetricsIntensity" : 0.053313892218669,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 10.114575846364419,
    "generation" : 4,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060774,
      "LackOfCohesion" : 0.5526494659548669,
      "MetricsIntensity" : 0.053313892218669,
      "Density" : 3.209668025626091
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0f6dad6-1c04-4782-8d82-8a872d1c3a0a",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526763783605718,
      "MetricsIntensity" : 0.05329693608660494,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 10.114592469861424,
    "generation" : 11,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6502762430939224,
      "LackOfCohesion" : 0.5526763783605718,
      "MetricsIntensity" : 0.05329693608660495,
      "Density" : 3.2090856144437985
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "3ca2f0d8-c2b0-4767-9d74-4971b437c523",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534514938054061,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 10.11468349655477,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696135,
      "LackOfCohesion" : 0.5534514938054061,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b21bc76a-d5ba-4d19-9a22-02e5bd7445c5",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.553451493805406,
      "MetricsIntensity" : 0.05334423477455985,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 10.11468349655477,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696135,
      "LackOfCohesion" : 0.553451493805406,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 3.2085032032615035
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "77d16e29-288b-4c85-a42c-08d66ab3ae82",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5522748006521441,
      "MetricsIntensity" : 0.053335727183977756,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 12.095545648546427,
    "generation" : 12,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5522748006521441,
      "MetricsIntensity" : 0.05333572718397776,
      "Density" : 3.2096680256260908
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "726bb7de-4323-464d-a2b2-ea5b9de0172c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5530768285026832,
      "MetricsIntensity" : 0.05336606973986862,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 12.095635560037026,
    "generation" : 16,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060776,
      "LackOfCohesion" : 0.5530768285026832,
      "MetricsIntensity" : 0.05336606973986863,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "e086af2b-d8aa-4576-81d1-287996314764",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521614522228627,
      "MetricsIntensity" : 0.05331696578875161,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 13.088360890623102,
    "generation" : 23,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488128106018773,
      "LackOfCohesion" : 0.5521614522228627,
      "MetricsIntensity" : 0.0533169657887516,
      "Density" : 3.209545983701979
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "02f573db-57c2-49b1-98ad-7ecd13e138fa",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521883470387601,
      "MetricsIntensity" : 0.05330002073912681,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 13.088373727902725,
    "generation" : 24,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6493649917172832,
      "LackOfCohesion" : 0.5521883470387601,
      "MetricsIntensity" : 0.05330002073912682,
      "Density" : 3.2089639115250295
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "294d6bb1-b6bc-4774-bf5e-429d71a8d108",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5525944249399473,
      "MetricsIntensity" : 0.05336973379445575,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 14.081921759995355,
    "generation" : 14,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5525944249399473,
      "MetricsIntensity" : 0.05336973379445575,
      "Density" : 3.210372960372961
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "83c8f4cb-8119-4983-bde8-e9fc3327f3da",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5525944249399473,
      "MetricsIntensity" : 0.05336973379445575,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 14.081921759995355,
    "generation" : 13,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493642,
      "LackOfCohesion" : 0.5525944249399473,
      "MetricsIntensity" : 0.05336973379445575,
      "Density" : 3.21037296037296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "cef3fe63-71aa-437d-a67d-db0124b2897b",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526213549584833,
      "MetricsIntensity" : 0.053352766565446616,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 14.081933665418553,
    "generation" : 8,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469325,
      "LackOfCohesion" : 0.5526213549584833,
      "MetricsIntensity" : 0.05335276656544662,
      "Density" : 3.2097902097902105
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "3c8d4f3e-6f6e-4cdc-b440-bb76dee46b1e",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5533969776778231,
      "MetricsIntensity" : 0.05340009620804024,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 14.081998989284273,
    "generation" : 3,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6495301271420675,
      "LackOfCohesion" : 0.5533969776778231,
      "MetricsIntensity" : 0.05340009620804024,
      "Density" : 3.2092074592074584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "4eead79a-1d2f-42ed-95e7-5b0ddde26fae",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5533969776778229,
      "MetricsIntensity" : 0.053400096208040246,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 14.081998989284273,
    "generation" : 13,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6495301271420677,
      "LackOfCohesion" : 0.5533969776778229,
      "MetricsIntensity" : 0.053400096208040246,
      "Density" : 3.209207459207458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1cff5e5c-c872-4cb7-a527-2a6b4c052144",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526266990957194,
      "MetricsIntensity" : 0.05334423477455985,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 14.082100287776381,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696137,
      "LackOfCohesion" : 0.5526266990957194,
      "MetricsIntensity" : 0.05334423477455985,
      "Density" : 3.2079207920792085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4323c58c-16c3-42e6-b27a-b8256f344d2d",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5522972795006337,
      "MetricsIntensity" : 0.053271958232072696,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 14.082125596709634,
    "generation" : 9,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480944,
      "LackOfCohesion" : 0.5522972795006337,
      "MetricsIntensity" : 0.053271958232072696,
      "Density" : 3.2077997671711294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f99b7798-2590-46a7-85a2-371c8d9b941d",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5520349259020451,
      "MetricsIntensity" : 0.0533759837773325,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 15.076502690092065,
    "generation" : 10,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469323,
      "LackOfCohesion" : 0.5520349259020451,
      "MetricsIntensity" : 0.0533759837773325,
      "Density" : 3.210955710955711
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "143ca9e4-8c27-44ee-b041-7957c4dfc308",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5521440009456751,
      "MetricsIntensity" : 0.053347884539248235,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 16.071766116734665,
    "generation" : 15,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5521440009456751,
      "MetricsIntensity" : 0.05334788453924824,
      "Density" : 3.209790209790211
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "911b35a7-f05f-4c9f-8898-06d4ccf01a53",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5529465536835511,
      "MetricsIntensity" : 0.05337824695283273,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 16.071833828667902,
    "generation" : 15,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6511885019347716,
      "LackOfCohesion" : 0.5529465536835511,
      "MetricsIntensity" : 0.053378246952832734,
      "Density" : 3.2086247086247077
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "47f812a1-e76a-40db-b182-b4308bf6566d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552946553683551,
      "MetricsIntensity" : 0.05337824695283274,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 16.071833828667902,
    "generation" : 16,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6511885019347714,
      "LackOfCohesion" : 0.552946553683551,
      "MetricsIntensity" : 0.053378246952832734,
      "Density" : 3.208624708624708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b95b1f9-1362-4d59-8b95-8dbfee44b8ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5521061280341582,
      "MetricsIntensity" : 0.0533727728530892,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 17.06754423020427,
    "generation" : 9,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646961325966851,
      "LackOfCohesion" : 0.5521061280341582,
      "MetricsIntensity" : 0.0533727728530892,
      "Density" : 3.210250436808386
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "88a528ff-94d7-4fbf-a25d-31f97ab93d16",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5524711316501892,
      "MetricsIntensity" : 0.05330668817343196,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 17.06758129200603,
    "generation" : 14,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482606294864712,
      "LackOfCohesion" : 0.5524711316501892,
      "MetricsIntensity" : 0.053306688173431954,
      "Density" : 3.2073383808969127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "dc672156-937e-493e-8fb1-f2506c4fb7f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5524980264660866,
      "MetricsIntensity" : 0.05328974312380718,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 17.067591143722858,
    "generation" : 17,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488128106018771,
      "LackOfCohesion" : 0.5524980264660866,
      "MetricsIntensity" : 0.05328974312380718,
      "Density" : 3.2067559697146173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0e66d7f0-b3f3-4563-8d2a-fe0ac1c36e90",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5532726352995192,
      "MetricsIntensity" : 0.05333697827330963,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 17.067645057906677,
    "generation" : 15,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649917172832689,
      "LackOfCohesion" : 0.5532726352995192,
      "MetricsIntensity" : 0.05333697827330964,
      "Density" : 3.206173558532325
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7ce7a35-3456-4e02-976c-508fd3a4ef08",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5532726352995185,
      "MetricsIntensity" : 0.05333697827330964,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 17.067645057906677,
    "generation" : 8,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6499171728326891,
      "LackOfCohesion" : 0.5532726352995185,
      "MetricsIntensity" : 0.05333697827330964,
      "Density" : 3.206173558532325
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0b0f265e-89bc-4487-bcf4-757c144798bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5517690904431468,
      "MetricsIntensity" : 0.05336973379445574,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 18.063755078949686,
    "generation" : 20,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5517690904431468,
      "MetricsIntensity" : 0.05336973379445574,
      "Density" : 3.2097902097902096
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "451b6de2-bef5-4c0e-b3ef-1a0fd7c35e2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5517960204616827,
      "MetricsIntensity" : 0.05335276656544663,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 18.0637643606215,
    "generation" : 13,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648424543946932,
      "LackOfCohesion" : 0.5517960204616827,
      "MetricsIntensity" : 0.05335276656544663,
      "Density" : 3.2092074592074593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1a51c5cc-72f5-4e26-aabc-be8f5abd1517",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5522420441459892,
      "MetricsIntensity" : 0.05332773586046743,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 18.063834965815918,
    "generation" : 17,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648618784530387,
      "LackOfCohesion" : 0.5522420441459892,
      "MetricsIntensity" : 0.053327735860467435,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "204c1d6d-9bb6-4787-8e5d-8c722a814482",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519794463926475,
      "MetricsIntensity" : 0.05343190258503443,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 19.060346625476896,
    "generation" : 19,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601772,
      "LackOfCohesion" : 0.5519794463926475,
      "MetricsIntensity" : 0.05343190258503443,
      "Density" : 3.2116618075801737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "88631fa8-8265-49b6-ac4c-710280156e9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5512365214237804,
      "MetricsIntensity" : 0.05335901654832338,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 19.060430130825136,
    "generation" : 21,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648977335544499,
      "LackOfCohesion" : 0.5512365214237804,
      "MetricsIntensity" : 0.05335901654832339,
      "Density" : 3.2097902097902096
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "74e411ab-4c94-4caf-bf9e-049f6133eb5d",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5528175877071444,
      "MetricsIntensity" : 0.053323697418607804,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 19.060455470486584,
    "generation" : 15,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486187845303863,
      "LackOfCohesion" : 0.5528175877071444,
      "MetricsIntensity" : 0.0533236974186078,
      "Density" : 3.207459207459207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b25e776-9771-4f0d-b61f-3868a6116aa7",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5528175877071442,
      "MetricsIntensity" : 0.053323697418607825,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 19.060455470486584,
    "generation" : 24,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486187845303868,
      "LackOfCohesion" : 0.5528175877071442,
      "MetricsIntensity" : 0.05332369741860782,
      "Density" : 3.2074592074592077
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "48601efa-5384-41d6-bf2c-6dc25cd8ff64",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516559986271943,
      "MetricsIntensity" : 0.05335093788778041,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 19.060488248621095,
    "generation" : 24,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486187845303868,
      "LackOfCohesion" : 0.5516559986271943,
      "MetricsIntensity" : 0.05335093788778042,
      "Density" : 3.2096680256260917
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "aca99d6d-edf7-4cc3-99bc-813118d3b177",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516829110328992,
      "MetricsIntensity" : 0.05333398175571637,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 19.060497056792364,
    "generation" : 3,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649171270718232,
      "LackOfCohesion" : 0.5516829110328992,
      "MetricsIntensity" : 0.053333981755716374,
      "Density" : 3.209085614443799
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a8f82b1a-0236-468c-a266-c8b4ec4e5dbf",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5535927031519785,
      "MetricsIntensity" : 0.0533709634609484,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 19.06050375546965,
    "generation" : 16,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060774,
      "LackOfCohesion" : 0.5535927031519785,
      "MetricsIntensity" : 0.0533709634609484,
      "Density" : 3.2068764568764565
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e62c5961-634f-4097-9d88-825420e09952",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5520885928672165,
      "MetricsIntensity" : 0.05340378494535347,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 20.057356363962903,
    "generation" : 16,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6476769911504419,
      "LackOfCohesion" : 0.5520885928672165,
      "MetricsIntensity" : 0.05340378494535348,
      "Density" : 3.2104956268221567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "35e05b85-e2cd-4e16-8f1a-ef3b7b14bfb9",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515287274252292,
      "MetricsIntensity" : 0.05341003902121184,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 21.05464216599242,
    "generation" : 16,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955752,
      "LackOfCohesion" : 0.5515287274252292,
      "MetricsIntensity" : 0.05341003902121184,
      "Density" : 3.2110787172011666
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "38b1ea9b-80fd-4654-a85a-29da2930c5d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5524160099987164,
      "MetricsIntensity" : 0.05336248851598061,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 21.05464814794602,
    "generation" : 13,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646408839779005,
      "LackOfCohesion" : 0.5524160099987164,
      "MetricsIntensity" : 0.05336248851598062,
      "Density" : 3.208041958041958
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "426f084f-c1af-4ce8-938f-c37c44bcabb3",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5532180378492555,
      "MetricsIntensity" : 0.053392798426257146,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 21.054699776823707,
    "generation" : 11,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5532180378492555,
      "MetricsIntensity" : 0.05339279842625715,
      "Density" : 3.2068764568764565
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "7a59f8bc-230f-4a82-821b-680f75d1dbb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5518568768856265,
      "MetricsIntensity" : 0.05336873441122956,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 22.052179521756095,
    "generation" : 14,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469613259668514,
      "LackOfCohesion" : 0.5518568768856265,
      "MetricsIntensity" : 0.05336873441122956,
      "Density" : 3.208624708624708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "77580735-97b1-4ad0-937d-879720cc5a3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5518837892913314,
      "MetricsIntensity" : 0.05335177827916552,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 22.052187127386503,
    "generation" : 21,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.647513812154696,
      "LackOfCohesion" : 0.5518837892913314,
      "MetricsIntensity" : 0.05335177827916552,
      "Density" : 3.208041958041958
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0f8c6470-a6ff-40f5-abe6-bf8a83461e0b",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5511535714017429,
      "MetricsIntensity" : 0.053431902585034434,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 23.049849046488948,
    "generation" : 15,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601768,
      "LackOfCohesion" : 0.5511535714017429,
      "MetricsIntensity" : 0.05343190258503442,
      "Density" : 3.2110787172011657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "7294b472-69ab-4276-9afd-c6f688ab50b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.551153571401743,
      "MetricsIntensity" : 0.05343190258503442,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 23.049849046488948,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601768,
      "LackOfCohesion" : 0.551153571401743,
      "MetricsIntensity" : 0.05343190258503442,
      "Density" : 3.211078717201166
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "61db5095-a44d-4c95-b9cb-675742392cd6",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5511805190561785,
      "MetricsIntensity" : 0.053414924244545935,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 23.049856301961384,
    "generation" : 21,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053099,
      "LackOfCohesion" : 0.5511805190561785,
      "MetricsIntensity" : 0.053414924244545935,
      "Density" : 3.2104956268221567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "b37db3c3-b55a-46a6-a200-2c444fdf0ecd",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5527626567195494,
      "MetricsIntensity" : 0.053379545411410205,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 23.049877264570974,
    "generation" : 13,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542288,
      "LackOfCohesion" : 0.5527626567195494,
      "MetricsIntensity" : 0.053379545411410205,
      "Density" : 3.2081632653061223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "2388cae5-a09a-4d61-8356-132d3d0a4e53",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5516003074373217,
      "MetricsIntensity" : 0.05340680370811505,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 23.049904334302997,
    "generation" : 10,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5516003074373217,
      "MetricsIntensity" : 0.05340680370811504,
      "Density" : 3.21037296037296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "367ba19f-576b-45d0-9207-2db50c7911e7",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5516272374558578,
      "MetricsIntensity" : 0.05338983647910591,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 23.04991159678741,
    "generation" : 16,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5516272374558578,
      "MetricsIntensity" : 0.05338983647910592,
      "Density" : 3.2097902097902096
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "77a35ab8-625b-49c2-b3bc-850746371f72",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5535382794388893,
      "MetricsIntensity" : 0.0534268423870246,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 23.04991715722196,
    "generation" : 12,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5535382794388893,
      "MetricsIntensity" : 0.05342684238702461,
      "Density" : 3.2075801749271142
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "85179443-4948-4e1d-89ab-a78fe4822f5d",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5521762276631113,
      "MetricsIntensity" : 0.05340276262329611,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 24.047804859634127,
    "generation" : 13,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5521762276631113,
      "MetricsIntensity" : 0.0534027626232961,
      "Density" : 3.2093294460641406
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "feed068e-2d7c-4966-a5aa-0b325248eb83",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5514728798437564,
      "MetricsIntensity" : 0.05346601678962905,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 25.045834766564866,
    "generation" : 11,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6463752075262854,
      "LackOfCohesion" : 0.5514728798437564,
      "MetricsIntensity" : 0.05346601678962904,
      "Density" : 3.211785297549592
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "83d152cb-ab7d-405d-beaa-7881ba4488e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5514998451572055,
      "MetricsIntensity" : 0.053449027323098273,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 25.04584143817404,
    "generation" : 21,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469286109573875,
      "LackOfCohesion" : 0.5514998451572055,
      "MetricsIntensity" : 0.05344902732309828,
      "Density" : 3.211201866977829
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "e851583f-1b9e-4122-873e-9e9820fb4781",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5522764844200834,
      "MetricsIntensity" : 0.053496418996678244,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 25.045878105841524,
    "generation" : 13,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480354178195904,
      "LackOfCohesion" : 0.5522764844200834,
      "MetricsIntensity" : 0.05349641899667825,
      "Density" : 3.210618436406069
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "aa90bfed-46f3-484a-b96f-2f3b5a2826dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5530609254260812,
      "MetricsIntensity" : 0.053421927693846974,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 25.045947576011912,
    "generation" : 24,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648977335544499,
      "LackOfCohesion" : 0.5530609254260812,
      "MetricsIntensity" : 0.05342192769384698,
      "Density" : 3.207580174927114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b113761-fb2a-4335-9d57-bcb0f87ecd2b",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5530878554446172,
      "MetricsIntensity" : 0.05340499313181708,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 25.0459542897317,
    "generation" : 13,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6495301271420673,
      "LackOfCohesion" : 0.5530878554446172,
      "MetricsIntensity" : 0.053404993131817076,
      "Density" : 3.2069970845481035
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f986914a-f68a-4f22-9d43-3d51156de158",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5518013171605829,
      "MetricsIntensity" : 0.05342461187850361,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 26.044087685138834,
    "generation" : 20,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5518013171605829,
      "MetricsIntensity" : 0.053424611878503614,
      "Density" : 3.20932944606414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1cbe6a84-8921-4825-a1a7-0a6817683fb6",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5526038698984589,
      "MetricsIntensity" : 0.05345494162510889,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 26.044129366309495,
    "generation" : 16,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5526038698984589,
      "MetricsIntensity" : 0.05345494162510889,
      "Density" : 3.208163265306123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "b88ece72-5de6-409c-9b1f-75afee67a1b7",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5519103922042128,
      "MetricsIntensity" : 0.05339651264041933,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 27.042470932586884,
    "generation" : 7,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566612,
      "LackOfCohesion" : 0.5519103922042128,
      "MetricsIntensity" : 0.05339651264041933,
      "Density" : 3.2081632653061236
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "e82e0fa3-d8a5-4f84-aa61-72b4be908711",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5527129449420889,
      "MetricsIntensity" : 0.053426842387024616,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 27.042511107871686,
    "generation" : 16,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5527129449420889,
      "MetricsIntensity" : 0.05342684238702462,
      "Density" : 3.2069970845481044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "a01cfc4a-21c8-400e-bd1a-143e7cc85bfd",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.552120840689248,
      "MetricsIntensity" : 0.053458698967897775,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 28.04091301882695,
    "generation" : 17,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247784,
      "LackOfCohesion" : 0.552120840689248,
      "MetricsIntensity" : 0.05345869896789778,
      "Density" : 3.210035005834305
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "07c13178-3b53-4210-aca9-657bf6e30c3b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5521477883436835,
      "MetricsIntensity" : 0.053441720627409255,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 28.04091897764617,
    "generation" : 23,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5521477883436835,
      "MetricsIntensity" : 0.053441720627409255,
      "Density" : 3.2094515752625443
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "b183bee7-2351-418d-a13b-aaa0cfe2651e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5513508931663107,
      "MetricsIntensity" : 0.053402762623296095,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 28.0409637260039,
    "generation" : 20,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5513508931663107,
      "MetricsIntensity" : 0.0534027626232961,
      "Density" : 3.2087463556851312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e021dba1-e54a-42a9-969f-08fdaa399e7c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5513778231848466,
      "MetricsIntensity" : 0.053385795394286985,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 28.040969702609203,
    "generation" : 22,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5513778231848466,
      "MetricsIntensity" : 0.053385795394286985,
      "Density" : 3.2081632653061227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "29429e8c-0190-410f-8ede-0be4ad6330d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5513778231848467,
      "MetricsIntensity" : 0.05338579539428697,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 28.040969702609203,
    "generation" : 14,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5513778231848467,
      "MetricsIntensity" : 0.05338579539428698,
      "Density" : 3.2081632653061223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ffc15386-6325-469e-8933-aeef0d58ccd3",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5522299871638169,
      "MetricsIntensity" : 0.05343058132821684,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 29.03951675265879,
    "generation" : 19,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.5522299871638169,
      "MetricsIntensity" : 0.053430581328216854,
      "Density" : 3.2088681446907814
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "03a19033-efcc-41c9-9ad4-638886ac8dad",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5522569348182523,
      "MetricsIntensity" : 0.053413602987728355,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 29.039522516669173,
    "generation" : 16,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646570796460177,
      "LackOfCohesion" : 0.5522569348182523,
      "MetricsIntensity" : 0.05341360298772836,
      "Density" : 3.2082847141190194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "042f4681-81d9-4d4e-85ad-f0a28bc9604e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5530330654765048,
      "MetricsIntensity" : 0.053460930937131605,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 29.03955416535507,
    "generation" : 12,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6476769911504425,
      "LackOfCohesion" : 0.5530330654765048,
      "MetricsIntensity" : 0.05346093093713162,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1219b2d1-cf0b-411f-aefe-19a8523ddf83",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5516701217218296,
      "MetricsIntensity" : 0.05343683540407518,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 30.038208076220695,
    "generation" : 14,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601768,
      "LackOfCohesion" : 0.5516701217218296,
      "MetricsIntensity" : 0.05343683540407518,
      "Density" : 3.2094515752625448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "788063af-a249-4f90-ac11-f0fea46f487d",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5516970693762652,
      "MetricsIntensity" : 0.053419857063586686,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 30.038213650728736,
    "generation" : 22,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053094,
      "LackOfCohesion" : 0.5516970693762652,
      "MetricsIntensity" : 0.053419857063586686,
      "Density" : 3.2088681446907814
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "27c6b593-2938-4776-9d2d-364c1f2a8ff4",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5512949656983436,
      "MetricsIntensity" : 0.053458698967897775,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 32.03578515772872,
    "generation" : 6,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247784,
      "LackOfCohesion" : 0.5512949656983436,
      "MetricsIntensity" : 0.05345869896789776,
      "Density" : 3.2094515752625434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "0109bac9-c8ac-48c8-948c-9eb4cd5ffa46",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5520980440110315,
      "MetricsIntensity" : 0.05348904857681254,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 32.03581902479809,
    "generation" : 19,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601766,
      "LackOfCohesion" : 0.5520980440110315,
      "MetricsIntensity" : 0.053489048576812546,
      "Density" : 3.2082847141190194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "dbfae595-36e0-4d1a-9d83-87e1ff0e5507",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5516143667971704,
      "MetricsIntensity" : 0.05349283073237632,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 34.03365732755957,
    "generation" : 20,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447149972329833,
      "LackOfCohesion" : 0.5516143667971704,
      "MetricsIntensity" : 0.053492830732376324,
      "Density" : 3.210157618213661
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "bf9bb0ec-e6c9-4231-af10-625a4bb68dfc",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.551641332110619,
      "MetricsIntensity" : 0.05347584126584556,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 34.03366223328462,
    "generation" : 21,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6452684006640839,
      "LackOfCohesion" : 0.551641332110619,
      "MetricsIntensity" : 0.053475841265845564,
      "Density" : 3.2095738470519546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "bafd95a7-16e9-411d-baed-35769b218279",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5524179713734971,
      "MetricsIntensity" : 0.05352320022963242,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 34.033689206761665,
    "generation" : 21,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6463752075262867,
      "LackOfCohesion" : 0.5524179713734971,
      "MetricsIntensity" : 0.05352320022963242,
      "Density" : 3.2089900758902514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "09b91a61-d07f-412f-b698-0de2eb7a0935",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5524179713734967,
      "MetricsIntensity" : 0.05352320022963245,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 34.033689206761665,
    "generation" : 11,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6463752075262865,
      "LackOfCohesion" : 0.5524179713734967,
      "MetricsIntensity" : 0.05352320022963245,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "b3cf5419-919a-4969-bdea-56bdd8267ef3",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5546147408591111,
      "MetricsIntensity" : 0.05341101826646309,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 37.031057284251276,
    "generation" : 14,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6464088397790049,
      "LackOfCohesion" : 0.5546147408591111,
      "MetricsIntensity" : 0.053411018266463085,
      "Density" : 3.207580174927114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5909c75e-a3b4-428c-8228-3035ddbbd915",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5546416532648161,
      "MetricsIntensity" : 0.053394062134399026,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 37.03106181682855,
    "generation" : 14,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469613259668516,
      "LackOfCohesion" : 0.5546416532648161,
      "MetricsIntensity" : 0.053394062134399026,
      "Density" : 3.2069970845481044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b12ebd05-13c6-4a6a-b6de-e1105b4c67bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5546416532648158,
      "MetricsIntensity" : 0.053394062134399047,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 37.03106181682855,
    "generation" : 16,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469613259668516,
      "LackOfCohesion" : 0.5546416532648158,
      "MetricsIntensity" : 0.053394062134399047,
      "Density" : 3.2069970845481044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "bde81816-ffe2-4087-8b6d-7d60bf084bca",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5549628265399312,
      "MetricsIntensity" : 0.05342810692220062,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 39.02944837915846,
    "generation" : 8,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646766169154229,
      "LackOfCohesion" : 0.5549628265399312,
      "MetricsIntensity" : 0.05342810692220062,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "7173a3e4-5321-4fc1-9c41-b845dbfa986b",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5549628265399313,
      "MetricsIntensity" : 0.05342810692220059,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 39.02944837915846,
    "generation" : 15,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5549628265399313,
      "MetricsIntensity" : 0.0534281069222006,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "1a4b138f-8b6b-4952-b45e-66d405ed1206",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5541105620245949,
      "MetricsIntensity" : 0.05344507415120971,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 43.02669205575546,
    "generation" : 10,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646213377556661,
      "LackOfCohesion" : 0.5541105620245949,
      "MetricsIntensity" : 0.053445074151209714,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8d0b173d-22e2-4928-84bb-49148f54dffd",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5541374920431309,
      "MetricsIntensity" : 0.05342810692220059,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 43.026695953690755,
    "generation" : 12,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5541374920431309,
      "MetricsIntensity" : 0.0534281069222006,
      "Density" : 3.2071178529754953
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "c8f74a31-5bb5-445f-b1e1-048ff023d650",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5543493990087415,
      "MetricsIntensity" : 0.053490313940105894,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 44.02606199905066,
    "generation" : 14,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5543493990087415,
      "MetricsIntensity" : 0.05349031394010589,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "54cd04bb-9344-4596-922d-89a6bfcacbc8",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5543493990087416,
      "MetricsIntensity" : 0.05349031394010587,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 44.02606199905066,
    "generation" : 19,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5543493990087416,
      "MetricsIntensity" : 0.05349031394010587,
      "Density" : 3.2089900758902514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ea966fc4-85f0-44e3-8898-961957f395c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5537685776817857,
      "MetricsIntensity" : 0.05357072501314429,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 45.02546252808689,
    "generation" : 13,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6450719822812847,
      "LackOfCohesion" : 0.5537685776817857,
      "MetricsIntensity" : 0.05357072501314429,
      "Density" : 3.213200934579439
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "cf0725e0-e5db-4a38-9f81-5620a376ad59",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5537685776817856,
      "MetricsIntensity" : 0.053570725013144305,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 45.02546252808689,
    "generation" : 19,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6450719822812847,
      "LackOfCohesion" : 0.5537685776817856,
      "MetricsIntensity" : 0.053570725013144305,
      "Density" : 3.213200934579439
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "08a431c8-7400-417a-9534-03f31f60f84d",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.554431597828875,
      "MetricsIntensity" : 0.05347917464091342,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 45.02548758075361,
    "generation" : 11,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.554431597828875,
      "MetricsIntensity" : 0.053479174640913424,
      "Density" : 3.2084063047285456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "af8a269f-a82b-427f-bc4e-a734ab36d628",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5544585454833104,
      "MetricsIntensity" : 0.05346219630042494,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 45.02549130250823,
    "generation" : 10,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646570796460177,
      "LackOfCohesion" : 0.5544585454833104,
      "MetricsIntensity" : 0.05346219630042494,
      "Density" : 3.207822533566843
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "add838f2-5787-4c5e-a966-e89ff33d006b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5542303174063593,
      "MetricsIntensity" : 0.05348405986424755,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 47.024397948977274,
    "generation" : 17,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645464601769912,
      "LackOfCohesion" : 0.5542303174063593,
      "MetricsIntensity" : 0.053484059864247556,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1f5284a4-1ca3-4f11-94a4-b0d64045b205",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5542303174063598,
      "MetricsIntensity" : 0.05348405986424752,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 47.024397948977274,
    "generation" : 12,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699117,
      "LackOfCohesion" : 0.5542303174063598,
      "MetricsIntensity" : 0.05348405986424752,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "c0d1ace2-c477-44e5-8bdf-bc21491ca4d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5544154587520524,
      "MetricsIntensity" : 0.053563333779849974,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 48.02386118479513,
    "generation" : 18,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707807,
      "LackOfCohesion" : 0.5544154587520524,
      "MetricsIntensity" : 0.053563333779849974,
      "Density" : 3.2114485981308403
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "be301b9d-57ff-4bff-8fcd-f27895e3d6a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5544154587520526,
      "MetricsIntensity" : 0.05356333377984997,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 48.02386118479513,
    "generation" : 12,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707802,
      "LackOfCohesion" : 0.5544154587520526,
      "MetricsIntensity" : 0.053563333779849974,
      "Density" : 3.211448598130841
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "3a456144-a20e-48b1-92b2-245036cf8f75",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5544424240655013,
      "MetricsIntensity" : 0.053546344313319234,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 48.023864658955645,
    "generation" : 9,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018814,
      "LackOfCohesion" : 0.5544424240655013,
      "MetricsIntensity" : 0.053546344313319234,
      "Density" : 3.210864485981309
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "c2610f8a-9c8d-412d-b3e1-2b01c72d6475",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5534965763634018,
      "MetricsIntensity" : 0.053507292280594365,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 48.023874530820294,
    "generation" : 23,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644911504424779,
      "LackOfCohesion" : 0.5534965763634018,
      "MetricsIntensity" : 0.05350729228059437,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "1cc85be9-782b-4055-a3b4-2f26fc42e4d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5534965763634018,
      "MetricsIntensity" : 0.053507292280594365,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 48.023874530820294,
    "generation" : 19,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247784,
      "LackOfCohesion" : 0.5534965763634018,
      "MetricsIntensity" : 0.053507292280594365,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8a2be412-b355-402c-be7b-60d1131c8a9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5545246767511791,
      "MetricsIntensity" : 0.05353519771445495,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 49.02338189780253,
    "generation" : 11,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644714997232983,
      "LackOfCohesion" : 0.5545246767511791,
      "MetricsIntensity" : 0.05353519771445495,
      "Density" : 3.210280373831776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "6c9eb83e-a4fe-49fa-8dd8-6e08c4221fa0",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5545516420646278,
      "MetricsIntensity" : 0.05351820824792421,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 49.02338530711343,
    "generation" : 14,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645268400664084,
      "LackOfCohesion" : 0.5545516420646278,
      "MetricsIntensity" : 0.05351820824792421,
      "Density" : 3.209696261682243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "ef10b9ac-07af-40af-b420-834de4237948",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5538174201952984,
      "MetricsIntensity" : 0.0535414558886592,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 50.02290304356213,
    "generation" : 21,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447149972329833,
      "LackOfCohesion" : 0.5538174201952984,
      "MetricsIntensity" : 0.0535414558886592,
      "Density" : 3.2096962616822435
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "6c338051-c9f1-4472-a7ec-b450e19b45a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5538443855087473,
      "MetricsIntensity" : 0.05352446642212847,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 50.02290638502312,
    "generation" : 17,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645268400664084,
      "LackOfCohesion" : 0.5538443855087473,
      "MetricsIntensity" : 0.05352446642212848,
      "Density" : 3.2091121495327104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "14683b8d-62fa-49de-a2ce-147224f76856",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5538443855087474,
      "MetricsIntensity" : 0.05352446642212846,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 50.02290638502312,
    "generation" : 18,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645268400664084,
      "LackOfCohesion" : 0.5538443855087474,
      "MetricsIntensity" : 0.053524466422128464,
      "Density" : 3.20911214953271
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "db728798-7c40-4bb7-9dc3-c9ea58e453cf",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5535890425586639,
      "MetricsIntensity" : 0.05356333377984997,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 52.02201425081806,
    "generation" : 11,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.64360819037078,
      "LackOfCohesion" : 0.5535890425586639,
      "MetricsIntensity" : 0.053563333779849974,
      "Density" : 3.210864485981309
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "b7a72891-214f-4920-99d8-180157cc121c",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5535890425586639,
      "MetricsIntensity" : 0.05356333377984997,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 52.02201425081806,
    "generation" : 13,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707802,
      "LackOfCohesion" : 0.5535890425586639,
      "MetricsIntensity" : 0.053563333779849974,
      "Density" : 3.210864485981309
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "417e9cb8-1f70-46a5-9141-7b6db76ceb4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5536160078721128,
      "MetricsIntensity" : 0.05354634431331919,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 52.02201745817417,
    "generation" : 21,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018816,
      "LackOfCohesion" : 0.5536160078721128,
      "MetricsIntensity" : 0.05354634431331921,
      "Density" : 3.210280373831774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "34feeb66-9f05-473b-b787-203452406ed5",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5535305001803767,
      "MetricsIntensity" : 0.05356203070796084,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 52.02203043332296,
    "generation" : 18,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018816,
      "LackOfCohesion" : 0.5535305001803767,
      "MetricsIntensity" : 0.05356203070796084,
      "Density" : 3.208868144690781
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "3f613824-ea5f-48c2-aa59-8f51375ec9b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5535305001803766,
      "MetricsIntensity" : 0.053562030707960874,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 52.02203043332296,
    "generation" : 20,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018808,
      "LackOfCohesion" : 0.5535305001803766,
      "MetricsIntensity" : 0.05356203070796087,
      "Density" : 3.208868144690781
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "4d4cfc8c-316e-42df-bb81-690088592843",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5539101574135291,
      "MetricsIntensity" : 0.05359755653880487,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 54.02118355636241,
    "generation" : 12,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434108527131785,
      "LackOfCohesion" : 0.5539101574135291,
      "MetricsIntensity" : 0.05359755653880487,
      "Density" : 3.2115721800116885
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "ea8f7a31-da97-4651-9963-257d09d3f77e",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5539101574135293,
      "MetricsIntensity" : 0.053597556538804846,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 54.02118355636241,
    "generation" : 21,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434108527131777,
      "LackOfCohesion" : 0.5539101574135293,
      "MetricsIntensity" : 0.053597556538804846,
      "Density" : 3.211572180011689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "8e6d3ef5-815e-4d9e-a4bc-6e4e463eb210",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5539371404091509,
      "MetricsIntensity" : 0.053580555931640336,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 54.02118664240557,
    "generation" : 11,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643964562569214,
      "LackOfCohesion" : 0.5539371404091509,
      "MetricsIntensity" : 0.05358055593164034,
      "Density" : 3.2109877264757456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "a78705e5-6f3f-4ead-997f-f72ea6a05afe",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5539371404091511,
      "MetricsIntensity" : 0.0535805559316403,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 54.02118664240557,
    "generation" : 14,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6439645625692139,
      "LackOfCohesion" : 0.5539371404091511,
      "MetricsIntensity" : 0.05358055593164031,
      "Density" : 3.210987726475745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "35a2991f-78f8-4cb5-916e-7bcd875a7a9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5527040839869879,
      "MetricsIntensity" : 0.053562030707960874,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 56.02044604742884,
    "generation" : 14,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018814,
      "LackOfCohesion" : 0.5527040839869879,
      "MetricsIntensity" : 0.05356203070796087,
      "Density" : 3.20828471411902
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "61d4e125-18f8-490a-b945-7e0e4cd87aff",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.552704083986988,
      "MetricsIntensity" : 0.053562030707960846,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 56.02044604742884,
    "generation" : 13,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018816,
      "LackOfCohesion" : 0.552704083986988,
      "MetricsIntensity" : 0.053562030707960846,
      "Density" : 3.2082847141190194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "5c261c57-a67a-490e-8415-4473965a7bc5",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5530246185411507,
      "MetricsIntensity" : 0.053596252612442385,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 58.01972664145637,
    "generation" : 19,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6439645625692139,
      "LackOfCohesion" : 0.5530246185411507,
      "MetricsIntensity" : 0.05359625261244239,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "5680646c-cdfa-493f-95cc-d27386b91b14",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5530246185411508,
      "MetricsIntensity" : 0.05359625261244238,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 58.01972664145637,
    "generation" : 19,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643964562569214,
      "LackOfCohesion" : 0.5530246185411508,
      "MetricsIntensity" : 0.05359625261244237,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "367dea6f-573b-4a40-9e9b-b59936735886",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5558275472776429,
      "MetricsIntensity" : 0.053666801891422575,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 72.01590173701248,
    "generation" : 7,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428571428571428,
      "LackOfCohesion" : 0.5558275472776429,
      "MetricsIntensity" : 0.05366680189142257,
      "Density" : 3.210280373831776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "3e926c53-219d-46ff-909a-066a27122723",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5558275472776426,
      "MetricsIntensity" : 0.05366680189142261,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 72.01590173701248,
    "generation" : 11,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642857142857143,
      "LackOfCohesion" : 0.5558275472776426,
      "MetricsIntensity" : 0.0536668018914226,
      "Density" : 3.2102803738317762
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "c707824a-e38c-4c1e-b12d-a8be5dd9e451",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5558275472776428,
      "MetricsIntensity" : 0.05366680189142259,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 72.01590173701248,
    "generation" : 9,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428571428571421,
      "LackOfCohesion" : 0.5558275472776428,
      "MetricsIntensity" : 0.05366680189142258,
      "Density" : 3.210280373831775
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "284a1fa7-fab0-4066-a134-f2891c9de4d2",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.555229116564458,
      "MetricsIntensity" : 0.05364490965407366,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 74.01546923259687,
    "generation" : 9,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643964562569214,
      "LackOfCohesion" : 0.555229116564458,
      "MetricsIntensity" : 0.05364490965407366,
      "Density" : 3.208528037383179
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "1d4c3e87-3da2-4389-8e11-986a9fc95294",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5552291165644581,
      "MetricsIntensity" : 0.053644909654073654,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 74.01546923259687,
    "generation" : 10,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643964562569214,
      "LackOfCohesion" : 0.5552291165644581,
      "MetricsIntensity" : 0.05364490965407365,
      "Density" : 3.2085280373831777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "3ee1a98d-b961-447e-9f59-44c0283817e9",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5550005891719964,
      "MetricsIntensity" : 0.05366680189142257,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 76.01505655991214,
    "generation" : 14,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428571428571432,
      "LackOfCohesion" : 0.5550005891719964,
      "MetricsIntensity" : 0.053666801891422575,
      "Density" : 3.2096962616822444
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "1ee8f38d-e076-462d-91d7-4fb8902f3e33",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5550005891719961,
      "MetricsIntensity" : 0.05366680189142259,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 76.01505655991214,
    "generation" : 13,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428571428571432,
      "LackOfCohesion" : 0.5550005891719961,
      "MetricsIntensity" : 0.053666801891422596,
      "Density" : 3.209696261682244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "5892e764-19ae-4134-a9a1-000e40c9b085",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5553228409438355,
      "MetricsIntensity" : 0.05370111499871772,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 78.01465973596807,
    "generation" : 8,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426592797783934,
      "LackOfCohesion" : 0.5553228409438355,
      "MetricsIntensity" : 0.05370111499871773,
      "Density" : 3.2104032729398018
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "5481a139-d173-4b8f-8752-c1f6d4134350",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5553228409438354,
      "MetricsIntensity" : 0.05370111499871773,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 78.01465973596807,
    "generation" : 15,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426592797783939,
      "LackOfCohesion" : 0.5553228409438354,
      "MetricsIntensity" : 0.05370111499871773,
      "Density" : 3.2104032729398018
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  }, {
    "solutionId" : "65439834-e3a4-40f2-99df-d1c34f6f937c",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5553228409438355,
      "MetricsIntensity" : 0.05370111499871772,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 78.01465973596807,
    "generation" : 16,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642659279778394,
      "LackOfCohesion" : 0.5553228409438355,
      "MetricsIntensity" : 0.05370111499871773,
      "Density" : 3.2104032729398013
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.messaging.handler.invocation.reactive.AuthenticationPrincipalArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.core.OAuth2Error'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.crypto.codec.Base64.InvalidBase64CharacterException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.access.expression.DenyAllPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.CacheControlConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.cas.jackson2.AttributePrincipalImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequestDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.http.SecurityHeaders'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser'"
      } ]
    } ]
  } ]
}