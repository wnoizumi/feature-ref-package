{
  "executionId" : "a7112731-4c01-4abe-8a32-f6679cd10776",
  "computingTime" : 10576,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.187100522951772,
    "meanNumConcerns" : 1.642105263157895,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "cd27a8a0-8217-41d0-b5ee-44b53820fc7c",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5553208558398789,
      "MetricsIntensity" : 0.053369164539672116,
      "Density" : 1.0054694621695532
    },
    "euclideanDistance" : 6.191038473551288,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642186637217007,
      "LackOfCohesion" : 0.5553208558398789,
      "MetricsIntensity" : 0.053369164539672116,
      "Density" : 3.1933989577301682,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "71bfdc7d-a849-4480-a737-003928b0efd0",
    "objectives" : {
      "NumberOfConcerns" : 1.00472334682861,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5541206563314229,
      "MetricsIntensity" : 0.05327393272860771,
      "Density" : 0.9974475843208751
    },
    "euclideanDistance" : 9.127664460354115,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416758544652705,
      "LackOfCohesion" : 0.5541206563314229,
      "MetricsIntensity" : 0.05327393272860771,
      "Density" : 3.164256795835744,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6885ef22-a556-4d24-8553-05465f0afc62",
    "objectives" : {
      "NumberOfConcerns" : 1.00472334682861,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5540508137668024,
      "MetricsIntensity" : 0.053303453576189076,
      "Density" : 0.9976298997265269
    },
    "euclideanDistance" : 10.115065396866678,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642581356867071,
      "LackOfCohesion" : 0.5540508137668024,
      "MetricsIntensity" : 0.05330345357618907,
      "Density" : 3.1648351648351642,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1bf93241-4ead-4e8d-90c5-0d978eaa70bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5537975721090644,
      "MetricsIntensity" : 0.05336446059286374,
      "Density" : 1.0051048313582498
    },
    "euclideanDistance" : 12.096550510766708,
    "generation" : 0,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008828,
      "LackOfCohesion" : 0.5537975721090644,
      "MetricsIntensity" : 0.05336446059286374,
      "Density" : 3.190393518518518,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "feb13ab3-8174-43b0-9d2e-50563adc192c",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5552480096097526,
      "MetricsIntensity" : 0.05342992476263475,
      "Density" : 1.0005469462169554
    },
    "euclideanDistance" : 17.06799056659488,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408839779005526,
      "LackOfCohesion" : 0.5552480096097526,
      "MetricsIntensity" : 0.05342992476263475,
      "Density" : 3.1796060254924683,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "6a08d997-fddd-4856-b4a8-bfc483d36191",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5556167620866082,
      "MetricsIntensity" : 0.05342536541889963,
      "Density" : 1.0036463081130356
    },
    "euclideanDistance" : 20.057887978742194,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375690607734807,
      "LackOfCohesion" : 0.5556167620866082,
      "MetricsIntensity" : 0.05342536541889963,
      "Density" : 3.1913043478260863,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "67f786b3-2256-4a3c-863e-4f0f7d982f47",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5560502389551476,
      "MetricsIntensity" : 0.05347846376166811,
      "Density" : 1.0030993618960802
    },
    "euclideanDistance" : 20.057889595414167,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638121546961326,
      "LackOfCohesion" : 0.5560502389551476,
      "MetricsIntensity" : 0.05347846376166811,
      "Density" : 3.1877172653534176,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a77a3fea-83f9-4fcf-a694-ce21ff5239fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546330913530947,
      "MetricsIntensity" : 0.05340201625478163,
      "Density" : 1.0036463081130356
    },
    "euclideanDistance" : 20.057911179110597,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638321369409166,
      "LackOfCohesion" : 0.5546330913530947,
      "MetricsIntensity" : 0.05340201625478162,
      "Density" : 3.187608569774175,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f64484d-7b65-4cb8-807f-1110344d9f8d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5553178121398705,
      "MetricsIntensity" : 0.053510431249679115,
      "Density" : 1.0025524156791248
    },
    "euclideanDistance" : 21.05504698433507,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5553178121398705,
      "MetricsIntensity" : 0.053510431249679115,
      "Density" : 3.1896751740139213,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "86f20b2d-7454-4aff-afb1-c3a3426efcce",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5554210244261911,
      "MetricsIntensity" : 0.053466638608263096,
      "Density" : 1.0030993618960802
    },
    "euclideanDistance" : 22.052578317586722,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5554210244261911,
      "MetricsIntensity" : 0.053466638608263096,
      "Density" : 3.189565217391304,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a75d5544-7124-472b-96f7-5fdf500f0f93",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5516746572060841,
      "MetricsIntensity" : 0.05353839166475217,
      "Density" : 1.0007292616226071
    },
    "euclideanDistance" : 24.048077268771923,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432132963988928,
      "LackOfCohesion" : 0.5516746572060841,
      "MetricsIntensity" : 0.05353839166475217,
      "Density" : 3.1894247530505515,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "5f041967-a842-406b-bae6-b2ecf789e21c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5564249002650606,
      "MetricsIntensity" : 0.053485565259005996,
      "Density" : 0.9954421148587056
    },
    "euclideanDistance" : 25.0460251213513,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375690607734807,
      "LackOfCohesion" : 0.5564249002650606,
      "MetricsIntensity" : 0.053485565259005996,
      "Density" : 3.163383545770567,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "0d760c65-4ac9-422f-a5db-e3aa340059c7",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5543382407005477,
      "MetricsIntensity" : 0.0534781127949712,
      "Density" : 1.0001823154056517
    },
    "euclideanDistance" : 26.044433969154298,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6401326699834167,
      "LackOfCohesion" : 0.5543382407005477,
      "MetricsIntensity" : 0.05347811279497119,
      "Density" : 3.180289855072464,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "888d9ff3-1890-4c41-ba5f-663617c85001",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5560991530357401,
      "MetricsIntensity" : 0.05349123609678911,
      "Density" : 0.9910665451230629
    },
    "euclideanDistance" : 29.039507079233445,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5560991530357401,
      "MetricsIntensity" : 0.05349123609678911,
      "Density" : 3.1549622751015667,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a98167c4-5b64-4958-aa4b-e491b92ef3c9",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5558251293209443,
      "MetricsIntensity" : 0.05349110933470668,
      "Density" : 1.001640838650866
    },
    "euclideanDistance" : 34.033959062581715,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6346047540077389,
      "LackOfCohesion" : 0.5558251293209443,
      "MetricsIntensity" : 0.05349110933470669,
      "Density" : 3.1867749419953597,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "2d25a9ad-d45a-4b5c-8587-ff74a475d589",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5566566814159006,
      "MetricsIntensity" : 0.05343938066030842,
      "Density" : 1.0043755697356427
    },
    "euclideanDistance" : 34.03416215495847,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5566566814159006,
      "MetricsIntensity" : 0.05343938066030842,
      "Density" : 3.1899247249565716,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c8ff82f2-e6ba-406c-8244-611a89d39d46",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5559688083586022,
      "MetricsIntensity" : 0.053480457386635,
      "Density" : 0.995077484047402
    },
    "euclideanDistance" : 35.03286265814488,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6379215035931458,
      "LackOfCohesion" : 0.5559688083586022,
      "MetricsIntensity" : 0.053480457386635,
      "Density" : 3.1640579710144925,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "519b8129-a4ff-4e0e-a4a7-9f7b41c010a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5564103640781897,
      "MetricsIntensity" : 0.053493506214997134,
      "Density" : 1.0025524156791248
    },
    "euclideanDistance" : 35.033063556126315,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6359116022099451,
      "LackOfCohesion" : 0.5564103640781897,
      "MetricsIntensity" : 0.05349350621499713,
      "Density" : 3.187826086956522,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cd117988-6d60-4fa7-bd33-36fda2d68a06",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5544010924154402,
      "MetricsIntensity" : 0.05352070632748541,
      "Density" : 1.0009115770282588
    },
    "euclideanDistance" : 36.032134961709694,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6425013835085776,
      "LackOfCohesion" : 0.5544010924154402,
      "MetricsIntensity" : 0.05352070632748541,
      "Density" : 3.1863029599535695,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "0021be2a-9035-4fca-b33e-ce2d1f081b4f",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5594202767174609,
      "MetricsIntensity" : 0.053465457964179404,
      "Density" : 0.9990884229717412
    },
    "euclideanDistance" : 36.032152483498,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370175,
      "LackOfCohesion" : 0.5594202767174609,
      "MetricsIntensity" : 0.053465457964179404,
      "Density" : 3.176811594202899,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2bbb3572-6313-44f5-8afb-1574558518b6",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5581217246237554,
      "MetricsIntensity" : 0.0534868907497138,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 37.03138298804915,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370166,
      "LackOfCohesion" : 0.5581217246237554,
      "MetricsIntensity" : 0.0534868907497138,
      "Density" : 3.192575406032483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8b4fadcd-c2dc-49fe-b713-94f15ebfc42e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5555903092641105,
      "MetricsIntensity" : 0.05350649390888292,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 40.02880590809734,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399336283185841,
      "LackOfCohesion" : 0.5555903092641105,
      "MetricsIntensity" : 0.05350649390888292,
      "Density" : 3.172373766686012,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "cf53876a-7b69-454c-922b-31bbd1feb477",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.554021172768648,
      "MetricsIntensity" : 0.05350203895073725,
      "Density" : 1.0
    },
    "euclideanDistance" : 40.02885368428681,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6388274336283188,
      "LackOfCohesion" : 0.554021172768648,
      "MetricsIntensity" : 0.05350203895073725,
      "Density" : 3.1834010446894947,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "770e890e-184f-4b24-8b1a-83122c05e848",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.558486483765493,
      "MetricsIntensity" : 0.05350245484424092,
      "Density" : 1.0025524156791248
    },
    "euclideanDistance" : 40.02898800883438,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637569060773481,
      "LackOfCohesion" : 0.558486483765493,
      "MetricsIntensity" : 0.05350245484424091,
      "Density" : 3.187826086956522,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b646e7f9-110d-4e5b-a7f6-45d0b6f2dc45",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5563637522744885,
      "MetricsIntensity" : 0.053535664007159645,
      "Density" : 1.001640838650866
    },
    "euclideanDistance" : 41.02817292169481,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6346047540077389,
      "LackOfCohesion" : 0.5563637522744885,
      "MetricsIntensity" : 0.05353566400715965,
      "Density" : 3.184927536231885,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "55ad8127-5781-4e61-96bf-7be12f7f956f",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5581464341967579,
      "MetricsIntensity" : 0.053491535477245555,
      "Density" : 1.0
    },
    "euclideanDistance" : 42.02755927685244,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395798783858484,
      "LackOfCohesion" : 0.5581464341967579,
      "MetricsIntensity" : 0.053491535477245555,
      "Density" : 3.179710144927536,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3eb726b0-6206-401c-a9a5-d3f4e50d321b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5578419085166012,
      "MetricsIntensity" : 0.05344843277408512,
      "Density" : 0.9996353691886964
    },
    "euclideanDistance" : 43.02690629343653,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5578419085166012,
      "MetricsIntensity" : 0.05344843277408512,
      "Density" : 3.178550724637681,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.annotation.Jsr250Voter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8fa1ab30-a55f-490b-b182-43b8f41a97cd",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5573792017589304,
      "MetricsIntensity" : 0.0534818700265881,
      "Density" : 1.0036463081130356
    },
    "euclideanDistance" : 43.02699371068975,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638674033149171,
      "LackOfCohesion" : 0.5573792017589304,
      "MetricsIntensity" : 0.0534818700265881,
      "Density" : 3.1913043478260867,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "16319567-9624-4e98-bc49-3f5c413feb5d",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5564006637036143,
      "MetricsIntensity" : 0.05358543331020804,
      "Density" : 1.0014585232452142
    },
    "euclideanDistance" : 44.026226683822706,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221241,
      "LackOfCohesion" : 0.5564006637036143,
      "MetricsIntensity" : 0.053585433310208035,
      "Density" : 3.1861948955916475,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.web.jackson2.SavedCookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.messaging.access.intercept.DefaultMessageSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "51498cef-3078-4179-9be2-0c10543865d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5571277871222895,
      "MetricsIntensity" : 0.053537771838673205,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 44.026357987560786,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63938053097345,
      "LackOfCohesion" : 0.5571277871222895,
      "MetricsIntensity" : 0.053537771838673205,
      "Density" : 3.192575406032483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "3290ea98-a3fe-4d3e-afef-cda7d2949930",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5550742840156419,
      "MetricsIntensity" : 0.053480783051289414,
      "Density" : 1.004922515952598
    },
    "euclideanDistance" : 47.02472636389022,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6417910447761193,
      "LackOfCohesion" : 0.5550742840156419,
      "MetricsIntensity" : 0.05348078305128942,
      "Density" : 3.1953623188405795,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b3048b20-b983-4d57-8e4e-d71c7a33cf4d",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5579896225132361,
      "MetricsIntensity" : 0.05348187002658809,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 48.024186642741654,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5579896225132361,
      "MetricsIntensity" : 0.05348187002658809,
      "Density" : 3.192575406032483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.Elements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.Elements'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "f27136f6-cb92-4d7f-9463-5729d667e6c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5546001532410678,
      "MetricsIntensity" : 0.053595082654287717,
      "Density" : 1.0038286235186873
    },
    "euclideanDistance" : 53.02184552051349,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395348837209314,
      "LackOfCohesion" : 0.5546001532410678,
      "MetricsIntensity" : 0.05359508265428772,
      "Density" : 3.1974448315911728,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.config.annotation.method.configuration.SecuredMethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "1aceeaf5-302b-4047-985f-3d375f024579",
    "objectives" : {
      "NumberOfConcerns" : 0.9942645074224021,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5572131466958272,
      "MetricsIntensity" : 0.05366324991869772,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 58.019774952659745,
    "generation" : 0,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6326869806094189,
      "LackOfCohesion" : 0.5572131466958272,
      "MetricsIntensity" : 0.05366324991869773,
      "Density" : 3.176744186046511,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.core.converter.ClaimTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.builders.WebSecurity.MvcMatchersIgnoredRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.builders.WebSecurity.MvcMatchersIgnoredRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.core.web.reactive.function.OAuth2BodyExtractors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer.AuthorizationCodeGrantConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer.AuthorizationCodeGrantConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.web.context.HttpSessionSecurityContextRepository.SaveToSessionResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.access.intercept.NullRunAsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.access.intercept.NullRunAsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.access.intercept.NullRunAsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.cas.authentication.SpringCacheBasedTicketCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.cas.authentication.SpringCacheBasedTicketCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.core.endpoint.DefaultMapOAuth2AccessTokenResponseConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.SecurityContextAsyncContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.core.Saml2Error'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.logout.CompositeLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.logout.CompositeLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.web.authentication.logout.CompositeLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.web.authentication.logout.CompositeLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.web.server.context.NoOpServerSecurityContextRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.web.server.context.NoOpServerSecurityContextRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.context.NoOpServerSecurityContextRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.web.server.context.NoOpServerSecurityContextRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.web.server.context.NoOpServerSecurityContextRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.converter.RsaKeyConverters.X509CertificateDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToMapStringObjectConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    } ]
  } ]
}