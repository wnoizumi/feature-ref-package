{
  "executionId" : "1d85f392-2ff4-46f5-a82c-da8419c59900",
  "computingTime" : 3490558,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 48,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.189888300999411,
    "meanNumConcerns" : 1.6376731301939056,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.5516677364702991
  },
  "population" : [ {
    "solutionId" : "90074487-a05a-446a-a38e-20bfd7cf897b",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5515648087566637,
      "MetricsIntensity" : 0.053394175297207705,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 12.095295012024552,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221246,
      "LackOfCohesion" : 0.5515648087566637,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 3.1690140845070425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "825aedfd-124c-4be4-8212-3dbf271aa317",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5515648087566635,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 12.095295012024552,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221241,
      "LackOfCohesion" : 0.5515648087566635,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 3.169014084507043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "6fe29f0b-2c4f-4f9f-a054-65ec7996563d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5515648087566635,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 12.095295012024552,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633849557522124,
      "LackOfCohesion" : 0.5515648087566635,
      "MetricsIntensity" : 0.05339417529720772,
      "Density" : 3.1690140845070425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "c6eb79e6-268f-4096-a198-672d07eff98c",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5515115348821715,
      "MetricsIntensity" : 0.05338972033906203,
      "Density" : 0.9953925543678585
    },
    "euclideanDistance" : 12.095335683522553,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5515115348821715,
      "MetricsIntensity" : 0.05338972033906204,
      "Density" : 3.169600938967136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "ab0db2ae-eb91-4231-9893-913231ad5575",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514800036784071,
      "MetricsIntensity" : 0.053412937524782725,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 12.095379861578957,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5514800036784071,
      "MetricsIntensity" : 0.05341293752478273,
      "Density" : 3.1713615023474184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "60d149a9-6f37-4e92-bff5-ae4eb1d74fe8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514800036784072,
      "MetricsIntensity" : 0.0534129035791655,
      "Density" : 0.9963140434942868
    },
    "euclideanDistance" : 12.095438181644758,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5514800036784072,
      "MetricsIntensity" : 0.0534129035791655,
      "Density" : 3.172535211267606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "5bfa0329-37d2-4d3f-86f6-586c928b4b2f",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514330933498991,
      "MetricsIntensity" : 0.05340844862101985,
      "Density" : 0.9964983413195724
    },
    "euclideanDistance" : 12.095479178912598,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5514330933498991,
      "MetricsIntensity" : 0.05340844862101986,
      "Density" : 3.1731220657276995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "eca82cf5-8ce1-4ab9-8ae6-3e8538ef23d9",
    "objectives" : {
      "NumberOfConcerns" : 1.0006765899864682,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5515162525686182,
      "MetricsIntensity" : 0.05338968639344483,
      "Density" : 0.9963140434942868
    },
    "euclideanDistance" : 12.095495688332553,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6360619469026547,
      "LackOfCohesion" : 0.5515162525686182,
      "MetricsIntensity" : 0.05338968639344483,
      "Density" : 3.172535211267606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "2a3b6889-d7d8-4f05-9e1f-2668939463f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.551550948886877,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 13.088015362875506,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221244,
      "LackOfCohesion" : 0.551550948886877,
      "MetricsIntensity" : 0.05339417529720772,
      "Density" : 3.1690140845070434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "46aec05f-7b5e-4dea-a10d-a0e5e69319c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.551509109404959,
      "MetricsIntensity" : 0.05339856236411894,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 13.088067485205714,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.551509109404959,
      "MetricsIntensity" : 0.05339856236411894,
      "Density" : 3.1701877934272296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "7151f9bf-71ae-4b03-9e42-177b56ab396b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.551509109404959,
      "MetricsIntensity" : 0.05339856236411894,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 13.088067485205714,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.551509109404959,
      "MetricsIntensity" : 0.05339856236411895,
      "Density" : 3.170187793427229
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "1cc899c0-6765-4a85-b0eb-36d878b034eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5514591424801674,
      "MetricsIntensity" : 0.05341290357916551,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 13.088093481620284,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634402654867257,
      "LackOfCohesion" : 0.5514591424801674,
      "MetricsIntensity" : 0.05341290357916551,
      "Density" : 3.171361502347419
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(int, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a3b65116-0612-4613-bfd0-e41ea325e8ca",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5514969820188959,
      "MetricsIntensity" : 0.05339410740597327,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088106819542986,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123892,
      "LackOfCohesion" : 0.5514969820188959,
      "MetricsIntensity" : 0.05339410740597327,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "78c1c11f-77c2-478c-b60f-4fb7b3ffcbbd",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5515040385583688,
      "MetricsIntensity" : 0.05338968639344482,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088107098852966,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123892,
      "LackOfCohesion" : 0.5515040385583688,
      "MetricsIntensity" : 0.05338968639344482,
      "Density" : 3.170774647887324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "fe07ff48-e1a3-45a5-9e15-e2a3941203d6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5514725073546044,
      "MetricsIntensity" : 0.053412903579165505,
      "Density" : 0.9963140434942868
    },
    "euclideanDistance" : 13.088147941473638,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5514725073546044,
      "MetricsIntensity" : 0.05341290357916551,
      "Density" : 3.172535211267606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4f11da65-1f27-470c-8882-c39e89fe105f",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5515363960236014,
      "MetricsIntensity" : 0.05339859630973616,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 14.081765889188691,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221244,
      "LackOfCohesion" : 0.5515363960236014,
      "MetricsIntensity" : 0.05339859630973617,
      "Density" : 3.1690140845070425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "659e5571-5885-4f73-9cac-42766c8d91fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5515578355096772,
      "MetricsIntensity" : 0.0533923422338778,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 15.076297423407286,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769908,
      "LackOfCohesion" : 0.5515578355096772,
      "MetricsIntensity" : 0.05339234223387781,
      "Density" : 3.1678403755868545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a70d12a7-ba5e-46ae-a8a7-0119380f8c06",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5515578355096772,
      "MetricsIntensity" : 0.05339230828826059,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 15.076344170129179,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633849557522124,
      "LackOfCohesion" : 0.5515578355096772,
      "MetricsIntensity" : 0.05339230828826059,
      "Density" : 3.1690140845070425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "e7f1937a-18c0-41d6-9ece-c3918e9169ff",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.05339237617949504,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 16.07148221660854,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632743362831858,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.05339237617949504,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "2bd38379-4429-4c61-95fb-e54a42c7bd6e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5514970653113824,
      "MetricsIntensity" : 0.05339676324640626,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 16.07152588234878,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633296460176991,
      "LackOfCohesion" : 0.5514970653113824,
      "MetricsIntensity" : 0.05339676324640626,
      "Density" : 3.1685261303581918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "77dccf58-02e6-4b55-b1c0-e892abb0d267",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.05339234223387781,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 16.071526044641104,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63329646017699,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.053392342233877815,
      "Density" : 3.1685261303581926
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "2e9237c0-1d6e-4798-9382-c03323af4c2f",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.05339234223387781,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 16.071526044641104,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769908,
      "LackOfCohesion" : 0.5515022227821589,
      "MetricsIntensity" : 0.05339234223387781,
      "Density" : 3.1685261303581918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "44761d93-02cc-4152-bd56-0b9508257883",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.551502222782159,
      "MetricsIntensity" : 0.05339234223387777,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 16.071526044641104,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633296460176991,
      "LackOfCohesion" : 0.551502222782159,
      "MetricsIntensity" : 0.05339234223387776,
      "Density" : 3.168526130358192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "3023699a-082e-4648-a1ba-49f7645ed8c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.551449248760619,
      "MetricsIntensity" : 0.05341110446145284,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 16.071590953347773,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221244,
      "LackOfCohesion" : 0.551449248760619,
      "MetricsIntensity" : 0.05341110446145284,
      "Density" : 3.1708749266001166
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "333ffb8f-60e4-4f07-8114-6974bb90de27",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5514256824387553,
      "MetricsIntensity" : 0.053394141351590485,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 16.071611126950877,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5514256824387553,
      "MetricsIntensity" : 0.0533941413515905,
      "Density" : 3.1690140845070425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "aa9f7bbf-e249-42ca-9cbb-0f49878f58d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5514248759377116,
      "MetricsIntensity" : 0.05339414135159048,
      "Density" : 0.9953925543678585
    },
    "euclideanDistance" : 16.07162251267375,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5514248759377116,
      "MetricsIntensity" : 0.05339414135159048,
      "Density" : 3.169600938967136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "52c6b11e-4d78-4d66-bb7c-cd8fc9ec79e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5513568162107535,
      "MetricsIntensity" : 0.05342806757131519,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.07163170590548,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5513568162107535,
      "MetricsIntensity" : 0.05342806757131519,
      "Density" : 3.170187793427229
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "971eb455-be23-4e56-803f-488696bb291e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5513684835925179,
      "MetricsIntensity" : 0.05341290357916551,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 16.0716759386832,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5513684835925179,
      "MetricsIntensity" : 0.05341290357916551,
      "Density" : 3.171361502347419
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "f3aeb22e-3918-456d-9b08-8b94646d8f5e",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5513536708566835,
      "MetricsIntensity" : 0.05343116890756274,
      "Density" : 0.9961297456690011
    },
    "euclideanDistance" : 16.071707965702167,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575225,
      "LackOfCohesion" : 0.5513536708566835,
      "MetricsIntensity" : 0.05343116890756275,
      "Density" : 3.1719483568075115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d6ec4f82-2d70-48d1-b6b8-9e536873c39e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5514876699188829,
      "MetricsIntensity" : 0.05339679719202348,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 17.06729401689734,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318577,
      "LackOfCohesion" : 0.5514876699188829,
      "MetricsIntensity" : 0.053396797192023476,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "0f65f23b-5164-48ed-ad1d-b2a2501de4a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.551487669918883,
      "MetricsIntensity" : 0.053396763246406256,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 17.067335287736988,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.551487669918883,
      "MetricsIntensity" : 0.053396763246406256,
      "Density" : 3.168526130358192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "641239a6-20a4-4b67-b775-4cef05bd058a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5514947264583561,
      "MetricsIntensity" : 0.05339234223387783,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 17.067335501921647,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769902,
      "LackOfCohesion" : 0.5514947264583561,
      "MetricsIntensity" : 0.05339234223387782,
      "Density" : 3.1685261303581913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "0102dbb2-a0d5-42ed-acb2-b79914ed5d05",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5513533243599389,
      "MetricsIntensity" : 0.0534173585373112,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 17.06741359728601,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672566,
      "LackOfCohesion" : 0.5513533243599389,
      "MetricsIntensity" : 0.053417358537311194,
      "Density" : 3.170874926600117
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "ee7826e5-cc80-449a-aba5-1dd76a743481",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514520759321677,
      "MetricsIntensity" : 0.05339859630973614,
      "Density" : 0.9939181717655732
    },
    "euclideanDistance" : 18.063557778174644,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318582,
      "LackOfCohesion" : 0.5514520759321677,
      "MetricsIntensity" : 0.05339859630973614,
      "Density" : 3.1667645331767478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "b17ee6b5-a75d-4f12-9cb4-995b9f39b21d",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.551469478839788,
      "MetricsIntensity" : 0.053396797192023504,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 18.063568445776127,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318575,
      "LackOfCohesion" : 0.551469478839788,
      "MetricsIntensity" : 0.05339679719202349,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "6532c23c-cf72-49f7-a8e6-2e108c94b6df",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514694788397881,
      "MetricsIntensity" : 0.0533967971920235,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 18.063568445776127,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632743362831858,
      "LackOfCohesion" : 0.5514694788397881,
      "MetricsIntensity" : 0.05339679719202349,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "1f4d4d68-4de2-49ed-8232-7ce5a80cee83",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514917064973386,
      "MetricsIntensity" : 0.053392376179495035,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 18.063569111318124,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318575,
      "LackOfCohesion" : 0.5514917064973386,
      "MetricsIntensity" : 0.053392376179495035,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "9b95a705-f168-4e01-abb9-2b4416579ebb",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5513871346759115,
      "MetricsIntensity" : 0.05341376030188584,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 18.063584688044465,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.5513871346759115,
      "MetricsIntensity" : 0.05341376030188585,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "9e8ad347-d685-477a-a926-96cca5803ed2",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514470398438718,
      "MetricsIntensity" : 0.05339856236411894,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 18.063606760662438,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769904,
      "LackOfCohesion" : 0.5514470398438718,
      "MetricsIntensity" : 0.05339856236411895,
      "Density" : 3.168526130358193
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "67ae36ce-a06b-470e-8bfa-2e73993ec66f",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514694788397881,
      "MetricsIntensity" : 0.05339676324640625,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 18.063607440377226,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769902,
      "LackOfCohesion" : 0.5514694788397881,
      "MetricsIntensity" : 0.05339676324640625,
      "Density" : 3.1685261303581913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "846a9e73-0519-49dc-ad6c-9369b0e93cd5",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514801735950801,
      "MetricsIntensity" : 0.05339234223387783,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 18.06360775381574,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.5514801735950801,
      "MetricsIntensity" : 0.05339234223387783,
      "Density" : 3.1685261303581913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "1df817c4-5eb7-4158-947a-23661a4f1c2f",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.551460548673687,
      "MetricsIntensity" : 0.05339679719202348,
      "Density" : 0.9939181717655732
    },
    "euclideanDistance" : 19.060223733157223,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632743362831858,
      "LackOfCohesion" : 0.551460548673687,
      "MetricsIntensity" : 0.05339679719202349,
      "Density" : 3.1667645331767473
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "74b48fa2-7e1b-4b63-85cb-846580298a87",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514597421726435,
      "MetricsIntensity" : 0.05339676324640624,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 19.060270276709005,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769908,
      "LackOfCohesion" : 0.5514597421726435,
      "MetricsIntensity" : 0.05339676324640625,
      "Density" : 3.1685261303581918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "f6ad7e04-639e-4bd1-8acb-f416e55ed963",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514619825159854,
      "MetricsIntensity" : 0.05339676324640623,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 19.06027034152769,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.5514619825159854,
      "MetricsIntensity" : 0.053396763246406236,
      "Density" : 3.1685261303581913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "bd500f28-fc60-41d3-81a7-0450b83c7c05",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515149919746923,
      "MetricsIntensity" : 0.0534056731626976,
      "Density" : 0.9937338739402876
    },
    "euclideanDistance" : 20.057230597082622,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633296460176991,
      "LackOfCohesion" : 0.5515149919746923,
      "MetricsIntensity" : 0.053405673162697585,
      "Density" : 3.168037602820211
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "52f1e68d-c83d-43ca-abbe-9452d73c2fbb",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515656671235992,
      "MetricsIntensity" : 0.053405673162697585,
      "Density" : 0.9937338739402876
    },
    "euclideanDistance" : 20.0572319905645,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.5515656671235992,
      "MetricsIntensity" : 0.053405673162697585,
      "Density" : 3.168037602820211
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "118f07ef-6d49-4a23-85e9-9d0346a67827",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514029999990053,
      "MetricsIntensity" : 0.053413726356268586,
      "Density" : 0.9939181717655732
    },
    "euclideanDistance" : 21.054502299933073,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318582,
      "LackOfCohesion" : 0.5514029999990053,
      "MetricsIntensity" : 0.05341372635626858,
      "Density" : 3.1667645331767473
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "459a5022-4c04-472b-b2d7-3efd0bd3b2f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5514981002583901,
      "MetricsIntensity" : 0.053405673162697564,
      "Density" : 0.9935495761150018
    },
    "euclideanDistance" : 22.052016654987884,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632743362831857,
      "LackOfCohesion" : 0.5514981002583901,
      "MetricsIntensity" : 0.053405673162697564,
      "Density" : 3.1674500587544068
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.FilterInvocation.DummyRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.server.DefaultServerRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.AuthorizationCodeGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  } ]
}