{
  "executionId" : "78acdb7e-f2f7-44b5-ae7d-c400d394df52",
  "computingTime" : 3484742,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "06154625-48b9-4833-a4ad-7b3cd056b24a",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5518756988426387,
      "MetricsIntensity" : 0.053433369619028795,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 12.095416687356803,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973453,
      "LackOfCohesion" : 0.5518756988426387,
      "MetricsIntensity" : 0.053433369619028795,
      "Density" : 3.0421545667447303
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "7b808d84-318e-4f74-a898-8c82863ea53c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5518756988426387,
      "MetricsIntensity" : 0.053433369619028795,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 12.095416687356803,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097346,
      "LackOfCohesion" : 0.5518756988426387,
      "MetricsIntensity" : 0.053433369619028795,
      "Density" : 3.042154566744731
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "01a56391-64f6-4754-b556-0ac71b6d50ad",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5518546491654003,
      "MetricsIntensity" : 0.053442313480937365,
      "Density" : 0.9967395473724587
    },
    "euclideanDistance" : 12.09546100743723,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5519911504424775,
      "LackOfCohesion" : 0.5518546491654003,
      "MetricsIntensity" : 0.053442313480937365,
      "Density" : 3.0427400468384076
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "d07c4854-3ceb-4013-aa83-28f2bb5708b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5518270790494215,
      "MetricsIntensity" : 0.05344452414884738,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 13.088082591689778,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518270790494215,
      "MetricsIntensity" : 0.05344452414884737,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "02dcbdab-5b51-4ac0-b0fe-c166a7125cc7",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5518655638128572,
      "MetricsIntensity" : 0.05344231348093735,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 13.088128002515111,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973453,
      "LackOfCohesion" : 0.5518655638128572,
      "MetricsIntensity" : 0.05344231348093736,
      "Density" : 3.0421545667447307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "6951ca64-bbfe-4411-9e4d-0ee0969d9d7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5518655638128571,
      "MetricsIntensity" : 0.05344231348093736,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 13.088128002515111,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518655638128571,
      "MetricsIntensity" : 0.053442313480937365,
      "Density" : 3.0421545667447303
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "3409bf5a-8f61-4057-8010-41b625ef7877",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5509336808082825,
      "MetricsIntensity" : 0.05345703230056405,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 14.081807559188992,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973448,
      "LackOfCohesion" : 0.5509336808082825,
      "MetricsIntensity" : 0.053457032300564054,
      "Density" : 3.0409836065573774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "0ef9de73-9e90-4267-8336-daab7fc7b473",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5519727954369951,
      "MetricsIntensity" : 0.05343157050131613,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 14.081809312524907,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5519727954369951,
      "MetricsIntensity" : 0.05343157050131613,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "eb279a73-ece3-4dfa-a440-292dd0a69060",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5518068526048335,
      "MetricsIntensity" : 0.05345703230056405,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 14.081828181789584,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973455,
      "LackOfCohesion" : 0.5518068526048335,
      "MetricsIntensity" : 0.053457032300564054,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "5eaf2693-b4ab-4327-a2c5-ef47d9882e5c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5518135856665766,
      "MetricsIntensity" : 0.05345346801075594,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 14.081828432100991,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518135856665766,
      "MetricsIntensity" : 0.053453468010755935,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "688b5e5a-ba91-41bf-a1ae-23cfc60b586b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5518753432275585,
      "MetricsIntensity" : 0.05343605940507903,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 14.081844352427282,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973457,
      "LackOfCohesion" : 0.5518753432275585,
      "MetricsIntensity" : 0.05343605940507903,
      "Density" : 3.040983606557378
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "fa1b3fd1-5c7b-4b06-8f42-a24916b7061d",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5509890336632426,
      "MetricsIntensity" : 0.053448567556795716,
      "Density" : 0.9967395473724587
    },
    "euclideanDistance" : 14.081850407124895,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973453,
      "LackOfCohesion" : 0.5509890336632426,
      "MetricsIntensity" : 0.05344856755679571,
      "Density" : 3.042740046838407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "acf219a5-bf43-4fa6-adfb-0e8da025ac81",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5509731578123961,
      "MetricsIntensity" : 0.05344411259865004,
      "Density" : 0.9969313387034906
    },
    "euclideanDistance" : 14.0818886308035,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5519911504424777,
      "LackOfCohesion" : 0.5509731578123961,
      "MetricsIntensity" : 0.053444112598650034,
      "Density" : 3.043325526932084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.PostInvocationAdviceProvider(PostInvocationAuthorizationAdvice)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "7c845ece-01cb-4d18-a43e-b194b3b80ba8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5509453750734151,
      "MetricsIntensity" : 0.05345662075036672,
      "Density" : 0.9971231300345225
    },
    "euclideanDistance" : 14.081926464552593,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5525442477876108,
      "LackOfCohesion" : 0.5509453750734151,
      "MetricsIntensity" : 0.05345662075036672,
      "Density" : 3.043911007025761
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.PostInvocationAdviceProvider(PostInvocationAuthorizationAdvice)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "228459d3-23d1-4031-9c24-c19a80e01848",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5519338145532204,
      "MetricsIntensity" : 0.05343779063155727,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 15.076358961359192,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550331858407079,
      "LackOfCohesion" : 0.5519338145532204,
      "MetricsIntensity" : 0.053437790631557264,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "9528e0d2-91c2-4399-a98b-09d0d70a262c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5517891612806589,
      "MetricsIntensity" : 0.05346597616247262,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 15.076400975487257,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5517891612806589,
      "MetricsIntensity" : 0.05346597616247262,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "53dde7c1-cf30-4361-ba35-488161f168e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5518073487251725,
      "MetricsIntensity" : 0.053472196292713735,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 15.076416075607494,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522117,
      "LackOfCohesion" : 0.5518073487251725,
      "MetricsIntensity" : 0.05347219629271374,
      "Density" : 3.0421545667447307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "30144648-5020-4601-8270-468c66226f64",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5509487334264785,
      "MetricsIntensity" : 0.053456620750366717,
      "Density" : 0.9969313387034906
    },
    "euclideanDistance" : 15.076457204320846,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5519911504424777,
      "LackOfCohesion" : 0.5509487334264785,
      "MetricsIntensity" : 0.053456620750366717,
      "Density" : 3.0433255269320845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.PostInvocationAdviceProvider(PostInvocationAuthorizationAdvice)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "b9abd73b-d4d5-4ee6-b625-16e2ea162504",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5509140050027521,
      "MetricsIntensity" : 0.05347223023833096,
      "Density" : 0.9963559647103951
    },
    "euclideanDistance" : 16.071641678045374,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5509140050027521,
      "MetricsIntensity" : 0.05347223023833097,
      "Density" : 3.041569086651054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "62e6e4bd-38f3-4fe4-88f4-3e5a765f805f",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518287327838848,
      "MetricsIntensity" : 0.05345965419537984,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.063687760218933,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5518287327838848,
      "MetricsIntensity" : 0.05345965419537983,
      "Density" : 3.0398126463700232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "f626a9b6-c015-453e-b6fd-55a11110e9ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518672871782451,
      "MetricsIntensity" : 0.05345029878327394,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.06368891037565,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752212,
      "LackOfCohesion" : 0.5518672871782451,
      "MetricsIntensity" : 0.05345029878327393,
      "Density" : 3.0398126463700232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "a35fda0e-db06-4cb3-8988-3e140b326663",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5517283511019705,
      "MetricsIntensity" : 0.05347354991461185,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 18.06369530878537,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5517283511019705,
      "MetricsIntensity" : 0.05347354991461185,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "cf165bb1-9dc1-4d08-8f78-7127ec9d6326",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518009500449035,
      "MetricsIntensity" : 0.053472162347096515,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.06370665296085,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518009500449035,
      "MetricsIntensity" : 0.05347216234709651,
      "Density" : 3.0398126463700232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "023231ba-a984-4bd9-958e-37b2f433f304",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518541045520958,
      "MetricsIntensity" : 0.05345655285913227,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.063708230575475,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5514380530973453,
      "LackOfCohesion" : 0.5518541045520958,
      "MetricsIntensity" : 0.05345655285913228,
      "Density" : 3.0398126463700232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "bb073ef4-5a6f-48fa-94f7-b2808eaf7f64",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518287327838846,
      "MetricsIntensity" : 0.05345655285913227,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 18.063708900515845,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5518287327838846,
      "MetricsIntensity" : 0.05345655285913227,
      "Density" : 3.0409836065573774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "a7f9b12e-8e45-4040-8c7c-3ef3ba2cc226",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518774930823607,
      "MetricsIntensity" : 0.05344407865303281,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.063708908209286,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518774930823607,
      "MetricsIntensity" : 0.05344407865303281,
      "Density" : 3.039812646370023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "d775eb0f-ff75-4576-9252-c54f5b394893",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518497103433794,
      "MetricsIntensity" : 0.05345658680474951,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.063727807869302,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551991150442478,
      "LackOfCohesion" : 0.5518497103433794,
      "MetricsIntensity" : 0.053456586804749504,
      "Density" : 3.039812646370023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "4c5d15ef-d7dd-48fb-9ec7-ab12aa30a911",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.551838512198586,
      "MetricsIntensity" : 0.053450298783273946,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 19.060346935240087,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.551838512198586,
      "MetricsIntensity" : 0.053450298783273946,
      "Density" : 3.039812646370023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "9e038713-78f0-494a-af98-b43fe1231174",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.551738130516672,
      "MetricsIntensity" : 0.05347354991461183,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 19.060354115280514,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752212,
      "LackOfCohesion" : 0.551738130516672,
      "MetricsIntensity" : 0.053473549914611826,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "fd59dc8c-9337-4ca9-97c9-385bc743731b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5517678281060844,
      "MetricsIntensity" : 0.053459242645182495,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 19.06037360891219,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5517678281060844,
      "MetricsIntensity" : 0.053459242645182495,
      "Density" : 3.0421792618629167
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSourceReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.requiresLogout(ServerWebExchangeMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.web.access.channel.InsecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  } ]
}