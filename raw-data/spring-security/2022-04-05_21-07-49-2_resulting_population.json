{
  "executionId" : "9587e018-c907-4ed7-aabe-b1cf664d0551",
  "computingTime" : 768733,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.155790711346267,
    "meanNumConcerns" : 1.6221606648199451,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "2631b7bc-8a25-4ac4-871e-af3300235d30",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531650354870794,
      "MetricsIntensity" : 0.053176115640955104,
      "Density" : 1.001117734724292
    },
    "euclideanDistance" : 10.11533269193801,
    "generation" : 5,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621278941565601,
      "LackOfCohesion" : 0.5531650354870794,
      "MetricsIntensity" : 0.05317611564095512,
      "Density" : 3.1426900584795336
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "da53c16b-d0f8-4976-8016-5b2e0b855912",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534875693712571,
      "MetricsIntensity" : 0.0531708408507599,
      "Density" : 1.001117734724292
    },
    "euclideanDistance" : 10.115384226516527,
    "generation" : 25,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6218302094818082,
      "LackOfCohesion" : 0.5534875693712571,
      "MetricsIntensity" : 0.053170840850759904,
      "Density" : 3.1426900584795328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ecf06a89-9bcb-4176-8b1b-5a6f7b1fc6a0",
    "objectives" : {
      "NumberOfConcerns" : 1.0051229508196722,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5528613435391095,
      "MetricsIntensity" : 0.05314543327536368,
      "Density" : 1.0014903129657229
    },
    "euclideanDistance" : 10.115420658355564,
    "generation" : 20,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6214876033057848,
      "LackOfCohesion" : 0.5528613435391095,
      "MetricsIntensity" : 0.05314543327536368,
      "Density" : 3.1420222092343644
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1cd69dcd-3dd4-42ab-9f65-3c5a5a0c6e87",
    "objectives" : {
      "NumberOfConcerns" : 1.005464480874317,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531836671665181,
      "MetricsIntensity" : 0.053140161923753974,
      "Density" : 1.0014903129657229
    },
    "euclideanDistance" : 10.11547219440067,
    "generation" : 17,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6220385674931128,
      "LackOfCohesion" : 0.5531836671665181,
      "MetricsIntensity" : 0.05314016192375398,
      "Density" : 3.142022209234365
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6143d3e9-3807-45b4-8244-dd083d13ab78",
    "objectives" : {
      "NumberOfConcerns" : 1.005464480874317,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.553183667166518,
      "MetricsIntensity" : 0.05314016192375399,
      "Density" : 1.0014903129657229
    },
    "euclideanDistance" : 10.11547219440067,
    "generation" : 21,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6220385674931126,
      "LackOfCohesion" : 0.553183667166518,
      "MetricsIntensity" : 0.053140161923753995,
      "Density" : 3.1420222092343657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5382a920-4d25-4e1e-99ea-07c243eb445b",
    "objectives" : {
      "NumberOfConcerns" : 1.0058060109289617,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526947315517099,
      "MetricsIntensity" : 0.05317123972747489,
      "Density" : 1.0063338301043219
    },
    "euclideanDistance" : 10.115960268617727,
    "generation" : 16,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.622589531680441,
      "LackOfCohesion" : 0.5526947315517099,
      "MetricsIntensity" : 0.05317123972747489,
      "Density" : 3.157218001168907
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "24bd5908-f013-413a-a152-deb355965b03",
    "objectives" : {
      "NumberOfConcerns" : 1.0058060109289617,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526947315517101,
      "MetricsIntensity" : 0.05317123972747486,
      "Density" : 1.0063338301043219
    },
    "euclideanDistance" : 10.115960268617727,
    "generation" : 11,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6225895316804406,
      "LackOfCohesion" : 0.5526947315517101,
      "MetricsIntensity" : 0.05317123972747487,
      "Density" : 3.157218001168907
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7e454645-f409-468b-a5dd-6286f9fbf265",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5534543077034547,
      "MetricsIntensity" : 0.05320683806185416,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 11.104792554318056,
    "generation" : 19,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6199669056811916,
      "LackOfCohesion" : 0.5534543077034547,
      "MetricsIntensity" : 0.05320683806185417,
      "Density" : 3.1427735517846687
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a0ce565b-3483-4dd1-b6a8-100c907960de",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5537770521188885,
      "MetricsIntensity" : 0.05320155982858439,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 11.1048394739343,
    "generation" : 20,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5537770521188885,
      "MetricsIntensity" : 0.0532015598285844,
      "Density" : 3.142773551784669
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5aacba4e-87c2-4f42-a9a9-9d59c11475d6",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529835082846205,
      "MetricsIntensity" : 0.053201938927020735,
      "Density" : 1.005774962742176
    },
    "euclideanDistance" : 11.105363748048493,
    "generation" : 22,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6212789415656015,
      "LackOfCohesion" : 0.5529835082846205,
      "MetricsIntensity" : 0.05320193892702074,
      "Density" : 3.157309941520469
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "db0a66c5-1d72-4984-8086-4fcde77b2bc4",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529835082846205,
      "MetricsIntensity" : 0.053201938927020735,
      "Density" : 1.005774962742176
    },
    "euclideanDistance" : 11.105363748048493,
    "generation" : 23,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621278941565601,
      "LackOfCohesion" : 0.5529835082846205,
      "MetricsIntensity" : 0.05320193892702074,
      "Density" : 3.1573099415204684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "29639488-d17b-4391-a422-800d2cdae180",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5521666300366189,
      "MetricsIntensity" : 0.053185434436966696,
      "Density" : 0.9973919523099851
    },
    "euclideanDistance" : 12.095925217954402,
    "generation" : 16,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621278941565602,
      "LackOfCohesion" : 0.5521666300366189,
      "MetricsIntensity" : 0.053185434436966696,
      "Density" : 3.1309941520467843
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "047db053-d925-4f63-9052-52d5e70ca960",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5534033316994762,
      "MetricsIntensity" : 0.053222396605014356,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 12.096142998150468,
    "generation" : 25,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5534033316994762,
      "MetricsIntensity" : 0.053222396605014356,
      "Density" : 3.142188414277354
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "d54f58fa-930f-47e3-a25d-8291ae1c1832",
    "objectives" : {
      "NumberOfConcerns" : 1.0051229508196722,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5519999093656007,
      "MetricsIntensity" : 0.053211257723032306,
      "Density" : 1.0022354694485842
    },
    "euclideanDistance" : 12.096374804889825,
    "generation" : 16,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6223814773980156,
      "LackOfCohesion" : 0.5519999093656007,
      "MetricsIntensity" : 0.053211257723032306,
      "Density" : 3.1461988304093573
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "50384cf2-90f7-4a5d-b129-f30cfb3deaaf",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521800727551577,
      "MetricsIntensity" : 0.053195709328954406,
      "Density" : 0.9968330849478391
    },
    "euclideanDistance" : 13.08853018231448,
    "generation" : 28,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207276736493934,
      "LackOfCohesion" : 0.5521800727551577,
      "MetricsIntensity" : 0.05319570932895441,
      "Density" : 3.131070801638385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "df9b4537-0fe1-4be5-92a3-31d704478143",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5525026066393354,
      "MetricsIntensity" : 0.05319043453875918,
      "Density" : 0.9968330849478391
    },
    "euclideanDistance" : 13.088569977119985,
    "generation" : 20,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6212789415656021,
      "LackOfCohesion" : 0.5525026066393354,
      "MetricsIntensity" : 0.053190434538759185,
      "Density" : 3.131070801638385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1ad1a3ec-8e8f-4f57-9156-416d382d8fe4",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5536929485065953,
      "MetricsIntensity" : 0.053253169322049855,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 13.088664630034904,
    "generation" : 5,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132456,
      "LackOfCohesion" : 0.5536929485065953,
      "MetricsIntensity" : 0.05325316932204985,
      "Density" : 3.1422716627634664
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "88c020ba-ef0e-405f-b7fc-d7f0d56fb3af",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5522884210557873,
      "MetricsIntensity" : 0.05324200308262722,
      "Density" : 1.001676602086438
    },
    "euclideanDistance" : 13.088878523428596,
    "generation" : 24,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6210700496414785,
      "LackOfCohesion" : 0.5522884210557873,
      "MetricsIntensity" : 0.05324200308262722,
      "Density" : 3.146284376828555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "32197578-d224-425b-b6cd-2380ba89cc2c",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5529730921537015,
      "MetricsIntensity" : 0.053195326164200814,
      "Density" : 1.0039120715350223
    },
    "euclideanDistance" : 13.08902614482048,
    "generation" : 26,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6199669056811912,
      "LackOfCohesion" : 0.5529730921537015,
      "MetricsIntensity" : 0.053195326164200814,
      "Density" : 3.1551522248243558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0020e6da-b0d6-40b4-b54a-b3d3f728e8c7",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5523467934261758,
      "MetricsIntensity" : 0.0531698860428888,
      "Density" : 1.004284649776453
    },
    "euclideanDistance" : 13.089054356222123,
    "generation" : 28,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6196251378169788,
      "LackOfCohesion" : 0.5523467934261758,
      "MetricsIntensity" : 0.05316988604288881,
      "Density" : 3.1544763019309525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "20922c8e-0c18-44a0-b198-43411d788cd4",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5523467934261759,
      "MetricsIntensity" : 0.05316988604288879,
      "Density" : 1.004284649776453
    },
    "euclideanDistance" : 13.089054356222123,
    "generation" : 27,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6196251378169793,
      "LackOfCohesion" : 0.5523467934261759,
      "MetricsIntensity" : 0.053169886042888796,
      "Density" : 3.1544763019309534
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "bfdad0e6-b726-41ff-a80e-48c340ad3fd3",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526693273103537,
      "MetricsIntensity" : 0.05316461125269356,
      "Density" : 1.004284649776453
    },
    "euclideanDistance" : 13.089094135729725,
    "generation" : 7,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6201764057331864,
      "LackOfCohesion" : 0.5526693273103537,
      "MetricsIntensity" : 0.05316461125269357,
      "Density" : 3.1544763019309534
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4970ccb8-83f6-4664-8992-8fb497804487",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5530954894779879,
      "MetricsIntensity" : 0.0532519382196411,
      "Density" : 0.9959016393442623
    },
    "euclideanDistance" : 14.082093509166697,
    "generation" : 25,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619757174392936,
      "LackOfCohesion" : 0.5530954894779879,
      "MetricsIntensity" : 0.05325193821964111,
      "Density" : 3.131810193321616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7cbdfe67-d12a-48c9-9962-7318388518ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5527080646771655,
      "MetricsIntensity" : 0.05326250029153758,
      "Density" : 0.996274217585693
    },
    "euclideanDistance" : 14.082129006699756,
    "generation" : 17,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6203090507726272,
      "LackOfCohesion" : 0.5527080646771655,
      "MetricsIntensity" : 0.05326250029153759,
      "Density" : 3.1311475409836076
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "93c9c4c1-e1ec-490e-8fec-1d5e759f3db2",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5524042745483302,
      "MetricsIntensity" : 0.05323172148379091,
      "Density" : 0.9966467958271237
    },
    "euclideanDistance" : 14.082191988455298,
    "generation" : 17,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5524042745483302,
      "MetricsIntensity" : 0.05323172148379092,
      "Density" : 3.13048566413107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "20a6cd28-51a4-4db4-99a5-bd3d070b40aa",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5529394727204612,
      "MetricsIntensity" : 0.053231362880536384,
      "Density" : 1.0033532041728763
    },
    "euclideanDistance" : 14.082543356849007,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6181015452538625,
      "LackOfCohesion" : 0.5529394727204612,
      "MetricsIntensity" : 0.053231362880536384,
      "Density" : 3.1552431165787924
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e415c1b8-26cc-44d8-a074-d6cfdb8219bf",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526355315419893,
      "MetricsIntensity" : 0.053200604397470555,
      "Density" : 1.003725782414307
    },
    "euclideanDistance" : 14.08260644700085,
    "generation" : 27,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6183121897407617,
      "LackOfCohesion" : 0.5526355315419893,
      "MetricsIntensity" : 0.053200604397470555,
      "Density" : 3.154566744730679
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "62749802-5c87-4f86-b858-a843e851145e",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5527215249564076,
      "MetricsIntensity" : 0.05327278860598383,
      "Density" : 0.9916169895678092
    },
    "euclideanDistance" : 15.076353354323341,
    "generation" : 21,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6197571743929358,
      "LackOfCohesion" : 0.5527215249564076,
      "MetricsIntensity" : 0.05327278860598383,
      "Density" : 3.1183362624487407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "24a44646-ec4a-4416-98f6-5fe48d373327",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5524177260414892,
      "MetricsIntensity" : 0.053242003082627214,
      "Density" : 0.99198956780924
    },
    "euclideanDistance" : 15.076412051500453,
    "generation" : 23,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6199669056811914,
      "LackOfCohesion" : 0.5524177260414892,
      "MetricsIntensity" : 0.053242003082627214,
      "Density" : 3.1176814988290396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "21a8c218-86df-4957-aa5e-453d08af61a7",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5527404704569229,
      "MetricsIntensity" : 0.053236724849357445,
      "Density" : 0.99198956780924
    },
    "euclideanDistance" : 15.076446588787649,
    "generation" : 18,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5527404704569229,
      "MetricsIntensity" : 0.05323672484935745,
      "Density" : 3.1176814988290396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "8710b48f-54d3-4e95-a914-6f4b9976109c",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5529974163534249,
      "MetricsIntensity" : 0.053293319333019874,
      "Density" : 0.995715350223547
    },
    "euclideanDistance" : 15.076565573291933,
    "generation" : 16,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6189950303699612,
      "LackOfCohesion" : 0.5529974163534249,
      "MetricsIntensity" : 0.05329331933301987,
      "Density" : 3.131224370240188
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "ece66561-9b89-46af-8f3f-9136c929cb7c",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5516512905871217,
      "MetricsIntensity" : 0.05320992927624714,
      "Density" : 1.0001862891207154
    },
    "euclideanDistance" : 15.076902699226299,
    "generation" : 22,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6194153337010477,
      "LackOfCohesion" : 0.5516512905871217,
      "MetricsIntensity" : 0.053209929276247146,
      "Density" : 3.143442622950819
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "28b3029a-ef59-48ea-9e61-205f17a0b460",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5532114186423092,
      "MetricsIntensity" : 0.053241649905194886,
      "Density" : 1.003166915052161
    },
    "euclideanDistance" : 15.077112587171719,
    "generation" : 19,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619205298013245,
      "LackOfCohesion" : 0.5532114186423092,
      "MetricsIntensity" : 0.05324164990519489,
      "Density" : 3.1546572934973636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "a9d314e8-bb76-4b26-90c3-6df901c6e01e",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5514844610906002,
      "MetricsIntensity" : 0.05323576941824358,
      "Density" : 1.0050298062593144
    },
    "euclideanDistance" : 15.077264219174852,
    "generation" : 8,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5514844610906002,
      "MetricsIntensity" : 0.05323576941824358,
      "Density" : 3.1586651053864165
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b4c4f9d2-6839-4974-bfa2-b05b2f23f440",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5530108854302351,
      "MetricsIntensity" : 0.05330361437185461,
      "Density" : 0.9910581222056631
    },
    "euclideanDistance" : 16.07149366880416,
    "generation" : 22,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618442849254555,
      "LackOfCohesion" : 0.5530108854302351,
      "MetricsIntensity" : 0.05330361437185461,
      "Density" : 3.118405627198124
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "1778c13c-2827-4abd-898f-f2787f348da7",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5527066990826658,
      "MetricsIntensity" : 0.05327278860598382,
      "Density" : 0.9914307004470939
    },
    "euclideanDistance" : 16.0715486414851,
    "generation" : 29,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6186534216335544,
      "LackOfCohesion" : 0.5527066990826658,
      "MetricsIntensity" : 0.05327278860598382,
      "Density" : 3.117750439367311
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "740408f3-53ef-4cf9-ba66-ea6d8e60acbb",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5519397630172898,
      "MetricsIntensity" : 0.053240693850024154,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 16.072008622525516,
    "generation" : 24,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618101545253863,
      "LackOfCohesion" : 0.5519397630172898,
      "MetricsIntensity" : 0.05324069385002415,
      "Density" : 3.1435266549502052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "fbe4dc18-56d3-4b3e-8048-321d97f14279",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5531779330045299,
      "MetricsIntensity" : 0.05327774045189474,
      "Density" : 1.002608047690015
    },
    "euclideanDistance" : 16.072173170334985,
    "generation" : 13,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6173384870237435,
      "LackOfCohesion" : 0.5531779330045299,
      "MetricsIntensity" : 0.05327774045189474,
      "Density" : 3.15474794841735
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "9acc9dc2-5f01-45d3-a3b5-c3a3cde7b10e",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5517728245531023,
      "MetricsIntensity" : 0.05326655086997097,
      "Density" : 1.0044709388971684
    },
    "euclideanDistance" : 16.072347526178046,
    "generation" : 23,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132448,
      "LackOfCohesion" : 0.5517728245531023,
      "MetricsIntensity" : 0.05326655086997098,
      "Density" : 3.15875805506737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "28c5d998-d7c9-4938-b15d-1624fbb7a7df",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5517580855478399,
      "MetricsIntensity" : 0.05319342229843144,
      "Density" : 1.007451564828614
    },
    "euclideanDistance" : 16.07261856220042,
    "generation" : 22,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6196251378169793,
      "LackOfCohesion" : 0.5517580855478399,
      "MetricsIntensity" : 0.05319342229843145,
      "Density" : 3.158878504672897
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e947520d-3abc-49e2-96ab-20495dc99483",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5515913648768215,
      "MetricsIntensity" : 0.053219245584497046,
      "Density" : 1.0083830104321907
    },
    "euclideanDistance" : 16.072713994080374,
    "generation" : 21,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207276736493932,
      "LackOfCohesion" : 0.5515913648768215,
      "MetricsIntensity" : 0.05321924558449705,
      "Density" : 3.161799065420561
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1c6218bd-0655-442e-9def-6cdd0a3dccb9",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5515913648768215,
      "MetricsIntensity" : 0.053219245584497046,
      "Density" : 1.0083830104321907
    },
    "euclideanDistance" : 16.072713994080374,
    "generation" : 12,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207276736493932,
      "LackOfCohesion" : 0.5515913648768215,
      "MetricsIntensity" : 0.05321924558449706,
      "Density" : 3.161799065420561
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "20eb3947-fa4e-49d9-8ee1-0689d459b09a",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5530416285916974,
      "MetricsIntensity" : 0.05332228850817585,
      "Density" : 0.9871460506706409
    },
    "euclideanDistance" : 17.067119670623324,
    "generation" : 22,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6195472114853673,
      "LackOfCohesion" : 0.5530416285916974,
      "MetricsIntensity" : 0.05332228850817586,
      "Density" : 3.1060961313012894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "6ccb6b12-1ebb-467c-94ee-133376f5472c",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.553060377385397,
      "MetricsIntensity" : 0.05328616886411717,
      "Density" : 0.9875186289120715
    },
    "euclideanDistance" : 17.0672018850568,
    "generation" : 24,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6203090507726268,
      "LackOfCohesion" : 0.553060377385397,
      "MetricsIntensity" : 0.05328616886411717,
      "Density" : 3.1054481546572936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "87001e7c-5332-4cb0-8567-0c93906dda9b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5533179097827191,
      "MetricsIntensity" : 0.053342865036800635,
      "Density" : 0.9953427719821163
    },
    "euclideanDistance" : 17.06754463861347,
    "generation" : 17,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5533179097827191,
      "MetricsIntensity" : 0.053342865036800635,
      "Density" : 3.1318874560375147
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "690f333c-4b0e-4b0c-996e-cbb3c039dd9e",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5521528136506554,
      "MetricsIntensity" : 0.05322548781940732,
      "Density" : 0.9972056631892697
    },
    "euclideanDistance" : 17.0677957742601,
    "generation" : 16,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6210700496414785,
      "LackOfCohesion" : 0.5521528136506554,
      "MetricsIntensity" : 0.05322548781940732,
      "Density" : 3.132241076653012
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a21168bd-a3e9-44d2-a490-e44352fc7f35",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5536547653301119,
      "MetricsIntensity" : 0.05334787821930418,
      "Density" : 0.9865871833084948
    },
    "euclideanDistance" : 18.063335806332713,
    "generation" : 21,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5536547653301119,
      "MetricsIntensity" : 0.05334787821930417,
      "Density" : 3.1061583577712613
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "286c0350-5fd1-4276-92b1-64366b8b19a3",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5533499593314007,
      "MetricsIntensity" : 0.05331700337525473,
      "Density" : 0.9869597615499255
    },
    "euclideanDistance" : 18.06338458202065,
    "generation" : 25,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6189950303699614,
      "LackOfCohesion" : 0.5533499593314007,
      "MetricsIntensity" : 0.05331700337525473,
      "Density" : 3.1055099648300115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "cb805ba3-2dfe-4140-928a-9247122473fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5524816091262744,
      "MetricsIntensity" : 0.05331793279193007,
      "Density" : 0.9985096870342772
    },
    "euclideanDistance" : 18.06389817791317,
    "generation" : 18,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617127071823204,
      "LackOfCohesion" : 0.5524816091262744,
      "MetricsIntensity" : 0.05331793279193007,
      "Density" : 3.1436950146627565
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "c48f6eb6-6a88-46d1-8a05-00a7dd848906",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5510621984347138,
      "MetricsIntensity" : 0.053233480894880836,
      "Density" : 1.0072652757078986
    },
    "euclideanDistance" : 18.064511026642567,
    "generation" : 24,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6194153337010475,
      "LackOfCohesion" : 0.5510621984347138,
      "MetricsIntensity" : 0.053233480894880836,
      "Density" : 3.1601402688486266
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7718394e-ca81-46af-bad0-3446924c71e9",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5508953689381921,
      "MetricsIntensity" : 0.053259321036877284,
      "Density" : 1.0081967213114753
    },
    "euclideanDistance" : 18.064595903507747,
    "generation" : 17,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5508953689381921,
      "MetricsIntensity" : 0.05325932103687729,
      "Density" : 3.1630625365283462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e43008bc-c34e-448f-b838-5be35d92f16a",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5515455107059897,
      "MetricsIntensity" : 0.05324869214631772,
      "Density" : 0.9986959761549925
    },
    "euclideanDistance" : 19.060600246490043,
    "generation" : 28,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617549668874172,
      "LackOfCohesion" : 0.5515455107059897,
      "MetricsIntensity" : 0.05324869214631773,
      "Density" : 3.1405975395430574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e86d4b61-a7a1-4352-a4bd-1162d9b8c723",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516535858919476,
      "MetricsIntensity" : 0.05329508104399357,
      "Density" : 1.003166915052161
    },
    "euclideanDistance" : 19.060820351987367,
    "generation" : 22,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391494,
      "LackOfCohesion" : 0.5516535858919476,
      "MetricsIntensity" : 0.053295081043993574,
      "Density" : 3.154657293497363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "569c7dde-58f6-44d0-a2a6-fadc8085d522",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5513502860888186,
      "MetricsIntensity" : 0.05326426085181829,
      "Density" : 1.0067064083457526
    },
    "euclideanDistance" : 19.061033972971675,
    "generation" : 23,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6181015452538627,
      "LackOfCohesion" : 0.5513502860888186,
      "MetricsIntensity" : 0.05326426085181829,
      "Density" : 3.160233918128655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f04a13e0-86d1-4906-845a-28e980e47f36",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5511833476246312,
      "MetricsIntensity" : 0.053290117871765096,
      "Density" : 1.0076378539493294
    },
    "euclideanDistance" : 19.06111433059119,
    "generation" : 17,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132448,
      "LackOfCohesion" : 0.5511833476246312,
      "MetricsIntensity" : 0.0532901178717651,
      "Density" : 3.163157894736843
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1aee1a49-00e9-4441-a5a6-2a80d7501ca0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5528019747324022,
      "MetricsIntensity" : 0.05336752702919426,
      "Density" : 0.9981371087928465
    },
    "euclideanDistance" : 20.05748408135018,
    "generation" : 18,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616915422885572,
      "LackOfCohesion" : 0.5528019747324022,
      "MetricsIntensity" : 0.053367527029194256,
      "Density" : 3.1443661971830994
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "bc383acc-7ded-41c3-95cc-d49370b22a8c",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5512992767889523,
      "MetricsIntensity" : 0.05327982955731888,
      "Density" : 1.0065201192250373
    },
    "euclideanDistance" : 20.057997671747955,
    "generation" : 23,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6186534216335544,
      "LackOfCohesion" : 0.5512992767889523,
      "MetricsIntensity" : 0.053279829557318886,
      "Density" : 3.1596491228070174
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "6bb2be31-1b06-425c-be55-6735aa4ffbc8",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5511323383247649,
      "MetricsIntensity" : 0.05330568657726571,
      "Density" : 1.007451564828614
    },
    "euclideanDistance" : 20.05807403870834,
    "generation" : 24,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619757174392936,
      "LackOfCohesion" : 0.5511323383247649,
      "MetricsIntensity" : 0.05330568657726572,
      "Density" : 3.1625730994152046
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "cc00b19e-f780-4285-a7e5-2920c605de66",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5533209717589085,
      "MetricsIntensity" : 0.05333853504449338,
      "Density" : 0.9908718330849479
    },
    "euclideanDistance" : 21.054505519567535,
    "generation" : 24,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6187845303867403,
      "LackOfCohesion" : 0.5533209717589085,
      "MetricsIntensity" : 0.05333853504449338,
      "Density" : 3.119648093841642
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "7ab5fe2a-50bf-4049-94e9-ae6e253bc9b9",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.551802630754096,
      "MetricsIntensity" : 0.053258979170976176,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 21.054648578836748,
    "generation" : 21,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6175496688741722,
      "LackOfCohesion" : 0.551802630754096,
      "MetricsIntensity" : 0.053258979170976176,
      "Density" : 3.1271236086701815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "8776f5eb-27a1-46b7-99d9-5691bf0b0b0f",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5533388454151654,
      "MetricsIntensity" : 0.05331168689668109,
      "Density" : 0.9981371087928465
    },
    "euclideanDistance" : 21.05478420806319,
    "generation" : 19,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6165745856353593,
      "LackOfCohesion" : 0.5533388454151654,
      "MetricsIntensity" : 0.053311686896681094,
      "Density" : 3.1425219941348983
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "91b078c2-9352-44e6-9cc4-2276d6f2c1ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5536622230766727,
      "MetricsIntensity" : 0.05330639830716555,
      "Density" : 0.9981371087928465
    },
    "euclideanDistance" : 21.05480890850937,
    "generation" : 29,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6171270718232043,
      "LackOfCohesion" : 0.5536622230766727,
      "MetricsIntensity" : 0.05330639830716555,
      "Density" : 3.1425219941348987
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "03e7f250-fe02-4063-aaec-eb2979ab15c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5516160123294798,
      "MetricsIntensity" : 0.0533209549639534,
      "Density" : 0.9988822652757079
    },
    "euclideanDistance" : 21.05483924697523,
    "generation" : 22,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391498,
      "LackOfCohesion" : 0.5516160123294798,
      "MetricsIntensity" : 0.05332095496395341,
      "Density" : 3.143024618991793
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "b1068e45-20b9-4d3b-b3c6-491af703150e",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5503788625386308,
      "MetricsIntensity" : 0.05328388013575225,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 21.054899708554533,
    "generation" : 22,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6186534216335542,
      "LackOfCohesion" : 0.5503788625386308,
      "MetricsIntensity" : 0.05328388013575225,
      "Density" : 3.1441124780316345
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "43c41152-4f6e-48d2-b6f8-24d3a81e99e2",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5503788625386307,
      "MetricsIntensity" : 0.05328388013575226,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 21.054899708554533,
    "generation" : 27,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618653421633554,
      "LackOfCohesion" : 0.5503788625386307,
      "MetricsIntensity" : 0.05328388013575226,
      "Density" : 3.144112478031635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "63314612-7faa-4cbf-b3fd-49302178ee37",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5520719958487736,
      "MetricsIntensity" : 0.0533259415503509,
      "Density" : 0.9934798807749627
    },
    "euclideanDistance" : 22.05202709602894,
    "generation" : 21,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6154696132596686,
      "LackOfCohesion" : 0.5520719958487736,
      "MetricsIntensity" : 0.0533259415503509,
      "Density" : 3.127859237536657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "ad7fa8d9-3a2c-4d4a-8546-0d8465b818cb",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5517682243399193,
      "MetricsIntensity" : 0.05329508104399356,
      "Density" : 0.9938524590163934
    },
    "euclideanDistance" : 22.052067150172117,
    "generation" : 29,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6156819436775263,
      "LackOfCohesion" : 0.5517682243399193,
      "MetricsIntensity" : 0.05329508104399356,
      "Density" : 3.1271981242672924
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "c46d12ff-4373-4a98-ab5f-4cf27b7ba303",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5520487183557076,
      "MetricsIntensity" : 0.05329017277525146,
      "Density" : 0.9949701937406855
    },
    "euclideanDistance" : 22.052186510710783,
    "generation" : 26,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391496,
      "LackOfCohesion" : 0.5520487183557076,
      "MetricsIntensity" : 0.05329017277525145,
      "Density" : 3.1307151230949595
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "a3947dd5-cdfa-4fc7-a7df-33918c6400d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5506666918605515,
      "MetricsIntensity" : 0.053314713150988895,
      "Density" : 0.9992548435171386
    },
    "euclideanDistance" : 22.052330255172752,
    "generation" : 26,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6173384870237435,
      "LackOfCohesion" : 0.5506666918605515,
      "MetricsIntensity" : 0.0533147131509889,
      "Density" : 3.14419695193435
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "93868e58-b2d3-4280-ace8-ab6c8fc21dec",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5533182973900286,
      "MetricsIntensity" : 0.053393434815541485,
      "Density" : 0.9864008941877794
    },
    "euclideanDistance" : 23.049540467820524,
    "generation" : 11,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6180210060807079,
      "LackOfCohesion" : 0.5533182973900286,
      "MetricsIntensity" : 0.053393434815541485,
      "Density" : 3.1073943661971826
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "0b9d3118-d119-4451-9ef9-8c1d406088ec",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5536418866861309,
      "MetricsIntensity" : 0.05338814276490717,
      "Density" : 0.9864008941877794
    },
    "euclideanDistance" : 23.04956304046859,
    "generation" : 22,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6185737976782755,
      "LackOfCohesion" : 0.5536418866861309,
      "MetricsIntensity" : 0.05338814276490717,
      "Density" : 3.1073943661971826
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "2f6ad5b9-f7b3-4e60-9c83-4b071955f8a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5510858237474936,
      "MetricsIntensity" : 0.05333528472516169,
      "Density" : 0.9899403874813711
    },
    "euclideanDistance" : 23.049623783369036,
    "generation" : 8,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6165745856353584,
      "LackOfCohesion" : 0.5510858237474936,
      "MetricsIntensity" : 0.05333528472516169,
      "Density" : 3.116715542521994
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "3ed0b773-4dbb-421f-8036-e2797c7648db",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5507826967955681,
      "MetricsIntensity" : 0.05330441811215415,
      "Density" : 0.9903129657228018
    },
    "euclideanDistance" : 23.04966209535746,
    "generation" : 9,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6167863059083378,
      "LackOfCohesion" : 0.5507826967955681,
      "MetricsIntensity" : 0.05330441811215416,
      "Density" : 3.1160609613130132
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "015312b4-f1d2-43d1-8765-734300ebec77",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5506156492212736,
      "MetricsIntensity" : 0.05333029203211403,
      "Density" : 0.9951564828614009
    },
    "euclideanDistance" : 23.04989641463463,
    "generation" : 28,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391494,
      "LackOfCohesion" : 0.5506156492212736,
      "MetricsIntensity" : 0.05333029203211403,
      "Density" : 3.131301289566237
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "fda588e4-28e6-4849-bf90-cb00a3aa2009",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5513744924803126,
      "MetricsIntensity" : 0.053366191739495125,
      "Density" : 0.9893815201192251
    },
    "euclideanDistance" : 24.047487257761805,
    "generation" : 10,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6152570480928692,
      "LackOfCohesion" : 0.5513744924803126,
      "MetricsIntensity" : 0.053366191739495125,
      "Density" : 3.116784037558686
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "1eec80ab-8d8a-4b7e-9568-c3d877615749",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5514019174533175,
      "MetricsIntensity" : 0.05325178537979257,
      "Density" : 1.002608047690015
    },
    "euclideanDistance" : 24.048148978898556,
    "generation" : 21,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616997792494482,
      "LackOfCohesion" : 0.5514019174533175,
      "MetricsIntensity" : 0.05325178537979257,
      "Density" : 3.1528998242530752
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ab2a30d5-057f-4df4-aa0d-072d374c2233",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.55123497898913,
      "MetricsIntensity" : 0.05327764239973939,
      "Density" : 1.0035394932935917
    },
    "euclideanDistance" : 24.048212493459104,
    "generation" : 14,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6181015452538627,
      "LackOfCohesion" : 0.55123497898913,
      "MetricsIntensity" : 0.05327764239973939,
      "Density" : 3.155828939660222
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e159a321-a55f-487c-9ad4-f3fa9d105c96",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5519941360586836,
      "MetricsIntensity" : 0.05331344975985295,
      "Density" : 1.001676602086438
    },
    "euclideanDistance" : 25.0461207673201,
    "generation" : 13,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6154696132596684,
      "LackOfCohesion" : 0.5519941360586836,
      "MetricsIntensity" : 0.05331344975985294,
      "Density" : 3.1536656891495602
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "fc64f553-7bd8-40f6-8495-1931599fdb27",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5519941360586836,
      "MetricsIntensity" : 0.05331344975985295,
      "Density" : 1.001676602086438
    },
    "euclideanDistance" : 25.0461207673201,
    "generation" : 24,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6154696132596684,
      "LackOfCohesion" : 0.5519941360586836,
      "MetricsIntensity" : 0.05331344975985295,
      "Density" : 3.1536656891495602
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6c3874da-a109-4b9b-9077-06ea66b85db8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5520135817421394,
      "MetricsIntensity" : 0.053277312285143465,
      "Density" : 1.0020491803278688
    },
    "euclideanDistance" : 25.046176895541592,
    "generation" : 28,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6162341247929324,
      "LackOfCohesion" : 0.5520135817421394,
      "MetricsIntensity" : 0.053277312285143465,
      "Density" : 3.1529894490035186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4f4dca78-959a-4a96-8c73-4db57357a816",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5516943428598263,
      "MetricsIntensity" : 0.05341585005874023,
      "Density" : 0.9890089418777943
    },
    "euclideanDistance" : 26.043807355537684,
    "generation" : 11,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6150442477876106,
      "LackOfCohesion" : 0.5516943428598263,
      "MetricsIntensity" : 0.05341585005874023,
      "Density" : 3.1174398120963005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "9de06687-32d7-4353-a05f-2fcb12ca128c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5505309071908375,
      "MetricsIntensity" : 0.05329817629918965,
      "Density" : 0.9947839046199702
    },
    "euclideanDistance" : 26.04412031858654,
    "generation" : 23,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6173384870237433,
      "LackOfCohesion" : 0.5505309071908375,
      "MetricsIntensity" : 0.05329817629918965,
      "Density" : 3.1301289566236816
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f64a530c-516a-4cb0-b037-e3705bbe9689",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5503638596165427,
      "MetricsIntensity" : 0.0533240502191495,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 26.044328538949674,
    "generation" : 8,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6184428492545548,
      "LackOfCohesion" : 0.5503638596165427,
      "MetricsIntensity" : 0.0533240502191495,
      "Density" : 3.145369284876904
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "04b8e7d8-a150-4768-8a03-41c3130aae94",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5503638596165428,
      "MetricsIntensity" : 0.053324050219149474,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 26.044328538949674,
    "generation" : 23,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6184428492545553,
      "LackOfCohesion" : 0.5503638596165428,
      "MetricsIntensity" : 0.053324050219149474,
      "Density" : 3.145369284876905
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "2d75efde-2f24-40d3-800f-6a6d2c03c84e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.55070488789423,
      "MetricsIntensity" : 0.05329193448622516,
      "Density" : 1.0024217585692996
    },
    "euclideanDistance" : 26.04440372298596,
    "generation" : 14,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6167863059083378,
      "LackOfCohesion" : 0.55070488789423,
      "MetricsIntensity" : 0.05329193448622517,
      "Density" : 3.1541617819460726
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef75bd0b-b2bb-4881-b1e8-c68eaebbdcc2",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5511223733080366,
      "MetricsIntensity" : 0.053359941756618366,
      "Density" : 0.9938524590163934
    },
    "euclideanDistance" : 27.042391045903482,
    "generation" : 22,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6158098396904372,
      "LackOfCohesion" : 0.5511223733080366,
      "MetricsIntensity" : 0.053359941756618366,
      "Density" : 3.130868544600939
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "dfa84149-8cb5-41d8-bd5d-c7ebd31eb0e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5523816706569935,
      "MetricsIntensity" : 0.0533608996888608,
      "Density" : 0.9932935916542474
    },
    "euclideanDistance" : 27.042396207999722,
    "generation" : 14,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6158098396904368,
      "LackOfCohesion" : 0.5523816706569935,
      "MetricsIntensity" : 0.0533608996888608,
      "Density" : 3.1291079812206575
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "b90b23d2-33b7-45e6-aee8-2fc0ad2f67c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5509551070850843,
      "MetricsIntensity" : 0.053385849542965616,
      "Density" : 0.9986959761549925
    },
    "euclideanDistance" : 27.042591353293048,
    "generation" : 24,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616915422885572,
      "LackOfCohesion" : 0.5509551070850843,
      "MetricsIntensity" : 0.053385849542965616,
      "Density" : 3.1461267605633805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d86ae649-42fc-4690-aa0e-a41a33850dd8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5506518673729958,
      "MetricsIntensity" : 0.053354929671991555,
      "Density" : 0.9990685543964233
    },
    "euclideanDistance" : 27.042624119350528,
    "generation" : 23,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6171270718232043,
      "LackOfCohesion" : 0.5506518673729958,
      "MetricsIntensity" : 0.053354929671991555,
      "Density" : 3.1454545454545446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8aa35e19-22f6-4657-9fe4-fe7a5d0e84c9",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5522322897877174,
      "MetricsIntensity" : 0.05335994175661839,
      "Density" : 1.0009314456035767
    },
    "euclideanDistance" : 27.042649571349287,
    "generation" : 20,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953016,
      "LackOfCohesion" : 0.5522322897877174,
      "MetricsIntensity" : 0.05335994175661838,
      "Density" : 3.1531690140845074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "c0b93b97-7662-4704-bc90-a34cb0118f89",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.550825961863637,
      "MetricsIntensity" : 0.05334868377674261,
      "Density" : 1.0027943368107302
    },
    "euclideanDistance" : 27.042752932174192,
    "generation" : 27,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6165745856353593,
      "LackOfCohesion" : 0.550825961863637,
      "MetricsIntensity" : 0.0533486837767426,
      "Density" : 3.1571847507331383
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7f796ca8-3cb1-4dee-9dc1-b69ebe866665",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5507679481778196,
      "MetricsIntensity" : 0.053344627899972484,
      "Density" : 0.9901266766020864
    },
    "euclideanDistance" : 28.04077702497093,
    "generation" : 22,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616574585635359,
      "LackOfCohesion" : 0.5507679481778196,
      "MetricsIntensity" : 0.0533446278999725,
      "Density" : 3.1173020527859236
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "c59f35d5-d34a-44db-b281-3d3c3f652aae",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5506007913506965,
      "MetricsIntensity" : 0.05337051874205134,
      "Density" : 0.9949701937406855
    },
    "euclideanDistance" : 28.04096958612771,
    "generation" : 21,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6176795580110501,
      "LackOfCohesion" : 0.5506007913506965,
      "MetricsIntensity" : 0.05337051874205134,
      "Density" : 3.1325513196480936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "05df9b19-4034-4708-b86a-1e22756560dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5513601120999243,
      "MetricsIntensity" : 0.053406494646634335,
      "Density" : 0.9891952309985097
    },
    "euclideanDistance" : 29.039282023083473,
    "generation" : 23,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6150442477876104,
      "LackOfCohesion" : 0.5513601120999243,
      "MetricsIntensity" : 0.053406494646634335,
      "Density" : 3.118027011156782
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "e5765fff-2a1f-4925-9099-72b3e4689744",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5511927363378608,
      "MetricsIntensity" : 0.05343241939944283,
      "Density" : 0.9940387481371088
    },
    "euclideanDistance" : 29.039467752135483,
    "generation" : 23,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616150442477876,
      "LackOfCohesion" : 0.5511927363378608,
      "MetricsIntensity" : 0.05343241939944283,
      "Density" : 3.1332941867293007
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "16289857-313d-46a1-bd25-4c8d45fd74f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5508891426539365,
      "MetricsIntensity" : 0.05340144881529637,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 29.03949817187113,
    "generation" : 19,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6163626312880044,
      "LackOfCohesion" : 0.5508891426539365,
      "MetricsIntensity" : 0.053401448815296376,
      "Density" : 3.13262910798122
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "7cd97651-d4f4-483f-b8d2-9eaacb1a89f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5515344346121643,
      "MetricsIntensity" : 0.053400240570775984,
      "Density" : 1.0007451564828613
    },
    "euclideanDistance" : 29.039669326518876,
    "generation" : 28,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6144911504424777,
      "LackOfCohesion" : 0.5515344346121643,
      "MetricsIntensity" : 0.05340024057077599,
      "Density" : 3.154433352906635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "e5618c19-2028-458c-a27f-d378668ef833",
    "objectives" : {
      "NumberOfConcerns" : 0.9965846994535519,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5516801626563704,
      "MetricsIntensity" : 0.053456211918190326,
      "Density" : 0.988822652757079
    },
    "euclideanDistance" : 31.03672276304719,
    "generation" : 20,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6148312119535135,
      "LackOfCohesion" : 0.5516801626563704,
      "MetricsIntensity" : 0.053456211918190326,
      "Density" : 3.1186839012925964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "d860a427-379d-4eb8-b510-54c4cffa932a",
    "objectives" : {
      "NumberOfConcerns" : 0.9962431693989071,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5518545994035466,
      "MetricsIntensity" : 0.05344995374398604,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 31.037085013646326,
    "generation" : 9,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6142778085224125,
      "LackOfCohesion" : 0.5518545994035466,
      "MetricsIntensity" : 0.05344995374398605,
      "Density" : 3.155111633372503
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "3a887272-d428-48fe-902b-61362bbdc864",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5505229315606065,
      "MetricsIntensity" : 0.053358026951553394,
      "Density" : 1.003166915052161
    },
    "euclideanDistance" : 31.037272213206325,
    "generation" : 18,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61767955801105,
      "LackOfCohesion" : 0.5505229315606065,
      "MetricsIntensity" : 0.053358026951553394,
      "Density" : 3.1583577712609974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0bfd95b8-63d1-4343-a962-3211b5bd99ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.551282150332375,
      "MetricsIntensity" : 0.05339398649491765,
      "Density" : 1.0013040238450075
    },
    "euclideanDistance" : 32.035978456408984,
    "generation" : 22,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6150442477876104,
      "LackOfCohesion" : 0.551282150332375,
      "MetricsIntensity" : 0.05339398649491765,
      "Density" : 3.15619495008808
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc11faba-b312-4863-bde4-e92e35c10b4d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5509784981314387,
      "MetricsIntensity" : 0.05336304106319562,
      "Density" : 1.001676602086438
    },
    "euclideanDistance" : 32.03600609896943,
    "generation" : 21,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6152570480928696,
      "LackOfCohesion" : 0.5509784981314387,
      "MetricsIntensity" : 0.05336304106319563,
      "Density" : 3.155516431924883
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d7e857f4-c6f9-4d89-9cb4-2655dc1cc1de",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5508112319084866,
      "MetricsIntensity" : 0.053388948849542865,
      "Density" : 1.002608047690015
    },
    "euclideanDistance" : 32.03605368824624,
    "generation" : 21,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6163626312880044,
      "LackOfCohesion" : 0.5508112319084866,
      "MetricsIntensity" : 0.05338894884954287,
      "Density" : 3.158450704225352
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication), org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)]"
      } ]
    } ]
  }, {
    "solutionId" : "3ac32e34-ff03-4e68-971c-aae79da28051",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5509273886824235,
      "MetricsIntensity" : 0.053378640335526376,
      "Density" : 1.0014903129657229
    },
    "euclideanDistance" : 33.03492002002323,
    "generation" : 12,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6158098396904368,
      "LackOfCohesion" : 0.5509273886824235,
      "MetricsIntensity" : 0.05337864033552638,
      "Density" : 3.1549295774647876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "83b08e15-3dbb-438d-9bcc-deffe8e93c9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5507601224594711,
      "MetricsIntensity" : 0.05340454812187362,
      "Density" : 1.0024217585692996
    },
    "euclideanDistance" : 33.034966172371995,
    "generation" : 13,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616915422885572,
      "LackOfCohesion" : 0.5507601224594711,
      "MetricsIntensity" : 0.05340454812187362,
      "Density" : 3.157863849765259
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "f7e351e6-db08-4a7e-bb98-bdfbb6848905",
    "objectives" : {
      "NumberOfConcerns" : 0.9962431693989071,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5515201496195554,
      "MetricsIntensity" : 0.0534405922012038,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 34.0338162548951,
    "generation" : 29,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6142778085224128,
      "LackOfCohesion" : 0.5515201496195554,
      "MetricsIntensity" : 0.0534405922012038,
      "Density" : 3.155699177438308
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "6c9d726d-264e-41a1-9bb5-a8ffe2434df9",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5512161427025168,
      "MetricsIntensity" : 0.053409595982881884,
      "Density" : 1.0009314456035767
    },
    "euclideanDistance" : 34.03384223808411,
    "generation" : 27,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5512161427025168,
      "MetricsIntensity" : 0.05340959598288189,
      "Density" : 3.1550205519671173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "f3512454-47bf-42db-b14d-7bde8d2598f0",
    "objectives" : {
      "NumberOfConcerns" : 0.9965846994535519,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5528630976040501,
      "MetricsIntensity" : 0.053444654757505546,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 34.03384257315499,
    "generation" : 23,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6148312119535138,
      "LackOfCohesion" : 0.5528630976040501,
      "MetricsIntensity" : 0.053444654757505546,
      "Density" : 3.155111633372503
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "3c9aa4bd-0ccd-4306-8fad-2021afe31cf6",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5510487669404533,
      "MetricsIntensity" : 0.053435520735690356,
      "Density" : 1.0018628912071534
    },
    "euclideanDistance" : 34.03388698996827,
    "generation" : 23,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6155973451327434,
      "LackOfCohesion" : 0.5510487669404533,
      "MetricsIntensity" : 0.053435520735690356,
      "Density" : 3.1579565472695243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "5ff3085d-d51e-46ef-b9d7-5ae538f13884",
    "objectives" : {
      "NumberOfConcerns" : 0.9955601092896175,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5518405149878546,
      "MetricsIntensity" : 0.05349036443330151,
      "Density" : 1.0001862891207154
    },
    "euclideanDistance" : 36.03191504371122,
    "generation" : 20,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6140642303433,
      "LackOfCohesion" : 0.5518405149878546,
      "MetricsIntensity" : 0.053490364433301504,
      "Density" : 3.1563786008230443
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "8d918a66-6cd1-41c2-80af-aeb2b87f09ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9955601092896175,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5518405149878548,
      "MetricsIntensity" : 0.05349036443330146,
      "Density" : 1.0001862891207154
    },
    "euclideanDistance" : 36.03191504371122,
    "generation" : 7,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6140642303433002,
      "LackOfCohesion" : 0.5518405149878548,
      "MetricsIntensity" : 0.05349036443330147,
      "Density" : 3.156378600823045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "a8b1e06b-d65a-490c-a561-1f1b5e208aac",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5527765140368358,
      "MetricsIntensity" : 0.05340230465425425,
      "Density" : 0.9936661698956781
    },
    "euclideanDistance" : 40.02862738631615,
    "generation" : 9,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953014,
      "LackOfCohesion" : 0.5527765140368358,
      "MetricsIntensity" : 0.05340230465425425,
      "Density" : 3.1302816901408455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "34de21df-6fa5-41ae-b241-5e1f19cbaf05",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5520790152622319,
      "MetricsIntensity" : 0.05344263121097744,
      "Density" : 0.9895678092399404
    },
    "euclideanDistance" : 42.02714305910038,
    "generation" : 22,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5520790152622319,
      "MetricsIntensity" : 0.05344263121097745,
      "Density" : 3.1192014092777454
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "660dc581-dff7-40fe-aeff-6496718928d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5520790152622318,
      "MetricsIntensity" : 0.053442631210977476,
      "Density" : 0.9895678092399404
    },
    "euclideanDistance" : 42.02714305910038,
    "generation" : 23,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6144911504424777,
      "LackOfCohesion" : 0.5520790152622318,
      "MetricsIntensity" : 0.053442631210977476,
      "Density" : 3.1192014092777445
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "6b746bdb-7e73-4795-886a-35f201d7fddc",
    "objectives" : {
      "NumberOfConcerns" : 0.9962431693989071,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5523995369216675,
      "MetricsIntensity" : 0.05349237216311297,
      "Density" : 0.9891952309985097
    },
    "euclideanDistance" : 44.02589027310947,
    "generation" : 9,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6142778085224125,
      "LackOfCohesion" : 0.5523995369216675,
      "MetricsIntensity" : 0.053492372163112964,
      "Density" : 3.119858989424206
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "65950e2a-d5a0-432d-accc-c6ce1b929bcd",
    "objectives" : {
      "NumberOfConcerns" : 0.9962431693989071,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.552399536921668,
      "MetricsIntensity" : 0.053492372163112964,
      "Density" : 0.9891952309985097
    },
    "euclideanDistance" : 44.02589027310947,
    "generation" : 10,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6142778085224128,
      "LackOfCohesion" : 0.552399536921668,
      "MetricsIntensity" : 0.05349237216311296,
      "Density" : 3.119858989424207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "cd080b27-90d8-4eb9-b3d1-631f1f5e9712",
    "objectives" : {
      "NumberOfConcerns" : 0.9965846994535519,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5529373743229485,
      "MetricsIntensity" : 0.053436377135119124,
      "Density" : 1.001117734724292
    },
    "euclideanDistance" : 45.025592866371994,
    "generation" : 19,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613938053097345,
      "LackOfCohesion" : 0.5529373743229485,
      "MetricsIntensity" : 0.05343637713511913,
      "Density" : 3.155607751027598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "62b96abe-a3f0-4f52-9ad3-6312c03036e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5517607233525844,
      "MetricsIntensity" : 0.053451986623083356,
      "Density" : 0.9897540983606558
    },
    "euclideanDistance" : 47.02425727316713,
    "generation" : 23,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5517607233525844,
      "MetricsIntensity" : 0.053451986623083356,
      "Density" : 3.1197886083382276
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "490eee7c-38ad-4231-9cfa-8c10aa0fc497",
    "objectives" : {
      "NumberOfConcerns" : 0.9959016393442623,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5522395238848524,
      "MetricsIntensity" : 0.05347675244612644,
      "Density" : 1.0009314456035767
    },
    "euclideanDistance" : 47.02447779708818,
    "generation" : 21,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613724405091312,
      "LackOfCohesion" : 0.5522395238848524,
      "MetricsIntensity" : 0.05347675244612644,
      "Density" : 3.1568742655699173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "006c56f1-72b5-4015-87c6-96134df71d85",
    "objectives" : {
      "NumberOfConcerns" : 0.9955601092896175,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5523858098420534,
      "MetricsIntensity" : 0.0535328106677852,
      "Density" : 0.9890089418777943
    },
    "euclideanDistance" : 49.02323198712072,
    "generation" : 12,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6140642303433002,
      "LackOfCohesion" : 0.5523858098420534,
      "MetricsIntensity" : 0.05353281066778521,
      "Density" : 3.121105232216343
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "5e604e4e-8ed5-42ab-9cae-7b993d584b8d",
    "objectives" : {
      "NumberOfConcerns" : 0.9955601092896175,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5523858098420539,
      "MetricsIntensity" : 0.053532810667785195,
      "Density" : 0.9890089418777943
    },
    "euclideanDistance" : 49.02323198712072,
    "generation" : 22,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6140642303433004,
      "LackOfCohesion" : 0.5523858098420539,
      "MetricsIntensity" : 0.05353281066778519,
      "Density" : 3.1211052322163444
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "3e970a0f-7873-4476-8bdc-4d37e1319bfa",
    "objectives" : {
      "NumberOfConcerns" : 0.9952185792349727,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5525603609739818,
      "MetricsIntensity" : 0.05352654838986013,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 49.02346138443728,
    "generation" : 11,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613510520487265,
      "LackOfCohesion" : 0.5525603609739818,
      "MetricsIntensity" : 0.05352654838986013,
      "Density" : 3.1575543797766015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "50eb5be9-e22c-4c29-b3e8-e28c19e5a1e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9952185792349727,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5522256918786569,
      "MetricsIntensity" : 0.05351718070836132,
      "Density" : 1.0007451564828613
    },
    "euclideanDistance" : 52.02210845584865,
    "generation" : 10,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613510520487264,
      "LackOfCohesion" : 0.5522256918786569,
      "MetricsIntensity" : 0.05351718070836132,
      "Density" : 3.1581422692533794
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "1b4c0182-a4e7-4e1f-9378-32ae642148ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9952185792349727,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.552225691878657,
      "MetricsIntensity" : 0.05351718070836131,
      "Density" : 1.0007451564828613
    },
    "euclideanDistance" : 52.02210845584865,
    "generation" : 18,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613510520487265,
      "LackOfCohesion" : 0.552225691878657,
      "MetricsIntensity" : 0.053517180708361305,
      "Density" : 3.15814226925338
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "1ed048fe-0e4a-4002-b841-efcea94290b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9959016393442623,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5519210233959723,
      "MetricsIntensity" : 0.05348611398890868,
      "Density" : 1.001117734724292
    },
    "euclideanDistance" : 52.02212543115173,
    "generation" : 17,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6137244050913118,
      "LackOfCohesion" : 0.5519210233959723,
      "MetricsIntensity" : 0.053486113988908686,
      "Density" : 3.157461809635723
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "82d810f3-2655-42c4-918e-a583663bc8d3",
    "objectives" : {
      "NumberOfConcerns" : 0.994535519125683,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5525467304146909,
      "MetricsIntensity" : 0.05356703585432989,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 54.02127380496245,
    "generation" : 16,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6132963988919662,
      "LackOfCohesion" : 0.5525467304146909,
      "MetricsIntensity" : 0.0535670358543299,
      "Density" : 3.158823529411765
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "97435a09-ae65-4677-97f8-cb880119d238",
    "objectives" : {
      "NumberOfConcerns" : 0.994535519125683,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5525467304146907,
      "MetricsIntensity" : 0.05356703585432991,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 54.02127380496245,
    "generation" : 17,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6132963988919666,
      "LackOfCohesion" : 0.5525467304146907,
      "MetricsIntensity" : 0.05356703585432991,
      "Density" : 3.1588235294117646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  }, {
    "solutionId" : "c8f0a787-c96d-47f2-8545-a571b6d59c36",
    "objectives" : {
      "NumberOfConcerns" : 0.994535519125683,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5525467304146909,
      "MetricsIntensity" : 0.05356703585432989,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 54.02127380496245,
    "generation" : 20,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6132963988919666,
      "LackOfCohesion" : 0.5525467304146909,
      "MetricsIntensity" : 0.0535670358543299,
      "Density" : 3.158823529411764
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='lock.GlobalLockPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.intercept.RunAsUserToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.session.HttpSessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyControlExtractor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.SessionFixationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.http.FormLoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ContentTypeOptionsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.jaas.JaasAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.acls.domain.ConsoleAuditLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientId'"
      } ]
    } ]
  } ]
}