{
  "executionId" : "76e8639e-3acf-48c7-bf82-f34c71bbdbe3",
  "computingTime" : 11040,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2248831775700944,
    "meanNumConcerns" : 1.654293628808864,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "3baeb0ae-f65c-49eb-af4b-c038a1fd4432",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 2.0,
      "LackOfCohesion" : 0.5516080848358441,
      "MetricsIntensity" : 0.053529214798784495,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 2.510702169064037,
    "generation" : 0,
    "numberOfRefactorings" : 2,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.653185595567867,
      "LackOfCohesion" : 0.5516080848358441,
      "MetricsIntensity" : 0.05352921479878449,
      "Density" : 3.221378504672897,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b886b837-2f9f-40e5-95b7-e03b74da34ab",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.5539295778268484,
      "MetricsIntensity" : 0.053458038641696355,
      "Density" : 1.0
    },
    "euclideanDistance" : 3.363387682535506,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.653761061946903,
      "LackOfCohesion" : 0.5539295778268484,
      "MetricsIntensity" : 0.053458038641696355,
      "Density" : 3.219241982507288,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "f9a6697b-473e-4000-aeda-5b87c52d3039",
    "objectives" : {
      "NumberOfConcerns" : 1.0020093770931011,
      "NumberOfRefactorings" : 7.0,
      "LackOfCohesion" : 0.5527751068371305,
      "MetricsIntensity" : 0.053285348272487765,
      "Density" : 0.9996377467850027
    },
    "euclideanDistance" : 7.163218415185957,
    "generation" : 0,
    "numberOfRefactorings" : 7,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6512141280353199,
      "LackOfCohesion" : 0.5527751068371305,
      "MetricsIntensity" : 0.053285348272487765,
      "Density" : 3.2105875509016877,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6b2baa0f-9db6-4a88-b83e-2198baf7547b",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545860495541097,
      "MetricsIntensity" : 0.05333526818756595,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 10.114814484194568,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.651021535063501,
      "LackOfCohesion" : 0.5545860495541097,
      "MetricsIntensity" : 0.05333526818756594,
      "Density" : 3.2077997671711294,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "dcdcee41-531a-4331-87ef-f789ae00701c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5535628497154231,
      "MetricsIntensity" : 0.05336886241175939,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 14.082032965623286,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444997,
      "LackOfCohesion" : 0.5535628497154231,
      "MetricsIntensity" : 0.05336886241175939,
      "Density" : 3.211538461538463,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "5f7ad825-34d3-4d8e-b817-75bf5041dbf7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5539114271477711,
      "MetricsIntensity" : 0.05339817128450678,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 15.076706587207994,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6502762430939222,
      "LackOfCohesion" : 0.5539114271477711,
      "MetricsIntensity" : 0.05339817128450678,
      "Density" : 3.210250436808386,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "765d8742-6f24-4e5e-8dcf-a055783dd376",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5539114271477711,
      "MetricsIntensity" : 0.05339817128450678,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 15.076706587207994,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6502762430939226,
      "LackOfCohesion" : 0.5539114271477711,
      "MetricsIntensity" : 0.053398171284506774,
      "Density" : 3.2102504368083866,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2a72a0bd-8fc3-4ad9-8cab-6e7c758a6705",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5526259349960843,
      "MetricsIntensity" : 0.05332285702722273,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 16.071739295008914,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5526259349960843,
      "MetricsIntensity" : 0.05332285702722273,
      "Density" : 3.206755969714618,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "82e0d234-d4f1-49a7-a214-591b11e59dc1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5534279628466234,
      "MetricsIntensity" : 0.05335316693749926,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 16.07180700005469,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060774,
      "LackOfCohesion" : 0.5534279628466234,
      "MetricsIntensity" : 0.053353166937499266,
      "Density" : 3.20559114735003,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "4ffe8482-1f84-4d5b-bc13-1eff9633ff4c",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5534347371773073,
      "MetricsIntensity" : 0.053336978273309646,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 17.067772770804304,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515737161789068,
      "LackOfCohesion" : 0.5534347371773073,
      "MetricsIntensity" : 0.05333697827330965,
      "Density" : 3.2077997671711294,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "04ec06ca-de63-4306-9004-269e30891e2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5535360951689503,
      "MetricsIntensity" : 0.05344800897217645,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 19.06050130549453,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955758,
      "LackOfCohesion" : 0.5535360951689503,
      "MetricsIntensity" : 0.05344800897217645,
      "Density" : 3.2151603498542274,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "08c46272-8414-4f09-b948-ba94909b3bb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5543391734816384,
      "MetricsIntensity" : 0.053478391269463355,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 19.060558382909846,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6498893805309736,
      "LackOfCohesion" : 0.5543391734816384,
      "MetricsIntensity" : 0.053478391269463355,
      "Density" : 3.2139941690962095,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "540966e3-7871-4901-9f98-6d752fffe7b1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5536701524086299,
      "MetricsIntensity" : 0.053339782737879156,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 19.06057226198506,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060776,
      "LackOfCohesion" : 0.5536701524086299,
      "MetricsIntensity" : 0.053339782737879156,
      "Density" : 3.209085614443797,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "206e82a5-1b25-44e3-be30-a023d9f55772",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5522063978190658,
      "MetricsIntensity" : 0.053393060680723345,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 21.054667182126188,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648783185840708,
      "LackOfCohesion" : 0.5522063978190658,
      "MetricsIntensity" : 0.053393060680723345,
      "Density" : 3.2104956268221567,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "74788d21-b489-4521-9869-962935b54375",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5542800018785252,
      "MetricsIntensity" : 0.05347103747142162,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 26.0443322712232,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6500829187396353,
      "LackOfCohesion" : 0.5542800018785252,
      "MetricsIntensity" : 0.05347103747142162,
      "Density" : 3.2138694638694636,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "b036e019-93ff-45fd-b457-c827176b4e0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5523457186062762,
      "MetricsIntensity" : 0.05337954541141021,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 27.042575977139585,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469323,
      "LackOfCohesion" : 0.5523457186062762,
      "MetricsIntensity" : 0.05337954541141022,
      "Density" : 3.2103729603729603,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6be4ec4-3ab9-49ba-ab69-580506f955b1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5531796959647377,
      "MetricsIntensity" : 0.05342682458172604,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 33.03492588211215,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650635710337203,
      "LackOfCohesion" : 0.5531796959647377,
      "MetricsIntensity" : 0.05342682458172603,
      "Density" : 3.2114152591729765,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "ee6d617d-80ab-4356-9c10-ce76ec51dc88",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5536248146944968,
      "MetricsIntensity" : 0.0534017454411574,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 33.034948913962886,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6502762430939222,
      "LackOfCohesion" : 0.5536248146944968,
      "MetricsIntensity" : 0.0534017454411574,
      "Density" : 3.210128055878929,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "6094e60f-756b-41e2-9cdf-a15f67646f57",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5527070708103105,
      "MetricsIntensity" : 0.05347584126584557,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 34.03376647698822,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.647482014388489,
      "LackOfCohesion" : 0.5527070708103105,
      "MetricsIntensity" : 0.053475841265845564,
      "Density" : 3.212952158693116,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "4c993baf-dc83-44ae-95d4-4afd9126b8a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5530617707722869,
      "MetricsIntensity" : 0.05345553099766087,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 34.03380165342429,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955758,
      "LackOfCohesion" : 0.5530617707722869,
      "MetricsIntensity" : 0.05345553099766088,
      "Density" : 3.209207459207459,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a877553f-891e-48bf-89a2-b5c2b7fa1241",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5530887184267225,
      "MetricsIntensity" : 0.05343855265717238,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 34.03380657867616,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6487831858407085,
      "LackOfCohesion" : 0.5530887184267225,
      "MetricsIntensity" : 0.05343855265717238,
      "Density" : 3.2086247086247086,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "16ec1df6-db37-45e3-946e-aa887cec5ea1",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5531694716210149,
      "MetricsIntensity" : 0.053426375572301725,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 39.02949418142082,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444999,
      "LackOfCohesion" : 0.5531694716210149,
      "MetricsIntensity" : 0.053426375572301725,
      "Density" : 3.206755969714618,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd1dbae3-75ff-42f4-9bdd-ffb74495518d",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5563245513464046,
      "MetricsIntensity" : 0.05352651904226663,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 41.027992780791834,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432522123893811,
      "LackOfCohesion" : 0.5563245513464046,
      "MetricsIntensity" : 0.05352651904226663,
      "Density" : 3.2093294460641406,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "5e07b6f8-228f-4347-9501-7ffb700ad6f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5551651320112082,
      "MetricsIntensity" : 0.053482295015443694,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 42.02727335354069,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426991150442474,
      "LackOfCohesion" : 0.5551651320112082,
      "MetricsIntensity" : 0.05348229501544369,
      "Density" : 3.205247813411079,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "6bf5a1ca-3b29-4a25-b43b-b88b790148c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5567922032378564,
      "MetricsIntensity" : 0.05346921792067886,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 43.026683732167534,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688227,
      "LackOfCohesion" : 0.5567922032378564,
      "MetricsIntensity" : 0.05346921792067885,
      "Density" : 3.203379953379953,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "42c67557-96a2-4874-8a64-2858af5cf9a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5553315812479442,
      "MetricsIntensity" : 0.05352270041680508,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 45.02542748881956,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5553315812479442,
      "MetricsIntensity" : 0.05352270041680508,
      "Density" : 3.2047841306884486,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "b2966323-948b-4292-9a21-0b5aa9065d46",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.556108220510822,
      "MetricsIntensity" : 0.053570059380591985,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 45.025447919876065,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707802,
      "LackOfCohesion" : 0.556108220510822,
      "MetricsIntensity" : 0.05357005938059198,
      "Density" : 3.2042007001166857,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "a8cdfbfc-4ade-482e-8a63-5bee22f09df5",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5530242048921891,
      "MetricsIntensity" : 0.0535097897176933,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 45.02551780496722,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.647482014388489,
      "LackOfCohesion" : 0.5530242048921891,
      "MetricsIntensity" : 0.0535097897176933,
      "Density" : 3.210495626822157,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc1c7bd5-1236-40f6-9fc6-4665806f1a71",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5551663752341144,
      "MetricsIntensity" : 0.05354457830799584,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 47.02436712077739,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5551663752341144,
      "MetricsIntensity" : 0.05354457830799583,
      "Density" : 3.20828471411902,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "3fe9fe47-7bd6-4aa2-a5cf-14998b011cb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5575706418393845,
      "MetricsIntensity" : 0.05357874712233856,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 48.02391854989758,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796455,
      "LackOfCohesion" : 0.5575706418393845,
      "MetricsIntensity" : 0.05357874712233856,
      "Density" : 3.205830903790088,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "925c3d4c-7a09-4c45-b360-ed1d62742937",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5569931290104093,
      "MetricsIntensity" : 0.053587509192529414,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 52.02203834633824,
    "generation" : 0,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774763,
      "LackOfCohesion" : 0.5569931290104093,
      "MetricsIntensity" : 0.053587509192529414,
      "Density" : 3.20828471411902,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.authentication.jaas.JaasGrantedAuthority'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "71428fee-380e-40c2-9337-d5f8ad32aa2b",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5564996484734258,
      "MetricsIntensity" : 0.05355014745489308,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 56.02048361210692,
    "generation" : 0,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432522123893802,
      "LackOfCohesion" : 0.5564996484734258,
      "MetricsIntensity" : 0.05355014745489308,
      "Density" : 3.204545454545455,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "aef73109-58aa-446b-a37f-697af7451976",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.5561559328586655,
      "MetricsIntensity" : 0.05362317221265226,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 70.0163684467635,
    "generation" : 0,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6425013835085778,
      "LackOfCohesion" : 0.5561559328586655,
      "MetricsIntensity" : 0.05362317221265226,
      "Density" : 3.205830903790088,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer.AuthenticationRequestEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.oauth2.jwt.ReactiveRemoteJWKSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.XXssConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.saml2.provider.service.authentication.AbstractSaml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.oauth2.jwt.JoseHeader.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.authorization.method.AuthorizationMethodPointcuts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FrameOptionsSpec'"
      } ]
    } ]
  }, {
    "solutionId" : "7ceb1a95-e11e-41b4-bb26-766e3ca6759a",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.5599053301488347,
      "MetricsIntensity" : 0.05374458794989108,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 77.01486837505404,
    "generation" : 0,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404432132963989,
      "LackOfCohesion" : 0.5599053301488347,
      "MetricsIntensity" : 0.05374458794989108,
      "Density" : 3.210987726475745,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2AccessTokenResponseHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.ServerFormLoginAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.gradle.github.milestones.RepositoryRef'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.jackson2.AnonymousAuthenticationTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.authentication.AuthenticationProviderBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.authentication.AuthenticationProviderBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.authentication.AuthenticationProviderBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.authentication.AuthenticationProviderBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.authentication.AuthenticationProviderBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.RequestCacheSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.server.header.ClearSiteDataServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor.PostFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.context.NullSecurityContextRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.authentication.AccountStatusException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.acls.domain.AccessControlEntryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.acls.domain.AccessControlEntryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.authentication.AnonymousAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.authentication.logout.CompositeLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.core.token.KeyBasedPersistenceTokenService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.SAML20AssertionValidators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      } ]
    } ]
  } ]
}