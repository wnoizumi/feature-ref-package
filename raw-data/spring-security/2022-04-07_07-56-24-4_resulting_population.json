{
  "executionId" : "7dca6cbe-ba34-4a0a-91dc-8635750fcc13",
  "computingTime" : 3379586,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.209705372616985,
    "meanNumConcerns" : 1.6709141274238222,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "c3a97c0f-5c31-4074-864e-d97f0bc21602",
    "objectives" : {
      "NumberOfConcerns" : 1.0009946949602122,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528392938357609,
      "MetricsIntensity" : 0.05340403019482413,
      "Density" : 0.9976601871850252
    },
    "euclideanDistance" : 8.14283731285861,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6698008849557522,
      "LackOfCohesion" : 0.5528392938357609,
      "MetricsIntensity" : 0.05340403019482413,
      "Density" : 3.198499711482976
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "766e6119-206c-4060-a3b8-8e4b9c96524c",
    "objectives" : {
      "NumberOfConcerns" : 1.0009946949602122,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528392938357607,
      "MetricsIntensity" : 0.05340403019482414,
      "Density" : 0.9976601871850252
    },
    "euclideanDistance" : 8.14283731285861,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6698008849557524,
      "LackOfCohesion" : 0.5528392938357607,
      "MetricsIntensity" : 0.05340403019482415,
      "Density" : 3.1984997114829774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "441f050a-2e9a-4786-a099-d9a7b1c6b96f",
    "objectives" : {
      "NumberOfConcerns" : 1.0013262599469497,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528047307854808,
      "MetricsIntensity" : 0.05344330236432363,
      "Density" : 0.9985601151907847
    },
    "euclideanDistance" : 8.142986297388422,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6703539823008844,
      "LackOfCohesion" : 0.5528047307854808,
      "MetricsIntensity" : 0.053443302364323625,
      "Density" : 3.201384881708021
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DefaultReactiveOAuth2AuthorizedClientManager(ReactiveClientRegistrationRepository, ServerOAuth2AuthorizedClientRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "b07d87b1-b88d-44c3-963a-9af9815e9fff",
    "objectives" : {
      "NumberOfConcerns" : 1.0023209549071619,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5518004263237282,
      "MetricsIntensity" : 0.05338956754777025,
      "Density" : 0.9987401007919366
    },
    "euclideanDistance" : 8.143062276686202,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.671088999447209,
      "LackOfCohesion" : 0.5518004263237282,
      "MetricsIntensity" : 0.05338956754777026,
      "Density" : 3.198270893371759
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "4c60663d-5a0f-4be1-89ea-5b8dad9acc47",
    "objectives" : {
      "NumberOfConcerns" : 1.0023209549071619,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5518004263237282,
      "MetricsIntensity" : 0.05338956754777025,
      "Density" : 0.9987401007919366
    },
    "euclideanDistance" : 8.143062276686202,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.671088999447209,
      "LackOfCohesion" : 0.5518004263237282,
      "MetricsIntensity" : 0.05338956754777025,
      "Density" : 3.1982708933717587
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "dc319320-09fc-4979-9d6a-5cee32ca4df0",
    "objectives" : {
      "NumberOfConcerns" : 1.0023209549071619,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5517186200410056,
      "MetricsIntensity" : 0.05337756415599875,
      "Density" : 0.9991000719942404
    },
    "euclideanDistance" : 8.143100812992559,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6710889994472087,
      "LackOfCohesion" : 0.5517186200410056,
      "MetricsIntensity" : 0.053377564155998744,
      "Density" : 3.1994236311239184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "0f34fd5d-401c-4856-8462-86dc994d3d54",
    "objectives" : {
      "NumberOfConcerns" : 1.0003315649867375,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5529357065549634,
      "MetricsIntensity" : 0.05341028427068246,
      "Density" : 0.9967602591792657
    },
    "euclideanDistance" : 9.127035926752848,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6686946902654867,
      "LackOfCohesion" : 0.5529357065549634,
      "MetricsIntensity" : 0.05341028427068246,
      "Density" : 3.1956145412579344
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "3fef15f8-551c-4b55-b0e3-ea5c9a807fbe",
    "objectives" : {
      "NumberOfConcerns" : 1.0003315649867375,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.55293284795682,
      "MetricsIntensity" : 0.053410284270682444,
      "Density" : 0.9969402447804175
    },
    "euclideanDistance" : 9.12705541148881,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6686946902654871,
      "LackOfCohesion" : 0.55293284795682,
      "MetricsIntensity" : 0.053410284270682444,
      "Density" : 3.196191575302943
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "71484c05-bd80-4874-8c59-97067c080623",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5529219333093628,
      "MetricsIntensity" : 0.05341653834654082,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 9.127130458769118,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106198,
      "LackOfCohesion" : 0.5529219333093628,
      "MetricsIntensity" : 0.053416538346540816,
      "Density" : 3.1973456433929597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    } ]
  }, {
    "solutionId" : "7d56404b-1a90-4f81-a21f-cb06b55372ff",
    "objectives" : {
      "NumberOfConcerns" : 1.0009946949602122,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5531430848566442,
      "MetricsIntensity" : 0.05340403019482414,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 9.127180143007118,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6698008849557522,
      "LackOfCohesion" : 0.5531430848566442,
      "MetricsIntensity" : 0.05340403019482414,
      "Density" : 3.1973456433929606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.openid.RegexBasedAxFetchListFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    } ]
  }, {
    "solutionId" : "b1bce9aa-fb38-407f-ac06-3b8a986f0bac",
    "objectives" : {
      "NumberOfConcerns" : 1.0009946949602122,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5528265600803945,
      "MetricsIntensity" : 0.05340403019482413,
      "Density" : 0.9974802015838733
    },
    "euclideanDistance" : 9.127180634120355,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.669800884955752,
      "LackOfCohesion" : 0.5528265600803945,
      "MetricsIntensity" : 0.05340403019482413,
      "Density" : 3.1979226774379677
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "869293ac-2733-4250-a1ed-1c04ee039ece",
    "objectives" : {
      "NumberOfConcerns" : 1.0009946949602122,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5528868505139657,
      "MetricsIntensity" : 0.05340403019482411,
      "Density" : 0.9976601871850252
    },
    "euclideanDistance" : 9.127203957858335,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6698008849557524,
      "LackOfCohesion" : 0.5528868505139657,
      "MetricsIntensity" : 0.05340403019482411,
      "Density" : 3.198499711482977
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "f1079098-f950-4854-8377-22e1dfef5f8c",
    "objectives" : {
      "NumberOfConcerns" : 1.0019893899204244,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5518141905554242,
      "MetricsIntensity" : 0.053389567547770245,
      "Density" : 0.9982001439884809
    },
    "euclideanDistance" : 9.127307139117923,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.670536207849641,
      "LackOfCohesion" : 0.5518141905554242,
      "MetricsIntensity" : 0.05338956754777024,
      "Density" : 3.1965417867435155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "01427598-f80e-4997-974a-fb9d92f4c049",
    "objectives" : {
      "NumberOfConcerns" : 1.0023209549071619,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5517877009019713,
      "MetricsIntensity" : 0.05338956754777025,
      "Density" : 0.9985601151907847
    },
    "euclideanDistance" : 9.127381317392489,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6710889994472085,
      "LackOfCohesion" : 0.5517877009019713,
      "MetricsIntensity" : 0.05338956754777025,
      "Density" : 3.1976945244956783
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "4c908efc-865d-44e7-927d-ab87416a8fb9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003315649867375,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5529201142014535,
      "MetricsIntensity" : 0.05341028427068246,
      "Density" : 0.9967602591792657
    },
    "euclideanDistance" : 10.114483059718987,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6686946902654867,
      "LackOfCohesion" : 0.5529201142014535,
      "MetricsIntensity" : 0.053410284270682465,
      "Density" : 3.195614541257934
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "ae1a3562-2d11-42c0-8915-d5a004ab7b74",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5529029626125928,
      "MetricsIntensity" : 0.053400499850633235,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 10.114568093593396,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106195,
      "LackOfCohesion" : 0.5529029626125928,
      "MetricsIntensity" : 0.053400499850633235,
      "Density" : 3.19734564339296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "d9c2b883-28bd-4a26-8c4d-cd3fa3f88ff2",
    "objectives" : {
      "NumberOfConcerns" : 1.0013262599469497,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.552817264638879,
      "MetricsIntensity" : 0.05341294011111546,
      "Density" : 0.9974802015838733
    },
    "euclideanDistance" : 10.114646850071695,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6703539823008853,
      "LackOfCohesion" : 0.552817264638879,
      "MetricsIntensity" : 0.05341294011111547,
      "Density" : 3.197922677437969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "14d43b44-4750-4ff3-bf17-3a582c8a5483",
    "objectives" : {
      "NumberOfConcerns" : 1.0019893899204244,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5517624231934476,
      "MetricsIntensity" : 0.053381519624613884,
      "Density" : 0.998020158387329
    },
    "euclideanDistance" : 10.114708020123285,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6705362078496402,
      "LackOfCohesion" : 0.5517624231934476,
      "MetricsIntensity" : 0.053381519624613884,
      "Density" : 3.1959654178674355
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "a7e3597e-256b-432c-ad41-eeff0b077624",
    "objectives" : {
      "NumberOfConcerns" : 1.0019893899204244,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5517799098274263,
      "MetricsIntensity" : 0.05337756415599875,
      "Density" : 0.9985601151907847
    },
    "euclideanDistance" : 10.114762245075626,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6705362078496409,
      "LackOfCohesion" : 0.5517799098274263,
      "MetricsIntensity" : 0.053377564155998744,
      "Density" : 3.197694524495678
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "ce1a013e-81cd-4386-aaaf-28efedb24813",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529975562238856,
      "MetricsIntensity" : 0.053406753926491565,
      "Density" : 0.9971202303815695
    },
    "euclideanDistance" : 11.104243964902746,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106198,
      "LackOfCohesion" : 0.5529975562238856,
      "MetricsIntensity" : 0.053406753926491565,
      "Density" : 3.1967686093479513
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "e67d0156-f4bf-4be4-af07-72fa77f17b11",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529975562238857,
      "MetricsIntensity" : 0.05340675392649156,
      "Density" : 0.9971202303815695
    },
    "euclideanDistance" : 11.104243964902746,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106195,
      "LackOfCohesion" : 0.5529975562238857,
      "MetricsIntensity" : 0.05340675392649156,
      "Density" : 3.1967686093479513
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "b2b82e33-e65e-4c05-992b-142dea9c311b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529505192907977,
      "MetricsIntensity" : 0.05340049985063322,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 11.104257755953602,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106195,
      "LackOfCohesion" : 0.5529505192907977,
      "MetricsIntensity" : 0.05340049985063323,
      "Density" : 3.1973456433929597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "d9ffd108-24fd-479d-a435-3d685871bef1",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529505192907976,
      "MetricsIntensity" : 0.05340049985063323,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 11.104257755953602,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.66924778761062,
      "LackOfCohesion" : 0.5529505192907976,
      "MetricsIntensity" : 0.05340049985063322,
      "Density" : 3.19734564339296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "c9429ef4-19e1-4023-a5d4-998238025dbe",
    "objectives" : {
      "NumberOfConcerns" : 1.001657824933687,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5517571598897548,
      "MetricsIntensity" : 0.053371314173122,
      "Density" : 0.998020158387329
    },
    "euclideanDistance" : 11.104352619376986,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.669983416252073,
      "LackOfCohesion" : 0.5517571598897548,
      "MetricsIntensity" : 0.05337131417312199,
      "Density" : 3.197808535178776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "958ebcc9-1bd5-4005-bd59-e2720bc6d297",
    "objectives" : {
      "NumberOfConcerns" : 1.0019893899204244,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.551745888801913,
      "MetricsIntensity" : 0.05337756415599874,
      "Density" : 0.9983801295896328
    },
    "euclideanDistance" : 11.104414361452726,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6705362078496409,
      "LackOfCohesion" : 0.551745888801913,
      "MetricsIntensity" : 0.05337756415599873,
      "Density" : 3.197118155619596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "07f3fa80-411c-47c7-bc41-f7e8f9b93669",
    "objectives" : {
      "NumberOfConcerns" : 1.0006631299734747,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5529739078210624,
      "MetricsIntensity" : 0.05340675392649157,
      "Density" : 0.9971202303815695
    },
    "euclideanDistance" : 12.095627634712486,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692477876106198,
      "LackOfCohesion" : 0.5529739078210624,
      "MetricsIntensity" : 0.05340675392649157,
      "Density" : 3.1967686093479526
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "3969dbd6-e406-4fa2-842c-f55f23a3221a",
    "objectives" : {
      "NumberOfConcerns" : 1.0013262599469497,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5528882098473489,
      "MetricsIntensity" : 0.05341919418697382,
      "Density" : 0.9973002159827213
    },
    "euclideanDistance" : 12.095693489112328,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6703539823008848,
      "LackOfCohesion" : 0.5528882098473489,
      "MetricsIntensity" : 0.05341919418697382,
      "Density" : 3.1973456433929597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "b5e0eb11-5ea4-4f61-8a72-aebc9229883c",
    "objectives" : {
      "NumberOfConcerns" : 1.001657824933687,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5518233840233874,
      "MetricsIntensity" : 0.05338331756489351,
      "Density" : 0.9976601871850252
    },
    "euclideanDistance" : 12.095701842931405,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.669983416252073,
      "LackOfCohesion" : 0.5518233840233874,
      "MetricsIntensity" : 0.0533833175648935,
      "Density" : 3.1966551326412915
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "11687d5e-397f-4dd4-a1e1-610e2c0b2ab7",
    "objectives" : {
      "NumberOfConcerns" : 1.0019893899204244,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5517222558757934,
      "MetricsIntensity" : 0.05337756415599876,
      "Density" : 0.9983801295896328
    },
    "euclideanDistance" : 12.095784068536295,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6705362078496409,
      "LackOfCohesion" : 0.5517222558757934,
      "MetricsIntensity" : 0.05337756415599876,
      "Density" : 3.197118155619596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.web.server.authentication.HttpBasicServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  }, {
    "solutionId" : "24f8e545-a4af-4154-81d0-8342eb227a5b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996684350132626,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5533466250405381,
      "MetricsIntensity" : 0.05342191791864125,
      "Density" : 0.996040316774658
    },
    "euclideanDistance" : 15.07648764405557,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6675884955752214,
      "LackOfCohesion" : 0.5533466250405381,
      "MetricsIntensity" : 0.05342191791864125,
      "Density" : 3.1933064050779003
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.openid.RegexBasedAxFetchListFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.currentServerWebExchangeMono, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.contextAttributesMapper, org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.DEFAULT_AUTHORIZED_CLIENT_PROVIDER], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizationContext, Authentication, ServerWebExchange), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, OAuth2AuthorizedClient), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.authorizationContext(OAuth2AuthorizeRequest, ClientRegistration), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Mono<Map<String,Object>>>), org.springframework.security.oauth2.client.web.DefaultReactiveOAuth2AuthorizedClientManager.createAttributes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.util.MethodInvocationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionClaimAccessor.getScope()', targetType='org.springframework.security.oauth2.core.ClaimAccessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'"
      } ]
    } ]
  } ]
}