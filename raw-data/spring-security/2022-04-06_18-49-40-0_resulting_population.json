{
  "executionId" : "900964a0-95cb-49d4-a63a-4d6fdc9a25a2",
  "computingTime" : 3770249,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 38,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.189888300999411,
    "meanNumConcerns" : 1.6376731301939056,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.5516677364702991
  },
  "population" : [ {
    "solutionId" : "cd24b0e2-72db-403a-9043-5f3239f10195",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514310362634561,
      "MetricsIntensity" : 0.053394175297207705,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.095390336553685,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123892,
      "LackOfCohesion" : 0.5514310362634561,
      "MetricsIntensity" : 0.05339417529720772,
      "Density" : 3.170774647887324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "88b232b1-e618-4956-8ad4-118b7d5b9dd2",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514310362634561,
      "MetricsIntensity" : 0.053394175297207705,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.095390336553685,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5514310362634561,
      "MetricsIntensity" : 0.053394175297207705,
      "Density" : 3.170774647887323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "02cc3835-de1b-4b34-b436-52ce7e1a34af",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5513231891516798,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 12.095428567701212,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5513231891516798,
      "MetricsIntensity" : 0.05339417529720771,
      "Density" : 3.171361502347419
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4485bd55-738a-4717-888e-12731619f4b8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5514128451843614,
      "MetricsIntensity" : 0.0533941752972077,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088103274794097,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123892,
      "LackOfCohesion" : 0.5514128451843614,
      "MetricsIntensity" : 0.0533941752972077,
      "Density" : 3.1707746478873218
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "941c6270-b68e-42f5-90f5-7953f99e8a44",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5522678259018176,
      "MetricsIntensity" : 0.053394175297207684,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088139323730015,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123896,
      "LackOfCohesion" : 0.5522678259018176,
      "MetricsIntensity" : 0.053394175297207684,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "abcf2d0c-d7d6-4f3d-b919-2fdc0f261152",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521008577829831,
      "MetricsIntensity" : 0.05339417529720769,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 13.0881721540722,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575225,
      "LackOfCohesion" : 0.5521008577829831,
      "MetricsIntensity" : 0.0533941752972077,
      "Density" : 3.171361502347419
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "1a7346e3-f803-4276-ad33-a1e6cec41276",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.552100857782983,
      "MetricsIntensity" : 0.0533941413515905,
      "Density" : 0.9961297456690011
    },
    "euclideanDistance" : 13.088186179380697,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635508849557522,
      "LackOfCohesion" : 0.552100857782983,
      "MetricsIntensity" : 0.0533941413515905,
      "Density" : 3.1719483568075115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5e71e61c-6d5a-4cbc-9c57-64ddf21122ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5513868579285116,
      "MetricsIntensity" : 0.05338792122134938,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 14.081808023514563,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5513868579285116,
      "MetricsIntensity" : 0.05338792122134938,
      "Density" : 3.170874926600118
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "85c2c010-bac6-4260-963e-179c0342458e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5512803101795277,
      "MetricsIntensity" : 0.05338788727573215,
      "Density" : 0.9953925543678585
    },
    "euclideanDistance" : 14.081816877952589,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5512803101795277,
      "MetricsIntensity" : 0.053387887275732154,
      "Density" : 3.169600938967136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "08f257e0-0072-4d84-a148-e2c94bd8d831",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5513634693982469,
      "MetricsIntensity" : 0.05338788727573217,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 15.076347307778933,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5513634693982469,
      "MetricsIntensity" : 0.05338788727573216,
      "Density" : 3.170287727539635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "91490f22-7653-4faa-9a7c-925c6dc6eab4",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5513634693982469,
      "MetricsIntensity" : 0.05338293541840871,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 15.07644083945202,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5513634693982469,
      "MetricsIntensity" : 0.0533829354184087,
      "Density" : 3.1726365237815615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5c055890-a037-4a1f-92b4-e9c061907799",
    "objectives" : {
      "NumberOfConcerns" : 1.0006765899864682,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.551249125472508,
      "MetricsIntensity" : 0.05337848046026302,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 15.076471265960679,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636061946902655,
      "LackOfCohesion" : 0.551249125472508,
      "MetricsIntensity" : 0.053378480460263035,
      "Density" : 3.1713615023474184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b3932a31-526a-4167-9c5b-993cf5989520",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.551342679593567,
      "MetricsIntensity" : 0.05337222638440469,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.071652081024943,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123896,
      "LackOfCohesion" : 0.551342679593567,
      "MetricsIntensity" : 0.053372226384404683,
      "Density" : 3.1701877934272296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "23698ae5-43d2-4650-84e6-13356f52b547",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5512231382166584,
      "MetricsIntensity" : 0.05337848046026304,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.071669054063253,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5512231382166584,
      "MetricsIntensity" : 0.05337848046026304,
      "Density" : 3.172049324721081
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "2749b51f-b123-4ec7-b894-39ea87e8fee6",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5513322846912271,
      "MetricsIntensity" : 0.05337848046026302,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.071672797919074,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635508849557522,
      "LackOfCohesion" : 0.5513322846912271,
      "MetricsIntensity" : 0.053378480460263035,
      "Density" : 3.1720493247210806
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "d8c34a36-fea1-49d1-af8e-b9ddff612a87",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5513322846912272,
      "MetricsIntensity" : 0.053378480460263014,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.071672797919074,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5513322846912272,
      "MetricsIntensity" : 0.053378480460263014,
      "Density" : 3.172049324721081
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "56f6e6c3-2f86-4710-8b28-aa9fe70be733",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5512959025330374,
      "MetricsIntensity" : 0.05337848046026299,
      "Density" : 0.9953925543678585
    },
    "euclideanDistance" : 17.067442185975523,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123892,
      "LackOfCohesion" : 0.5512959025330374,
      "MetricsIntensity" : 0.05337848046026299,
      "Density" : 3.171462125660599
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "fa9e1bf8-9456-4a3f-a7b7-1a9f3fc4cb4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5511898745291707,
      "MetricsIntensity" : 0.053375379124015465,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 18.06359726651167,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221244,
      "LackOfCohesion" : 0.5511898745291707,
      "MetricsIntensity" : 0.053375379124015465,
      "Density" : 3.1692126909518215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "767e6806-bdb1-41b1-bec8-633ca007be0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5512187203831638,
      "MetricsIntensity" : 0.05337537912401545,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 18.06363715404118,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672563,
      "LackOfCohesion" : 0.5512187203831638,
      "MetricsIntensity" : 0.05337537912401546,
      "Density" : 3.1703877790834305
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9f5dd9a9-3687-4db3-9b15-1950aa30e6c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5512699152771878,
      "MetricsIntensity" : 0.053370427266692035,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 18.06365899803628,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672563,
      "LackOfCohesion" : 0.5512699152771878,
      "MetricsIntensity" : 0.05337042726669203,
      "Density" : 3.1697005284791544
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "03d386e6-abe9-4b1f-9056-ce3b5f097bcc",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5512933038074526,
      "MetricsIntensity" : 0.05336597230854635,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 18.063678423419386,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5512933038074526,
      "MetricsIntensity" : 0.05336597230854635,
      "Density" : 3.1697005284791544
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "90b3116e-957e-45d1-bb24-c281807ef862",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5512632699646205,
      "MetricsIntensity" : 0.053384768481738565,
      "Density" : 0.9939181717655732
    },
    "euclideanDistance" : 19.0602357204342,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633296460176991,
      "LackOfCohesion" : 0.5512632699646205,
      "MetricsIntensity" : 0.053384768481738565,
      "Density" : 3.1686251468860167
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "59ce2971-d370-4ee1-a1d6-ee55f354e92a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5512771917088256,
      "MetricsIntensity" : 0.053375379124015465,
      "Density" : 0.9939181717655732
    },
    "euclideanDistance" : 19.060236096790433,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769904,
      "LackOfCohesion" : 0.5512771917088256,
      "MetricsIntensity" : 0.053375379124015465,
      "Density" : 3.168625146886017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "84c890c5-c87b-4633-bff0-5638f3dac203",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5511880368589355,
      "MetricsIntensity" : 0.053384734536121345,
      "Density" : 0.9942867674161445
    },
    "euclideanDistance" : 19.060252768988896,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769906,
      "LackOfCohesion" : 0.5511880368589355,
      "MetricsIntensity" : 0.053384734536121345,
      "Density" : 3.166079812206573
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e74a438d-7707-4119-8690-d8fe9a4b154e",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5511953318528992,
      "MetricsIntensity" : 0.05337537912401545,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 19.06026107436099,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633849557522124,
      "LackOfCohesion" : 0.5511953318528992,
      "MetricsIntensity" : 0.05337537912401545,
      "Density" : 3.1692126909518215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "c2d1fcb0-55fc-4b5c-8fa9-881907962081",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5511568521519159,
      "MetricsIntensity" : 0.053375327720652246,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 19.060343529949943,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123894,
      "LackOfCohesion" : 0.5511568521519159,
      "MetricsIntensity" : 0.053375327720652246,
      "Density" : 3.1684272300469485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "90f4c98d-dfe6-4d15-9ad4-396cfdb71233",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5512398814343559,
      "MetricsIntensity" : 0.053384734536121366,
      "Density" : 0.9937338739402876
    },
    "euclideanDistance" : 20.057206131964936,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327433628318584,
      "LackOfCohesion" : 0.5512398814343559,
      "MetricsIntensity" : 0.05338473453612137,
      "Density" : 3.1680376028202106
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4a86630c-c4da-4caa-8eed-22edb0faa337",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5511541234900516,
      "MetricsIntensity" : 0.05337532772065225,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 20.05729084441637,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672563,
      "LackOfCohesion" : 0.5511541234900516,
      "MetricsIntensity" : 0.05337532772065225,
      "Density" : 3.170387779083431
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "19f7fc3d-9b97-403d-9570-1f35eb0c1d18",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5512132630594357,
      "MetricsIntensity" : 0.05336597230854634,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 20.057292444705308,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672568,
      "LackOfCohesion" : 0.5512132630594357,
      "MetricsIntensity" : 0.053365972308546346,
      "Density" : 3.170387779083432
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "be674c8d-183e-4020-9db1-1f448c130d18",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5511568521519159,
      "MetricsIntensity" : 0.053375327720652246,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 20.057309198310325,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344026548672557,
      "LackOfCohesion" : 0.5511568521519159,
      "MetricsIntensity" : 0.053375327720652246,
      "Density" : 3.1678403755868545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "406d1d24-9c16-42d0-9f04-377b3c919abb",
    "objectives" : {
      "NumberOfConcerns" : 0.9983085250338295,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5512541030315129,
      "MetricsIntensity" : 0.05338473453612137,
      "Density" : 0.9935495761150018
    },
    "euclideanDistance" : 21.0544648872239,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6321902654867253,
      "LackOfCohesion" : 0.5512541030315129,
      "MetricsIntensity" : 0.05338473453612137,
      "Density" : 3.1674500587544068
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationSuccessHandler, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizedClientProvider, org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorizationFailureHandler], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.acls.domain.PrincipalSid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "17eaa3e9-3b3a-48f7-b4a2-d4aa08e5f654",
    "objectives" : {
      "NumberOfConcerns" : 0.9976319350473613,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5523590808461372,
      "MetricsIntensity" : 0.05349961022926162,
      "Density" : 0.9937338739402876
    },
    "euclideanDistance" : 25.045772881916236,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6319867183176535,
      "LackOfCohesion" : 0.5523590808461372,
      "MetricsIntensity" : 0.05349961022926162,
      "Density" : 3.1661773341162647
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "de9fa4fc-d8c6-4f1e-a89d-d565b98830d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9976319350473613,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5522826282467488,
      "MetricsIntensity" : 0.053499610229261634,
      "Density" : 0.9937338739402876
    },
    "euclideanDistance" : 26.04401379971606,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6319867183176535,
      "LackOfCohesion" : 0.5522826282467488,
      "MetricsIntensity" : 0.05349961022926163,
      "Density" : 3.166177334116265
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "0c3ead64-ab98-4f47-afcd-b7c23f15c1ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9972936400541272,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5522953331976675,
      "MetricsIntensity" : 0.053456163069169636,
      "Density" : 0.9933652782897162
    },
    "euclideanDistance" : 27.042360416151656,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631433314886552,
      "LackOfCohesion" : 0.5522953331976675,
      "MetricsIntensity" : 0.05345616306916964,
      "Density" : 3.1650029359953016
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "49c4f8b6-1f2b-4156-a09a-b03f64dd32e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979702300405954,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5522461850980609,
      "MetricsIntensity" : 0.05349961022926162,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 27.04241154847962,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6325401217487552,
      "LackOfCohesion" : 0.5522461850980609,
      "MetricsIntensity" : 0.05349961022926162,
      "Density" : 3.167351732237228
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "51b7af27-a35b-4c8f-a017-20b1639a0a00",
    "objectives" : {
      "NumberOfConcerns" : 0.9979702300405954,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5522645181193429,
      "MetricsIntensity" : 0.053456163069169636,
      "Density" : 0.9941024695908588
    },
    "euclideanDistance" : 27.042411836954145,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6325401217487552,
      "LackOfCohesion" : 0.5522645181193429,
      "MetricsIntensity" : 0.05345616306916964,
      "Density" : 3.1673517322372278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ccc20e8c-780b-4060-8339-0e932fef5f54",
    "objectives" : {
      "NumberOfConcerns" : 0.9972936400541272,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5523748629708409,
      "MetricsIntensity" : 0.05344500122969849,
      "Density" : 0.9933652782897162
    },
    "euclideanDistance" : 29.039444614833847,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314333148865525,
      "LackOfCohesion" : 0.5523748629708409,
      "MetricsIntensity" : 0.05344500122969849,
      "Density" : 3.165002935995302
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.SimpleAuthenticationSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "2cc2941b-3949-4d9d-9342-d2a39aa88009",
    "objectives" : {
      "NumberOfConcerns" : 0.9972936400541272,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.553630783279841,
      "MetricsIntensity" : 0.05345835868707216,
      "Density" : 0.9928123848138592
    },
    "euclideanDistance" : 30.038136358240347,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631433314886552,
      "LackOfCohesion" : 0.553630783279841,
      "MetricsIntensity" : 0.05345835868707217,
      "Density" : 3.163241338813857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.gradle.sagan.SaganPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.CorsBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.authentication.AccountStatusException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.crypto.factory.PasswordEncoderFactories'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.SimpleAuthenticationSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.logger, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.useReferer, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.alwaysUseDefaultTargetUrl], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.acls.domain.AclFormattingUtils'"
      } ]
    } ]
  } ]
}