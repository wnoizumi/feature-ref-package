{
  "executionId" : "5b1347fb-878a-4fe3-9e83-e87b1c14f1a8",
  "computingTime" : 4321361,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 28,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.22459584295612,
    "meanNumConcerns" : 1.6747922437673122,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "a2a16c75-b797-4161-b0cf-7ddf9c3f9a8a",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5524730348927194,
      "MetricsIntensity" : 0.053455512180231986,
      "Density" : 0.9971351835273052
    },
    "euclideanDistance" : 9.126976554986774,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6723851687880462,
      "LackOfCohesion" : 0.5524730348927194,
      "MetricsIntensity" : 0.053455512180231986,
      "Density" : 3.213502596653203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.DebugBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "51269024-8e59-4b45-b24b-3ab688f79097",
    "objectives" : {
      "NumberOfConcerns" : 0.9983460138934833,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5527952279901418,
      "MetricsIntensity" : 0.05344268591552016,
      "Density" : 0.9964189794091316
    },
    "euclideanDistance" : 10.11424659728792,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6701715550636418,
      "LackOfCohesion" : 0.5527952279901418,
      "MetricsIntensity" : 0.053442685915520156,
      "Density" : 3.209342560553633
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromString(String)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ccb19f7f-8a08-4a56-8b24-eec5b8467ad8",
    "objectives" : {
      "NumberOfConcerns" : 1.0003307972213034,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5528160314185468,
      "MetricsIntensity" : 0.053439463174169824,
      "Density" : 0.9974932855863922
    },
    "euclideanDistance" : 11.104238645646852,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6734919756502484,
      "LackOfCohesion" : 0.5528160314185468,
      "MetricsIntensity" : 0.053439463174169824,
      "Density" : 3.2128027681660902
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromString(String)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher', targetTypeName='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ea2fd2b-6fdb-4ff7-9249-9180245371ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9970228250082699,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5527788452902727,
      "MetricsIntensity" : 0.053451601670550866,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 12.09521627136549,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679579413392367,
      "LackOfCohesion" : 0.5527788452902727,
      "MetricsIntensity" : 0.053451601670550866,
      "Density" : 3.2094633583381427
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0f694688-61ca-45ea-b10a-59c8d64057b8",
    "objectives" : {
      "NumberOfConcerns" : 0.9986768111147867,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526640549442524,
      "MetricsIntensity" : 0.05346629616767571,
      "Density" : 0.9962399283795882
    },
    "euclideanDistance" : 12.095377032999405,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6707249584947426,
      "LackOfCohesion" : 0.5526640549442524,
      "MetricsIntensity" : 0.053466296167675696,
      "Density" : 3.2069164265129677
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1d8e8594-7efd-4c82-9bfc-78fbe4c9e67a",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5527941878187216,
      "MetricsIntensity" : 0.053435930516516135,
      "Density" : 0.9967770814682184
    },
    "euclideanDistance" : 12.095454417441703,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6712783619258447,
      "LackOfCohesion" : 0.5527941878187216,
      "MetricsIntensity" : 0.053435930516516135,
      "Density" : 3.2104959630911183
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromString(String)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher', targetTypeName='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0b7e2bbc-87ac-4da1-b752-a73bb273475f",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5527941878187216,
      "MetricsIntensity" : 0.053435930516516135,
      "Density" : 0.9967770814682184
    },
    "euclideanDistance" : 12.095454417441703,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6712783619258442,
      "LackOfCohesion" : 0.5527941878187216,
      "MetricsIntensity" : 0.053435930516516135,
      "Density" : 3.2104959630911183
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromString(String)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher', targetTypeName='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6747d74e-feb5-412b-b0ad-aedc975375d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9970228250082699,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5528945932544262,
      "MetricsIntensity" : 0.05345470503912889,
      "Density" : 0.9951656222023276
    },
    "euclideanDistance" : 13.087893603095251,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679579413392367,
      "LackOfCohesion" : 0.5528945932544262,
      "MetricsIntensity" : 0.053454705039128886,
      "Density" : 3.207155222158107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e077d123-dcf0-4f0b-94d3-75a341a3d579",
    "objectives" : {
      "NumberOfConcerns" : 0.9976844194508766,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5528006888900983,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 0.9960608773500448
    },
    "euclideanDistance" : 13.088008115272268,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.669064748201439,
      "LackOfCohesion" : 0.5528006888900983,
      "MetricsIntensity" : 0.05344484627154684,
      "Density" : 3.2100403923831506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b6fd8e8-b0c6-4fd9-b7a3-b1c5b80177f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9983460138934833,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767572,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 13.08804017883227,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6701715550636416,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767571,
      "Density" : 3.2076124567474045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ca3d994f-14d7-4126-859a-f016ff430851",
    "objectives" : {
      "NumberOfConcerns" : 0.9983460138934833,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767572,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 13.08804017883227,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.670171555063641,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767571,
      "Density" : 3.2076124567474045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ad225f5c-1ebb-4832-9b97-6eedd5edbd6b",
    "objectives" : {
      "NumberOfConcerns" : 0.9983460138934833,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767572,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 13.08804017883227,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6701715550636407,
      "LackOfCohesion" : 0.5526858985440777,
      "MetricsIntensity" : 0.05346629616767571,
      "Density" : 3.207612456747407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "756bd410-3823-4ddd-ba3a-4a7daa98f158",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526312895445146,
      "MetricsIntensity" : 0.053462763510022014,
      "Density" : 0.9955237242614146
    },
    "euclideanDistance" : 14.081691707412414,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5526312895445146,
      "MetricsIntensity" : 0.05346276351002202,
      "Density" : 3.2064590542099194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b3fe59c1-0118-4357-b9d6-45b85a6fd4ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.552791327347316,
      "MetricsIntensity" : 0.05344484627154682,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 14.081723241952787,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.552791327347316,
      "MetricsIntensity" : 0.0534448462715468,
      "Density" : 3.2094633583381427
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ce84eecb-4e16-4730-9296-2fb99029ba53",
    "objectives" : {
      "NumberOfConcerns" : 0.9976844194508766,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5524387092358511,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 0.9960608773500448
    },
    "euclideanDistance" : 14.08174550086947,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6690647482014387,
      "LackOfCohesion" : 0.5524387092358511,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 3.208189158016148
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "92cb0ca6-6cd1-4d4e-8124-9cc9dab9fad7",
    "objectives" : {
      "NumberOfConcerns" : 0.9976844194508766,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.55276636323323,
      "MetricsIntensity" : 0.05344484627154685,
      "Density" : 0.9958818263205014
    },
    "euclideanDistance" : 14.081745694931634,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6690647482014391,
      "LackOfCohesion" : 0.55276636323323,
      "MetricsIntensity" : 0.05344484627154685,
      "Density" : 3.2094633583381427
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "542fca4b-89c8-447a-b1a9-d2976aeedc15",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5527584505006401,
      "MetricsIntensity" : 0.05346092924547108,
      "Density" : 0.9962399283795882
    },
    "euclideanDistance" : 14.081747342507885,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5527584505006401,
      "MetricsIntensity" : 0.05346092924547107,
      "Density" : 3.21061742642816
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "eb18ab9a-1dfc-4917-a7ef-50c6ca88596a",
    "objectives" : {
      "NumberOfConcerns" : 0.9976844194508766,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526805490910592,
      "MetricsIntensity" : 0.05344484627154684,
      "Density" : 0.9960608773500448
    },
    "euclideanDistance" : 14.081754990523693,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6690647482014387,
      "LackOfCohesion" : 0.5526805490910592,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 3.2100403923831506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7e90d9cd-a4c1-4eb7-ba42-3f1168b13b3d",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5527570016904476,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 0.995702775290958
    },
    "euclideanDistance" : 15.076290489341448,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5527570016904476,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 3.208886324293134
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4b314f56-7e3a-487a-9928-5ab45adf8ca2",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5528821111973833,
      "MetricsIntensity" : 0.05344484627154684,
      "Density" : 0.995702775290958
    },
    "euclideanDistance" : 15.076295076873881,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5528821111973833,
      "MetricsIntensity" : 0.05344484627154683,
      "Density" : 3.208886324293134
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "25608b0e-3557-4db1-a088-81bfcba6c750",
    "objectives" : {
      "NumberOfConcerns" : 0.9963612305656633,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5528557139582293,
      "MetricsIntensity" : 0.05346987896836386,
      "Density" : 0.9955237242614146
    },
    "euclideanDistance" : 16.07147509271488,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6668511344770338,
      "LackOfCohesion" : 0.5528557139582293,
      "MetricsIntensity" : 0.05346987896836385,
      "Density" : 3.208309290248125
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.DebugBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "2edfc387-fe03-4939-b2a6-a6ecdd89f130",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5529913291965095,
      "MetricsIntensity" : 0.053447949640124844,
      "Density" : 0.9951656222023276
    },
    "euclideanDistance" : 16.071519061895643,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5529913291965095,
      "MetricsIntensity" : 0.053447949640124844,
      "Density" : 3.207155222158107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f57d52ef-eac5-44b9-b889-f731bd3ece2f",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5529847992314825,
      "MetricsIntensity" : 0.05344794964012484,
      "Density" : 0.995344673231871
    },
    "euclideanDistance" : 16.071529925237588,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5529847992314825,
      "MetricsIntensity" : 0.05344794964012484,
      "Density" : 3.2077322562031165
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "492e4615-de71-45b2-b3f3-40159ee848df",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5528412555754879,
      "MetricsIntensity" : 0.05344484627154684,
      "Density" : 0.995702775290958
    },
    "euclideanDistance" : 16.071547158564286,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.5528412555754879,
      "MetricsIntensity" : 0.053444846271546845,
      "Density" : 3.208886324293134
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1b256836-d3e5-4b32-acd1-2cbb95192eef",
    "objectives" : {
      "NumberOfConcerns" : 0.9970228250082699,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5528506171182702,
      "MetricsIntensity" : 0.053456865395155574,
      "Density" : 0.9949865711727842
    },
    "euclideanDistance" : 17.06729487152863,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679579413392367,
      "LackOfCohesion" : 0.5528506171182702,
      "MetricsIntensity" : 0.05345686539515556,
      "Density" : 3.206578188113099
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "966e8ecd-79d4-4584-8fe1-782985039f23",
    "objectives" : {
      "NumberOfConcerns" : 0.9973536222295732,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.552616578548714,
      "MetricsIntensity" : 0.05345686539515553,
      "Density" : 0.995344673231871
    },
    "euclideanDistance" : 17.06732749980647,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6685113447703377,
      "LackOfCohesion" : 0.552616578548714,
      "MetricsIntensity" : 0.05345686539515553,
      "Density" : 3.2058823529411757
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.web.util.matcher.DispatcherTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "99d83a4d-4e07-484c-b929-d71238880f69",
    "objectives" : {
      "NumberOfConcerns" : 0.9966920277869666,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5531021074527662,
      "MetricsIntensity" : 0.05347563991776832,
      "Density" : 0.995344673231871
    },
    "euclideanDistance" : 20.05724027881499,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6674045379081357,
      "LackOfCohesion" : 0.5531021074527662,
      "MetricsIntensity" : 0.05347563991776831,
      "Density" : 3.2077322562031165
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.DebugBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8572f2b8-a5df-4299-bc61-51d47b5b13ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9966920277869666,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.55317059452891,
      "MetricsIntensity" : 0.05346938174356406,
      "Density" : 0.995344673231871
    },
    "euclideanDistance" : 20.05724215085964,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.667404537908135,
      "LackOfCohesion" : 0.55317059452891,
      "MetricsIntensity" : 0.053469381743564054,
      "Density" : 3.2077322562031165
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResource(Resource)', targetType='org.springframework.security.config.DebugBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.savedrequest.RequestCacheAwareFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.authenticate(Authentication)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order, org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getPointcut(), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AnonymousAuthenticationFilter.AnonymousAuthenticationFilter(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey), org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int), org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[]), org.springframework.security.crypto.encrypt.CipherUtils.newCipher(String), org.springframework.security.crypto.encrypt.CipherUtils.<T extends AlgorithmParameterSpec>getParameterSpec(Cipher, Class<T>)]"
      } ]
    } ]
  } ]
}