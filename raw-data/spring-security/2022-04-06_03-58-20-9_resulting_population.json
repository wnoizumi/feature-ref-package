{
  "executionId" : "d8dfdf26-bf91-44cb-bd4e-786de6c21ac8",
  "computingTime" : 8958,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.159117305458769,
    "meanNumConcerns" : 1.6116343490304712,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "5e7c886c-5e50-4885-ba65-04cac6e89887",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 1.0,
      "LackOfCohesion" : 0.5516896087362657,
      "MetricsIntensity" : 0.05356417233086875,
      "Density" : 0.9992647058823529
    },
    "euclideanDistance" : 1.8177969983149687,
    "generation" : 0,
    "numberOfRefactorings" : 1,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6105263157894738,
      "LackOfCohesion" : 0.5516896087362657,
      "MetricsIntensity" : 0.05356417233086875,
      "Density" : 3.1567944250871083,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "8e5f198d-af5d-4210-90c8-60d2ed3f2ed9",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 1.0,
      "LackOfCohesion" : 0.5526220162788066,
      "MetricsIntensity" : 0.05352644803802988,
      "Density" : 1.0
    },
    "euclideanDistance" : 1.8192393160800773,
    "generation" : 0,
    "numberOfRefactorings" : 1,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6118493909191587,
      "LackOfCohesion" : 0.5526220162788066,
      "MetricsIntensity" : 0.05352644803802989,
      "Density" : 3.1572838073128264,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "209809cc-b3da-4e91-b57d-e71da6cbb2b6",
    "objectives" : {
      "NumberOfConcerns" : 1.0027500859401857,
      "NumberOfRefactorings" : 7.0,
      "LackOfCohesion" : 0.5529165993742121,
      "MetricsIntensity" : 0.053289383660087626,
      "Density" : 0.9992647058823529
    },
    "euclideanDistance" : 7.163280966955687,
    "generation" : 0,
    "numberOfRefactorings" : 7,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6098233995584987,
      "LackOfCohesion" : 0.5529165993742121,
      "MetricsIntensity" : 0.053289383660087626,
      "Density" : 3.1476548928778216,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "60651347-725f-4a5e-8d5d-a2e216b57b3b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.552354261432108,
      "MetricsIntensity" : 0.053334960243536615,
      "Density" : 0.9985294117647059
    },
    "euclideanDistance" : 10.114661455032563,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073992269464388,
      "LackOfCohesion" : 0.552354261432108,
      "MetricsIntensity" : 0.05333496024353662,
      "Density" : 3.1453387376954254,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "aa6cfbdb-302e-4210-adf9-5e453cf7ffba",
    "objectives" : {
      "NumberOfConcerns" : 1.0013750429700927,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5522270582874758,
      "MetricsIntensity" : 0.053313635474312726,
      "Density" : 0.9985294117647059
    },
    "euclideanDistance" : 11.104395977741197,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5522270582874758,
      "MetricsIntensity" : 0.05331363547431272,
      "Density" : 3.1453387376954254,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "7db62150-247b-4dd0-bd0f-c216187c8188",
    "objectives" : {
      "NumberOfConcerns" : 1.0013750429700927,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529748018293368,
      "MetricsIntensity" : 0.053318081697246326,
      "Density" : 0.9985294117647059
    },
    "euclideanDistance" : 11.10443320985527,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5529748018293368,
      "MetricsIntensity" : 0.053318081697246326,
      "Density" : 3.1471610660486675,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "a8b2b7cb-f2ae-48be-be31-d51538340806",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526625687443903,
      "MetricsIntensity" : 0.053373393242201354,
      "Density" : 0.9983455882352941
    },
    "euclideanDistance" : 12.09565949204698,
    "generation" : 0,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6071823204419888,
      "LackOfCohesion" : 0.5526625687443903,
      "MetricsIntensity" : 0.053373393242201354,
      "Density" : 3.1447596988998265,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "bbca747c-4d54-440b-ac26-9df427c175b0",
    "objectives" : {
      "NumberOfConcerns" : 1.0010312822275695,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5538312441936413,
      "MetricsIntensity" : 0.053370740875725756,
      "Density" : 0.9963235294117647
    },
    "euclideanDistance" : 13.088326924641072,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6088397790055244,
      "LackOfCohesion" : 0.5538312441936413,
      "MetricsIntensity" : 0.05337074087572576,
      "Density" : 3.138390272148233,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "22370315-c5fc-4e77-96d6-ac1b0a05bb96",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5527627627594525,
      "MetricsIntensity" : 0.053337749827783866,
      "Density" : 0.9981617647058824
    },
    "euclideanDistance" : 13.08836911672449,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298334,
      "LackOfCohesion" : 0.5527627627594525,
      "MetricsIntensity" : 0.053337749827783866,
      "Density" : 3.1478260869565218,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "6b143cdc-9d2b-4c07-b3d2-706bb426bb4a",
    "objectives" : {
      "NumberOfConcerns" : 1.0017188037126161,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5541782317609802,
      "MetricsIntensity" : 0.053322476617607625,
      "Density" : 0.9988970588235294
    },
    "euclideanDistance" : 13.08859017216553,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5541782317609802,
      "MetricsIntensity" : 0.053322476617607625,
      "Density" : 3.146496815286624,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4fdbb3f-004c-4f90-9e1b-22bce32f9039",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5538551914353214,
      "MetricsIntensity" : 0.05338425772773513,
      "Density" : 0.9957720588235294
    },
    "euclideanDistance" : 14.081969147986483,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6086235489220564,
      "LackOfCohesion" : 0.5538551914353214,
      "MetricsIntensity" : 0.05338425772773513,
      "Density" : 3.1402898550724636,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "50177fee-52b6-4ab6-a22a-f04eef56d3cc",
    "objectives" : {
      "NumberOfConcerns" : 1.0024063251976625,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5533130359806423,
      "MetricsIntensity" : 0.05330013242876112,
      "Density" : 0.9992647058823529
    },
    "euclideanDistance" : 14.082341588426317,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788075,
      "LackOfCohesion" : 0.5533130359806423,
      "MetricsIntensity" : 0.05330013242876112,
      "Density" : 3.1476548928778225,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "09b4bec5-9dcb-4fee-84cc-ce04747cd925",
    "objectives" : {
      "NumberOfConcerns" : 0.9989687177724303,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.551846003161408,
      "MetricsIntensity" : 0.05339232180489222,
      "Density" : 0.9979779411764705
    },
    "euclideanDistance" : 15.076514292813032,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606412382531785,
      "LackOfCohesion" : 0.551846003161408,
      "MetricsIntensity" : 0.05339232180489223,
      "Density" : 3.1472463768115944,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "bbd9da1c-759b-4bdb-97cc-7e356eacd37f",
    "objectives" : {
      "NumberOfConcerns" : 1.0013750429700927,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.554146331229352,
      "MetricsIntensity" : 0.053349402159628544,
      "Density" : 0.9963235294117647
    },
    "euclideanDistance" : 15.07664872798556,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6093922651933699,
      "LackOfCohesion" : 0.554146331229352,
      "MetricsIntensity" : 0.053349402159628544,
      "Density" : 3.1420289855072467,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "70f935e5-3c3f-4013-a5ca-38e51e8475f3",
    "objectives" : {
      "NumberOfConcerns" : 0.998281196287384,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5519392069555388,
      "MetricsIntensity" : 0.053416519272336864,
      "Density" : 0.997610294117647
    },
    "euclideanDistance" : 16.071691941376187,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6061946902654871,
      "LackOfCohesion" : 0.5519392069555388,
      "MetricsIntensity" : 0.053416519272336864,
      "Density" : 3.1460869565217386,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "a7d2a713-88a4-46a4-83f5-d7216b51094b",
    "objectives" : {
      "NumberOfConcerns" : 1.0017188037126161,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5536217684349092,
      "MetricsIntensity" : 0.053338517544541206,
      "Density" : 0.9990808823529411
    },
    "euclideanDistance" : 16.07205479181593,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5536217684349092,
      "MetricsIntensity" : 0.05333851754454121,
      "Density" : 3.1470758540822232,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "35cf6c69-280b-4ad8-b589-69efd0178047",
    "objectives" : {
      "NumberOfConcerns" : 0.9989687177724303,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5518929948832471,
      "MetricsIntensity" : 0.0534091723661184,
      "Density" : 0.9981617647058824
    },
    "euclideanDistance" : 17.067562914051397,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606412382531785,
      "LackOfCohesion" : 0.5518929948832471,
      "MetricsIntensity" : 0.05340917236611838,
      "Density" : 3.1460023174971035,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "0108e502-161b-4838-8505-e5c06578dbb5",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.553716790302209,
      "MetricsIntensity" : 0.05338679229378226,
      "Density" : 0.9965073529411764
    },
    "euclideanDistance" : 17.067625929038158,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.60828729281768,
      "LackOfCohesion" : 0.553716790302209,
      "MetricsIntensity" : 0.05338679229378226,
      "Density" : 3.1426086956521737,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "0137b750-e397-451d-b7a3-2623163fb189",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5544560131339835,
      "MetricsIntensity" : 0.0533878697622951,
      "Density" : 0.9961397058823529
    },
    "euclideanDistance" : 17.067628469252238,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6091763405196238,
      "LackOfCohesion" : 0.5544560131339835,
      "MetricsIntensity" : 0.05338786976229509,
      "Density" : 3.1414492753623184,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6ced6ae-c309-4622-92cf-61a97fd345b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9979374355448608,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.552726067198504,
      "MetricsIntensity" : 0.05345868186701686,
      "Density" : 0.9952205882352941
    },
    "euclideanDistance" : 18.063629399446196,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6065301604869953,
      "LackOfCohesion" : 0.552726067198504,
      "MetricsIntensity" : 0.05345868186701686,
      "Density" : 3.1403712296983763,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "898047d4-596c-4164-af16-0779b12e353c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989687177724303,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5521080285406891,
      "MetricsIntensity" : 0.05342348642615226,
      "Density" : 0.9983455882352941
    },
    "euclideanDistance" : 18.06383983976601,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6064123825317853,
      "LackOfCohesion" : 0.5521080285406891,
      "MetricsIntensity" : 0.05342348642615226,
      "Density" : 3.1465816917728846,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "cd98b983-dd58-4c43-8e0e-4a0ff528b176",
    "objectives" : {
      "NumberOfConcerns" : 0.9989687177724303,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5521080285406891,
      "MetricsIntensity" : 0.05342348642615224,
      "Density" : 0.9983455882352941
    },
    "euclideanDistance" : 18.06383983976601,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6064123825317853,
      "LackOfCohesion" : 0.5521080285406891,
      "MetricsIntensity" : 0.05342348642615224,
      "Density" : 3.146581691772884,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "4471b14b-f313-4eed-abf3-10845d0bd929",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5525143475061266,
      "MetricsIntensity" : 0.053392271727490025,
      "Density" : 0.9981617647058824
    },
    "euclideanDistance" : 18.063880046769786,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6075179657269212,
      "LackOfCohesion" : 0.5525143475061266,
      "MetricsIntensity" : 0.05339227172749003,
      "Density" : 3.1478260869565218,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "7fcb2647-e796-4aeb-b7cd-a0271bababfd",
    "objectives" : {
      "NumberOfConcerns" : 0.998281196287384,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5513816503812827,
      "MetricsIntensity" : 0.05343259171386166,
      "Density" : 0.9977941176470588
    },
    "euclideanDistance" : 19.060404906882397,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6061946902654871,
      "LackOfCohesion" : 0.5513816503812827,
      "MetricsIntensity" : 0.05343259171386166,
      "Density" : 3.1466666666666665,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "026f6825-dc67-4308-a929-7fa433d3c53a",
    "objectives" : {
      "NumberOfConcerns" : 0.9986249570299072,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5518019691623128,
      "MetricsIntensity" : 0.05341903438355512,
      "Density" : 0.9983455882352941
    },
    "euclideanDistance" : 19.06046391682946,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6058595909342186,
      "LackOfCohesion" : 0.5518019691623128,
      "MetricsIntensity" : 0.053419034383555115,
      "Density" : 3.1484057971014487,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "10bc0691-f14d-4c66-887d-8689557a524d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5540261910936682,
      "MetricsIntensity" : 0.05342528436643185,
      "Density" : 0.9963235294117647
    },
    "euclideanDistance" : 19.060494743229697,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244888,
      "LackOfCohesion" : 0.5540261910936682,
      "MetricsIntensity" : 0.05342528436643185,
      "Density" : 3.142028985507247,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "c7df26d9-6290-4f87-a1d2-e96261ebf48b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5540261910936684,
      "MetricsIntensity" : 0.05342528436643184,
      "Density" : 0.9963235294117647
    },
    "euclideanDistance" : 19.060494743229697,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244895,
      "LackOfCohesion" : 0.5540261910936684,
      "MetricsIntensity" : 0.05342528436643184,
      "Density" : 3.142028985507247,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    } ]
  }, {
    "solutionId" : "2ef66824-0d88-47a1-927c-b5cf96e607ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5533010690983438,
      "MetricsIntensity" : 0.05343439083157435,
      "Density" : 0.9957720588235294
    },
    "euclideanDistance" : 20.057397257122826,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008848,
      "LackOfCohesion" : 0.5533010690983438,
      "MetricsIntensity" : 0.05343439083157434,
      "Density" : 3.1421113689095144,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "89f488f9-a786-4dc1-a6c5-d1dd5252410d",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5529714094515176,
      "MetricsIntensity" : 0.053416380281237574,
      "Density" : 0.9987132352941176
    },
    "euclideanDistance" : 20.05755148098569,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6075179657269214,
      "LackOfCohesion" : 0.5529714094515176,
      "MetricsIntensity" : 0.05341638028123757,
      "Density" : 3.1495652173913045,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "43bbcede-4813-4948-8a99-5eebb56ff25c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979374355448608,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5521681452529673,
      "MetricsIntensity" : 0.05347476484094107,
      "Density" : 0.9954044117647058
    },
    "euclideanDistance" : 21.054559085369835,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6065301604869948,
      "LackOfCohesion" : 0.5521681452529673,
      "MetricsIntensity" : 0.05347476484094107,
      "Density" : 3.1409512761020895,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "a48bf22f-f434-4b7c-a7eb-19e25c079ad1",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5535927620743973,
      "MetricsIntensity" : 0.0533994796426092,
      "Density" : 0.9987132352941176
    },
    "euclideanDistance" : 21.05486718591821,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6086235489220566,
      "LackOfCohesion" : 0.5535927620743973,
      "MetricsIntensity" : 0.05339947964260921,
      "Density" : 3.1513921113689105,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "c23418f8-d0be-4f73-843a-d2c0295235ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9975936748023376,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5526819754877457,
      "MetricsIntensity" : 0.05348542945561246,
      "Density" : 0.9979779411764705
    },
    "euclideanDistance" : 22.052198783075433,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6059767570558938,
      "LackOfCohesion" : 0.5526819754877457,
      "MetricsIntensity" : 0.05348542945561246,
      "Density" : 3.1490719257540603,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "576387e7-0cc0-402a-a8e4-f13c31efaeb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5539022842624274,
      "MetricsIntensity" : 0.053438005231579336,
      "Density" : 0.9985294117647059
    },
    "euclideanDistance" : 23.05007672316428,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5539022842624274,
      "MetricsIntensity" : 0.053438005231579336,
      "Density" : 3.150812064965197,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.core.ComparableVersion'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter.CasAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.StringItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.provisioning.MutableUser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ec27556-007a-4fab-be18-327bc78dbd6c",
    "objectives" : {
      "NumberOfConcerns" : 0.996562392574768,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5515974090869794,
      "MetricsIntensity" : 0.05358154426522392,
      "Density" : 0.9950367647058823
    },
    "euclideanDistance" : 24.047668607351692,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6060941828254844,
      "LackOfCohesion" : 0.5515974090869794,
      "MetricsIntensity" : 0.05358154426522392,
      "Density" : 3.1452643811737366,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.web.reactive.result.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoders'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.annotation.web.configurers.PortMapperConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.web.access.expression.WebSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.RefreshTokenReactiveOAuth2AuthorizedClientProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.core.converter.ClaimTypeConverter'"
      } ]
    } ]
  } ]
}