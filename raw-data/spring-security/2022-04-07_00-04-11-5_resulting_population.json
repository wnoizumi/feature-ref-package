{
  "executionId" : "48de7976-5f86-48f8-a733-cf9b91ee399c",
  "computingTime" : 3568052,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 36,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "cb08a513-a7a6-45bd-bdfa-f027b2b7feec",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5523042009284865,
      "MetricsIntensity" : 0.05355258844794269,
      "Density" : 0.9982738780207134
    },
    "euclideanDistance" : 20.05740454877764,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5523042009284865,
      "MetricsIntensity" : 0.053552588447942695,
      "Density" : 3.0492091388400713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "0c597b82-4603-4499-9477-2fa2b5dd1a02",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5521775626075107,
      "MetricsIntensity" : 0.05355075418339173,
      "Density" : 0.9984656693517453
    },
    "euclideanDistance" : 20.057410603676875,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5521775626075107,
      "MetricsIntensity" : 0.05355075418339173,
      "Density" : 3.0497949619215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "074a6e44-ae58-404f-bd43-6776691502e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5523161902152453,
      "MetricsIntensity" : 0.053534722970019204,
      "Density" : 0.9984656693517453
    },
    "euclideanDistance" : 20.05743209824368,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5523161902152453,
      "MetricsIntensity" : 0.0535347229700192,
      "Density" : 3.0497949619215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "d0d0d711-3d08-4237-a978-7e7491672cb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5521775626075106,
      "MetricsIntensity" : 0.05355075418339176,
      "Density" : 0.9986574606827772
    },
    "euclideanDistance" : 20.057437872518577,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5500830105146661,
      "LackOfCohesion" : 0.5521775626075106,
      "MetricsIntensity" : 0.05355075418339175,
      "Density" : 3.050380785002929
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "e55bf3f4-f53b-4f7c-9b5f-43f931b7c4b4",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5521138521080203,
      "MetricsIntensity" : 0.053555212060907076,
      "Density" : 0.9984656693517453
    },
    "euclideanDistance" : 21.054682382952187,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5521138521080203,
      "MetricsIntensity" : 0.053555212060907076,
      "Density" : 3.0497949619215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "579bd892-01f2-4260-8368-1be865b0d425",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5521755663961823,
      "MetricsIntensity" : 0.05354898785456487,
      "Density" : 0.9984656693517453
    },
    "euclideanDistance" : 21.054683985536187,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5521755663961823,
      "MetricsIntensity" : 0.053548987854564876,
      "Density" : 3.0497949619215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "8b374cd9-2fb4-410c-9a86-c0dfdbaf6842",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5521147436835236,
      "MetricsIntensity" : 0.05354452997704954,
      "Density" : 0.9986574606827772
    },
    "euclideanDistance" : 21.05470835639632,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5521147436835236,
      "MetricsIntensity" : 0.05354452997704954,
      "Density" : 3.050380785002929
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "02c0d75c-a7cc-4ed4-824d-e5140ff17b55",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5518963076852711,
      "MetricsIntensity" : 0.05354272968036062,
      "Density" : 0.998849252013809
    },
    "euclideanDistance" : 21.054711722767216,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5518963076852711,
      "MetricsIntensity" : 0.053542729680360626,
      "Density" : 3.0509666080843574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "d590c41f-ed49-4a6c-b9c5-3023c404cb0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5522239616826499,
      "MetricsIntensity" : 0.053536471506156404,
      "Density" : 0.998849252013809
    },
    "euclideanDistance" : 21.054720298026538,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5500830105146652,
      "LackOfCohesion" : 0.5522239616826499,
      "MetricsIntensity" : 0.05353647150615639,
      "Density" : 3.0509666080843583
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "c306749c-7052-412f-accc-6ab7e2617ea9",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5520970607693793,
      "MetricsIntensity" : 0.0535382718028453,
      "Density" : 0.9946298427311085
    },
    "euclideanDistance" : 23.049741078268067,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213618,
      "LackOfCohesion" : 0.5520970607693793,
      "MetricsIntensity" : 0.0535382718028453,
      "Density" : 3.0380785002929116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "275ba5bf-70bd-4438-be09-a56b08205eb3",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5521854280595814,
      "MetricsIntensity" : 0.05353647150615639,
      "Density" : 0.9948216340621404
    },
    "euclideanDistance" : 23.049766876723876,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548976203652463,
      "LackOfCohesion" : 0.5521854280595814,
      "MetricsIntensity" : 0.0535364715061564,
      "Density" : 3.0386643233743404
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "1da9d445-73da-43d0-b502-edfb1fb8c41b",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5521092827835672,
      "MetricsIntensity" : 0.05353827180284528,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 23.04984444014259,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5506364139457662,
      "LackOfCohesion" : 0.5521092827835672,
      "MetricsIntensity" : 0.05353827180284528,
      "Density" : 3.041007615700058
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "47b6dbd5-0495-4742-9314-ee3b1e6d0a55",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5523463551864325,
      "MetricsIntensity" : 0.053531156344503464,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 24.047714832413998,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5523463551864325,
      "MetricsIntensity" : 0.053531156344503464,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "d8b3dc77-cf2e-414e-89ed-aceed3def137",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5520783376838148,
      "MetricsIntensity" : 0.053555246028769155,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 24.047717751581423,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5520783376838148,
      "MetricsIntensity" : 0.053555246028769155,
      "Density" : 3.0392501464557697
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "f4c9125b-24d1-45d4-afa1-49c4a6ffc2f8",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5523089090153036,
      "MetricsIntensity" : 0.053535614222018836,
      "Density" : 0.9942462600690449
    },
    "euclideanDistance" : 25.04575881379357,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213614,
      "LackOfCohesion" : 0.5523089090153036,
      "MetricsIntensity" : 0.05353561422201883,
      "Density" : 3.036906854130053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "5aeee217-a305-42e9-856e-2e8889fb3dec",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5523362135150852,
      "MetricsIntensity" : 0.053535614222018815,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 25.045781211209984,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5489762036524624,
      "LackOfCohesion" : 0.5523362135150852,
      "MetricsIntensity" : 0.05353561422201882,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "39edbbae-ed09-496f-b028-4510106c5ca7",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5520915998694229,
      "MetricsIntensity" : 0.05355524602876915,
      "Density" : 0.9948216340621404
    },
    "euclideanDistance" : 25.045791092908164,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548976203652463,
      "LackOfCohesion" : 0.5520915998694229,
      "MetricsIntensity" : 0.05355524602876914,
      "Density" : 3.0386643233743404
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "cfa472d5-515e-406e-b91e-9df6ebb187b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5522953867868403,
      "MetricsIntensity" : 0.053535614222018836,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 25.0457944969215,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5522953867868403,
      "MetricsIntensity" : 0.05353561422201883,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "d15dc7d1-87a8-4cd8-9131-3530139e0424",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5522953867868405,
      "MetricsIntensity" : 0.0535356142220188,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 25.0457944969215,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5522953867868405,
      "MetricsIntensity" : 0.0535356142220188,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "ba5ca6df-23ae-4d41-9baa-14b98896dbcb",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5522953867868403,
      "MetricsIntensity" : 0.053535614222018836,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 25.0457944969215,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5522953867868403,
      "MetricsIntensity" : 0.05353561422201883,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "e56f9ab1-0840-4013-b5ce-7625b3868804",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5520062191320108,
      "MetricsIntensity" : 0.053529322079952514,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 25.045802299678876,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5520062191320108,
      "MetricsIntensity" : 0.053529322079952514,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.putInCache(MutableAcl)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "3e41bb02-8281-4838-b6e8-5e679821d203",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.552142125739946,
      "MetricsIntensity" : 0.05355438874463159,
      "Density" : 0.9942462600690449
    },
    "euclideanDistance" : 26.043998394357978,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213618,
      "LackOfCohesion" : 0.552142125739946,
      "MetricsIntensity" : 0.05355438874463159,
      "Density" : 3.036906854130053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "4bf0f01b-c51d-4a7c-892b-5fd9d0d1f0e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5522149377393636,
      "MetricsIntensity" : 0.053540981144223454,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 26.04400723299481,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548422800221362,
      "LackOfCohesion" : 0.5522149377393636,
      "MetricsIntensity" : 0.053540981144223454,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "33855556-ce70-4804-9509-e76c846a0162",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5523199726567735,
      "MetricsIntensity" : 0.05352935604781455,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 26.04403671610685,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5523199726567735,
      "MetricsIntensity" : 0.05352935604781456,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "b57e55fc-9408-4e5d-99bd-ad19893cfbbd",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5520522375930462,
      "MetricsIntensity" : 0.05355524602876914,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 27.042363515834086,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902595,
      "LackOfCohesion" : 0.5520522375930462,
      "MetricsIntensity" : 0.053555246028769134,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "4c842c54-7b64-422a-a78b-59686ef63ab0",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5519491515454543,
      "MetricsIntensity" : 0.053543672692911985,
      "Density" : 0.9934790947449176
    },
    "euclideanDistance" : 28.040816734708454,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902597,
      "LackOfCohesion" : 0.5519491515454543,
      "MetricsIntensity" : 0.05354367269291198,
      "Density" : 3.034563561804336
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "ad8fe343-a64d-425a-9e54-ef7318a53f7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.552002465469929,
      "MetricsIntensity" : 0.053541838428361035,
      "Density" : 0.9934790947449176
    },
    "euclideanDistance" : 29.03941221528211,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902601,
      "LackOfCohesion" : 0.552002465469929,
      "MetricsIntensity" : 0.053541838428361035,
      "Density" : 3.0345635618043354
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.initializeTransientFields(MutableAcl)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "16b27035-8140-49ce-a5c1-9ff471c994cb",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5525662332405177,
      "MetricsIntensity" : 0.05354098114422345,
      "Density" : 0.9934790947449176
    },
    "euclideanDistance" : 29.03943516204411,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213614,
      "LackOfCohesion" : 0.5525662332405177,
      "MetricsIntensity" : 0.053540981144223454,
      "Density" : 3.0345635618043363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "527ab43e-d830-4947-a325-c61af1d0acce",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5525130426565276,
      "MetricsIntensity" : 0.053540981144223454,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 29.039452942777327,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548976203652463,
      "LackOfCohesion" : 0.5525130426565276,
      "MetricsIntensity" : 0.053540981144223454,
      "Density" : 3.0351493848857647
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "f5040751-9fe0-4614-bca1-746132ddecbf",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5525818358118214,
      "MetricsIntensity" : 0.05353292267333032,
      "Density" : 0.9938626774069812
    },
    "euclideanDistance" : 29.039460800221445,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5489762036524632,
      "LackOfCohesion" : 0.5525818358118214,
      "MetricsIntensity" : 0.05353292267333031,
      "Density" : 3.035735207967194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "428a9ad1-ea24-4542-990e-fd93ca9af0dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5523701057671949,
      "MetricsIntensity" : 0.05353112237664141,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 29.03947646635278,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548976203652463,
      "LackOfCohesion" : 0.5523701057671949,
      "MetricsIntensity" : 0.05353112237664141,
      "Density" : 3.0374926772114823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "eed17710-a7dd-449b-9b08-23db462c6e1f",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5520553357112715,
      "MetricsIntensity" : 0.05353554628629469,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 31.03689112521303,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213614,
      "LackOfCohesion" : 0.5520553357112715,
      "MetricsIntensity" : 0.0535355462862947,
      "Density" : 3.0351493848857656
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.putInCache(MutableAcl)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "adedef48-0cdf-4234-83b2-ab22856ed53b",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5523534630244711,
      "MetricsIntensity" : 0.053565584228461326,
      "Density" : 0.9932873034138857
    },
    "euclideanDistance" : 32.03572179511624,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.54786939679026,
      "LackOfCohesion" : 0.5523534630244711,
      "MetricsIntensity" : 0.05356558422846133,
      "Density" : 3.0339777387229057
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.authentication.dao.DaoAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2PostAuthenticationRequest.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "cdd9e3e0-26a1-40db-95a2-1ecbb66f75d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5523780488944042,
      "MetricsIntensity" : 0.05355622268567909,
      "Density" : 0.9932873034138857
    },
    "euclideanDistance" : 32.03573328620872,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213614,
      "LackOfCohesion" : 0.5523780488944042,
      "MetricsIntensity" : 0.053556222685679084,
      "Density" : 3.033977738722906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.authentication.dao.DaoAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2PostAuthenticationRequest.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "d86b9a46-2506-4879-a6c2-5873b44cd5b7",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5524575404662884,
      "MetricsIntensity" : 0.0535490732594752,
      "Density" : 0.9932873034138857
    },
    "euclideanDistance" : 33.034652930589075,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548422800221362,
      "LackOfCohesion" : 0.5524575404662884,
      "MetricsIntensity" : 0.053549073259475194,
      "Density" : 3.033977738722906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.authentication.dao.DaoAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      } ]
    } ]
  }, {
    "solutionId" : "97983dba-9fc8-45f8-b7d5-6523d368620a",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.55229787415328,
      "MetricsIntensity" : 0.05355262209230128,
      "Density" : 0.9932873034138857
    },
    "euclideanDistance" : 34.033621731154085,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.54786939679026,
      "LackOfCohesion" : 0.55229787415328,
      "MetricsIntensity" : 0.05355262209230128,
      "Density" : 3.0339777387229057
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationRequestFactoryTests'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.session.ConcurrentSessionFilter.ResponseBodySessionInformationExpiredStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.userinfo.CustomUserTypesOAuth2UserService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.authentication.dao.DaoAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.rsocket.metadata.UsernamePasswordMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.LoginPageSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.DependencyExcludes'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.acls.model.NotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2PostAuthenticationRequest.Builder'"
      } ]
    } ]
  } ]
}