{
  "executionId" : "54bb9062-8c12-41c5-bf82-8db74ff697ab",
  "computingTime" : 3532138,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 32,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2205628948879954,
    "meanNumConcerns" : 1.7091412742382268,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "5898d43b-3be1-41af-b850-dcd110e2bd12",
    "objectives" : {
      "NumberOfConcerns" : 0.9974068071312804,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526964802691703,
      "MetricsIntensity" : 0.05354312748336913,
      "Density" : 0.9978598180845372
    },
    "euclideanDistance" : 13.088119988037324,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037652270210413,
      "LackOfCohesion" : 0.5526964802691703,
      "MetricsIntensity" : 0.05354312748336913,
      "Density" : 3.2136703044227457
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    } ]
  }, {
    "solutionId" : "020e9584-8e91-4ea9-8aa5-60bd37ec9861",
    "objectives" : {
      "NumberOfConcerns" : 0.9974068071312804,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526795755300912,
      "MetricsIntensity" : 0.053547588284082855,
      "Density" : 1.0010700909577315
    },
    "euclideanDistance" : 14.082090886063089,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703765227021041,
      "LackOfCohesion" : 0.5526795755300912,
      "MetricsIntensity" : 0.053547588284082855,
      "Density" : 3.2240091901206207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      } ]
    } ]
  }, {
    "solutionId" : "7ee1756b-5430-4512-a068-24e05655c602",
    "objectives" : {
      "NumberOfConcerns" : 0.9974068071312804,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5526813011556305,
      "MetricsIntensity" : 0.05354312748336915,
      "Density" : 1.0010700909577315
    },
    "euclideanDistance" : 14.082090936827163,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703765227021041,
      "LackOfCohesion" : 0.5526813011556305,
      "MetricsIntensity" : 0.053543127483369146,
      "Density" : 3.224009190120621
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "60ce6140-b76c-4861-8aff-f26f5a4754ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9974068071312804,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5526600595269687,
      "MetricsIntensity" : 0.05354758828408286,
      "Density" : 1.0010700909577315
    },
    "euclideanDistance" : 15.076646250129016,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703765227021041,
      "LackOfCohesion" : 0.5526600595269687,
      "MetricsIntensity" : 0.05354758828408286,
      "Density" : 3.2240091901206207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "3c2947b8-f5fd-48c5-91e3-c311bd93da60",
    "objectives" : {
      "NumberOfConcerns" : 0.9970826580226905,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5516972289532667,
      "MetricsIntensity" : 0.05345622765408054,
      "Density" : 0.9967897271268058
    },
    "euclideanDistance" : 16.071558449252667,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7032115171650055,
      "LackOfCohesion" : 0.5516972289532667,
      "MetricsIntensity" : 0.053456227654080535,
      "Density" : 3.2102240091901204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "c7474074-0485-4953-8dbd-0066792bd9b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9957860615883306,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5517409076269219,
      "MetricsIntensity" : 0.05345622765408053,
      "Density" : 0.9958979846620296
    },
    "euclideanDistance" : 17.067239913756747,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009966777408634,
      "LackOfCohesion" : 0.5517409076269219,
      "MetricsIntensity" : 0.05345622765408053,
      "Density" : 3.207352096496267
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "2b5718c9-af5c-452c-9e70-bca72778f20a",
    "objectives" : {
      "NumberOfConcerns" : 0.9961102106969206,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5517304990919232,
      "MetricsIntensity" : 0.05345799514115579,
      "Density" : 0.9958979846620296
    },
    "euclideanDistance" : 17.067258498323074,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701550387596899,
      "LackOfCohesion" : 0.5517304990919232,
      "MetricsIntensity" : 0.05345799514115579,
      "Density" : 3.207352096496267
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "a8771fe3-6fb8-4927-90bd-77828c1c453f",
    "objectives" : {
      "NumberOfConcerns" : 0.9967585089141004,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5517118009022648,
      "MetricsIntensity" : 0.05345622765408054,
      "Density" : 0.9967897271268058
    },
    "euclideanDistance" : 17.067347795270596,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7026578073089702,
      "LackOfCohesion" : 0.5517118009022648,
      "MetricsIntensity" : 0.05345622765408054,
      "Density" : 3.2102240091901204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "25ac56d7-ccff-4abf-b5c3-8e3b13be75b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5520443164221341,
      "MetricsIntensity" : 0.05345373828125839,
      "Density" : 0.9951845906902087
    },
    "euclideanDistance" : 18.063452099946588,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5520443164221341,
      "MetricsIntensity" : 0.053453738281258406,
      "Density" : 3.2068965517241375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "da4826fb-0f33-4a10-a79f-7f98c73b4624",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5520443164221339,
      "MetricsIntensity" : 0.053453738281258434,
      "Density" : 0.9951845906902087
    },
    "euclideanDistance" : 18.063452099946588,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5520443164221339,
      "MetricsIntensity" : 0.05345373828125843,
      "Density" : 3.206896551724138
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "9940cdac-e7b6-499b-9e35-75f284e7c8bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9954619124797407,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5520505615431331,
      "MetricsIntensity" : 0.0534499653761555,
      "Density" : 0.9953629391831639
    },
    "euclideanDistance" : 18.063479967082642,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7004429678848294,
      "LackOfCohesion" : 0.5520505615431331,
      "MetricsIntensity" : 0.053449965376155505,
      "Density" : 3.2074712643678174
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "86f94954-6dea-436a-a334-d0400dfd9d0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9954619124797407,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5520070129761653,
      "MetricsIntensity" : 0.05349095165336643,
      "Density" : 0.9955412876761192
    },
    "euclideanDistance" : 18.063488586066352,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7004429678848285,
      "LackOfCohesion" : 0.5520070129761653,
      "MetricsIntensity" : 0.05349095165336643,
      "Density" : 3.208045977011494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "de3eef9e-7995-40a0-8c13-51f5f87d6d9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9964343598055105,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5517044777544265,
      "MetricsIntensity" : 0.053456227654080535,
      "Density" : 0.9962546816479401
    },
    "euclideanDistance" : 18.06357218888766,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702104097452935,
      "LackOfCohesion" : 0.5517044777544265,
      "MetricsIntensity" : 0.053456227654080535,
      "Density" : 3.2085008615738078
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "cb730fa2-9629-4265-a290-8ebf5d088195",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5520197262581996,
      "MetricsIntensity" : 0.05345373828125843,
      "Density" : 0.9951845906902087
    },
    "euclideanDistance" : 19.06012262861782,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5520197262581996,
      "MetricsIntensity" : 0.053453738281258434,
      "Density" : 3.206896551724138
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "501e65e7-3a96-4ec4-855e-d50822c6abf2",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5520197262581995,
      "MetricsIntensity" : 0.05345373828125845,
      "Density" : 0.9951845906902087
    },
    "euclideanDistance" : 19.06012262861782,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287925,
      "LackOfCohesion" : 0.5520197262581995,
      "MetricsIntensity" : 0.05345373828125844,
      "Density" : 3.2068965517241375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "b5db3946-b86a-4bd4-95f6-17d8caa8b3ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9954619124797407,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519959167343901,
      "MetricsIntensity" : 0.05344996537615548,
      "Density" : 0.9953629391831639
    },
    "euclideanDistance" : 19.060148168122602,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7004429678848294,
      "LackOfCohesion" : 0.5519959167343901,
      "MetricsIntensity" : 0.053449965376155484,
      "Density" : 3.2074712643678156
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "93334933-ce01-4ed5-a862-478def6cb4f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9961102106969206,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519340231244871,
      "MetricsIntensity" : 0.05344996537615549,
      "Density" : 0.9958979846620296
    },
    "euclideanDistance" : 19.06020819436109,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701550387596899,
      "LackOfCohesion" : 0.5519340231244871,
      "MetricsIntensity" : 0.0534499653761555,
      "Density" : 3.209195402298851
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "28d01487-7b5f-4a58-beac-ece0c47f5cd4",
    "objectives" : {
      "NumberOfConcerns" : 0.9961102106969206,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516773226300816,
      "MetricsIntensity" : 0.05345373828125845,
      "Density" : 0.9960763331549849
    },
    "euclideanDistance" : 19.06021009285487,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7015503875969005,
      "LackOfCohesion" : 0.5516773226300816,
      "MetricsIntensity" : 0.05345373828125844,
      "Density" : 3.207926479035037
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "4609f7b6-c318-440b-86ea-7c701eba45b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9964343598055105,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516627506810834,
      "MetricsIntensity" : 0.05345373828125843,
      "Density" : 0.9962546816479401
    },
    "euclideanDistance" : 19.060235935494916,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7021040974529347,
      "LackOfCohesion" : 0.5516627506810834,
      "MetricsIntensity" : 0.05345373828125843,
      "Density" : 3.2085008615738078
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "2a63864c-95fe-47ee-976b-c5a9b340bf4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5517064293547388,
      "MetricsIntensity" : 0.05345373828125844,
      "Density" : 0.9953629391831639
    },
    "euclideanDistance" : 20.05712551277262,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287923,
      "LackOfCohesion" : 0.5517064293547388,
      "MetricsIntensity" : 0.05345373828125844,
      "Density" : 3.2056289488799536
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "c252505e-3383-485f-80e7-e0372339d671",
    "objectives" : {
      "NumberOfConcerns" : 0.9954619124797407,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5516498329456833,
      "MetricsIntensity" : 0.053449965376155484,
      "Density" : 0.9955412876761192
    },
    "euclideanDistance" : 21.054434718406796,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700442967884828,
      "LackOfCohesion" : 0.5516498329456833,
      "MetricsIntensity" : 0.05344996537615549,
      "Density" : 3.2062033314187253
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "bb79523e-3440-4d93-9f3b-8eecc1cd7e4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9957860615883306,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5516826198309291,
      "MetricsIntensity" : 0.05344996537615548,
      "Density" : 0.9958979846620296
    },
    "euclideanDistance" : 21.054467774990886,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009966777408634,
      "LackOfCohesion" : 0.5516826198309291,
      "MetricsIntensity" : 0.053449965376155484,
      "Density" : 3.207352096496267
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.hasTokenExpired(OAuth2Token)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.getTokenResponse(ClientRegistration, JwtBearerGrantRequest)', targetType='org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClockSkew(Duration)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.repository(Action<RepositoryRef>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setThrowExceptionWhenTokenRejected(boolean)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.ignoring()', targetType='org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "284215cf-6176-4d9b-ba5d-358991f50b5e",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5528926717864515,
      "MetricsIntensity" : 0.05342127931989667,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 22.05208911821465,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699335548172757,
      "LackOfCohesion" : 0.5528926717864515,
      "MetricsIntensity" : 0.05342127931989667,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "0b8138f4-f2e2-4a6a-a628-b4a8db1c1e70",
    "objectives" : {
      "NumberOfConcerns" : 0.9944894651539709,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5531801888901893,
      "MetricsIntensity" : 0.053471823623368345,
      "Density" : 0.9983948635634029
    },
    "euclideanDistance" : 22.05208990452366,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698781838316722,
      "LackOfCohesion" : 0.5531801888901893,
      "MetricsIntensity" : 0.053471823623368345,
      "Density" : 3.2153934520390584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "6475421d-9ba2-40a6-889b-f1db6c584d9b",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5530184507146463,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 22.0520922678361,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699335548172757,
      "LackOfCohesion" : 0.5530184507146463,
      "MetricsIntensity" : 0.05341951183282139,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "8e17ccb7-ff52-4db3-b800-e151e4f34ec8",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5525266474359577,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 0.9983948635634029
    },
    "euclideanDistance" : 22.052102639250716,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5525266474359577,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 3.215393452039058
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "ab99669f-5631-4ae0-835a-8eb562888be6",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5528638839699156,
      "MetricsIntensity" : 0.05341505103210768,
      "Density" : 0.9985732120563581
    },
    "euclideanDistance" : 22.05211915598587,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5528638839699156,
      "MetricsIntensity" : 0.05341505103210768,
      "Density" : 3.2159678345778286
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "1ece2dd6-19ef-497f-8d6c-a51fdc93081b",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528545162884166,
      "MetricsIntensity" : 0.053419511832821405,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 23.04982846136835,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727572,
      "LackOfCohesion" : 0.5528545162884166,
      "MetricsIntensity" : 0.05341951183282141,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "a6897ab2-7caa-41d7-b4ca-8c5df85e2d89",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528545162884168,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 23.04982846136835,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727572,
      "LackOfCohesion" : 0.5528545162884168,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "e571d95c-bc95-4ecb-9346-14730e514faa",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528545162884166,
      "MetricsIntensity" : 0.053419511832821405,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 23.04982846136835,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727572,
      "LackOfCohesion" : 0.5528545162884166,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "2d7c6619-d378-4e09-b679-9ea01a1053a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9948136142625608,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528545162884168,
      "MetricsIntensity" : 0.0534195118328214,
      "Density" : 0.9982165150704476
    },
    "euclideanDistance" : 23.04982846136835,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727568,
      "LackOfCohesion" : 0.5528545162884168,
      "MetricsIntensity" : 0.053419511832821405,
      "Density" : 3.2148190695002876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  }, {
    "solutionId" : "722b5283-77d8-47ca-9942-0a86a0fdb217",
    "objectives" : {
      "NumberOfConcerns" : 0.9951377633711507,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528092391611722,
      "MetricsIntensity" : 0.053417744345746164,
      "Density" : 0.9985732120563581
    },
    "euclideanDistance" : 23.04985681383372,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287925,
      "LackOfCohesion" : 0.5528092391611722,
      "MetricsIntensity" : 0.053417744345746164,
      "Density" : 3.215967834577828
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.loadUser(OAuth2UserRequest)', targetType='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.MISSING_USER_INFO_URI_ERROR_CODE', targetTypeName='org.springframework.security.config.oauth2.client.ClientRegistrationsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.setRequestEntityConverter(Converter<OAuth2UserRequest,RequestEntity<?>>)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.getResponse(OAuth2UserRequest, RequestEntity<?>)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.INVALID_USER_INFO_RESPONSE_ERROR_CODE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService.PARAMETERIZED_RESPONSE_TYPE', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.success(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.setClock(Clock)', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.JwtBearerOAuth2AuthorizedClientProvider.authorize(OAuth2AuthorizationContext)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.milestoneTitle], extractedMethods=[org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.getMilestoneTitle(), org.springframework.gradle.github.milestones.GitHubMilestoneHasNoOpenIssuesTask.setMilestoneTitle(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.getOrder()', targetType='org.springframework.security.crypto.keygen.SharedKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.builders.WebSecurity",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.builders.WebSecurity.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      } ]
    } ]
  } ]
}