{
  "executionId" : "15cae500-0a8f-4379-af41-ff8e556e698d",
  "computingTime" : 3769256,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 26,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "5f86149e-e4f1-43b4-b7ea-2ab6f88f118c",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5526199835755274,
      "MetricsIntensity" : 0.05355207343045324,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 18.063809171685918,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591585,
      "LackOfCohesion" : 0.5526199835755274,
      "MetricsIntensity" : 0.053552073430453234,
      "Density" : 3.0592375366568914
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "263f3820-5753-44c9-919a-67da3484a100",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5524695302093839,
      "MetricsIntensity" : 0.05355207343045323,
      "Density" : 1.0005753739930956
    },
    "euclideanDistance" : 18.06383484015654,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.547869396790259,
      "LackOfCohesion" : 0.5524695302093839,
      "MetricsIntensity" : 0.053552073430453234,
      "Density" : 3.0598240469208213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "b8c312cb-1a34-4947-8e18-8496a8e74212",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5526001257575045,
      "MetricsIntensity" : 0.05354312370756046,
      "Density" : 1.0005753739930956
    },
    "euclideanDistance" : 18.063838808269917,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902601,
      "LackOfCohesion" : 0.5526001257575045,
      "MetricsIntensity" : 0.05354312370756046,
      "Density" : 3.0598240469208213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "abdafbca-c8fd-48b8-a3ab-39062b181d6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5526311389637188,
      "MetricsIntensity" : 0.053547581585075825,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 20.05744783464523,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591585,
      "LackOfCohesion" : 0.5526311389637188,
      "MetricsIntensity" : 0.053547581585075825,
      "Density" : 3.059237536656892
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "5d782df3-7237-4e46-af3f-6b7eee860590",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5528978917124506,
      "MetricsIntensity" : 0.05354397387462219,
      "Density" : 1.003644035289605
    },
    "euclideanDistance" : 20.057618058811958,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591585,
      "LackOfCohesion" : 0.5528978917124506,
      "MetricsIntensity" : 0.053543973874622196,
      "Density" : 3.0692082111436947
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "b21d5ade-b1d6-4d23-b214-7b055df55190",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5529197353122759,
      "MetricsIntensity" : 0.05354217357793329,
      "Density" : 1.003644035289605
    },
    "euclideanDistance" : 20.057618656147355,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591587,
      "LackOfCohesion" : 0.5529197353122759,
      "MetricsIntensity" : 0.0535421735779333,
      "Density" : 3.069208211143695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "c2015d23-0c72-4350-b3ef-641fd9415c35",
    "objectives" : {
      "NumberOfConcerns" : 0.9967937299608123,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5528553392452586,
      "MetricsIntensity" : 0.053531011738462135,
      "Density" : 1.0040276179516685
    },
    "euclideanDistance" : 20.05767144493719,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5484228002213611,
      "LackOfCohesion" : 0.5528553392452586,
      "MetricsIntensity" : 0.053531011738462135,
      "Density" : 3.070381231671554
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "ebd54038-3095-41fd-9a40-ebe5e7821052",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5528545945770827,
      "MetricsIntensity" : 0.05355465595847974,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 21.054708543192785,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280575,
      "LackOfCohesion" : 0.5528545945770827,
      "MetricsIntensity" : 0.05355465595847973,
      "Density" : 3.059237536656892
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "06cc5e84-c921-4f3f-b136-50ad600dd94e",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5528849841307357,
      "MetricsIntensity" : 0.05354393990676014,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 21.054709313929116,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280575,
      "LackOfCohesion" : 0.5528849841307357,
      "MetricsIntensity" : 0.05354393990676014,
      "Density" : 3.059237536656891
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "394258f5-e994-4e45-838f-c1a6d9291647",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5528455549921211,
      "MetricsIntensity" : 0.05353363535142656,
      "Density" : 1.000958956655159
    },
    "euclideanDistance" : 21.054752449233533,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591587,
      "LackOfCohesion" : 0.5528455549921211,
      "MetricsIntensity" : 0.05353363535142655,
      "Density" : 3.0609970674486804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "a34e0718-04ea-4e9f-a1ec-9267b9e06954",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5528432827128875,
      "MetricsIntensity" : 0.05355288962965291,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 22.05222753243091,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280573,
      "LackOfCohesion" : 0.5528432827128875,
      "MetricsIntensity" : 0.05355288962965291,
      "Density" : 3.0592375366568914
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "14341e3f-9fa0-4b3b-aca9-c24179ca3481",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5528432827128875,
      "MetricsIntensity" : 0.05355288962965291,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 22.05222753243091,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280573,
      "LackOfCohesion" : 0.5528432827128875,
      "MetricsIntensity" : 0.05355288962965291,
      "Density" : 3.059237536656891
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    } ]
  }, {
    "solutionId" : "94846266-be0d-4a22-b28a-6bfdc2893254",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5528413757319504,
      "MetricsIntensity" : 0.053531869022599717,
      "Density" : 1.001150747986191
    },
    "euclideanDistance" : 22.052294431984826,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902597,
      "LackOfCohesion" : 0.5528413757319504,
      "MetricsIntensity" : 0.053531869022599717,
      "Density" : 3.061583577712609
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "8b26e83d-8672-4d97-8c8f-215bf5e9e18d",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.552585068037897,
      "MetricsIntensity" : 0.05354303086207087,
      "Density" : 1.0040276179516685
    },
    "euclideanDistance" : 22.05240273482667,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591587,
      "LackOfCohesion" : 0.552585068037897,
      "MetricsIntensity" : 0.05354303086207088,
      "Density" : 3.070381231671554
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.logoutUrl(String)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "ee9b1a3d-3f52-4fd3-84c5-2c01cd84a1cf",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5529509837953593,
      "MetricsIntensity" : 0.05357612202978103,
      "Density" : 0.9998082086689681
    },
    "euclideanDistance" : 24.04784814773055,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969563,
      "LackOfCohesion" : 0.5529509837953593,
      "MetricsIntensity" : 0.05357612202978103,
      "Density" : 3.0574780058651023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "580846c9-1bc4-4fbb-a2ea-595704292d2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5526014861981553,
      "MetricsIntensity" : 0.053569863855576764,
      "Density" : 1.0030686612965094
    },
    "euclideanDistance" : 24.047975876630257,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.546209186496956,
      "LackOfCohesion" : 0.5526014861981553,
      "MetricsIntensity" : 0.053569863855576764,
      "Density" : 3.0674486803519048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "2c95affe-aa45-49c5-b17d-8adfd03ecd44",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5528781717959418,
      "MetricsIntensity" : 0.053576122029781015,
      "Density" : 1.0
    },
    "euclideanDistance" : 25.045943854535686,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969565,
      "LackOfCohesion" : 0.5528781717959418,
      "MetricsIntensity" : 0.05357612202978102,
      "Density" : 3.0580645161290327
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "cc659229-eba2-4778-8abc-2265f03a684e",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5528155014678715,
      "MetricsIntensity" : 0.05357612202978103,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 25.045957789288643,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969565,
      "LackOfCohesion" : 0.5528155014678715,
      "MetricsIntensity" : 0.05357612202978102,
      "Density" : 3.059237536656892
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "cecf9778-bb26-4c99-8538-1d0d78b49eb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5528155014678716,
      "MetricsIntensity" : 0.053576122029780994,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 25.045957789288643,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969567,
      "LackOfCohesion" : 0.5528155014678716,
      "MetricsIntensity" : 0.053576122029780994,
      "Density" : 3.0592375366568914
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "19e88484-827c-4cf3-a9a7-c66264e0aff9",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5528550279818408,
      "MetricsIntensity" : 0.053569829887714714,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 25.045958648291993,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969565,
      "LackOfCohesion" : 0.5528550279818408,
      "MetricsIntensity" : 0.05356982988771471,
      "Density" : 3.059237536656892
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "77bdba34-fbec-403b-88fb-a4f146e8ab2f",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5527130445829771,
      "MetricsIntensity" : 0.053558702016105623,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 25.04596965140478,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280573,
      "LackOfCohesion" : 0.5527130445829771,
      "MetricsIntensity" : 0.05355870201610562,
      "Density" : 3.059237536656891
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "228eb66e-a7dc-4341-a1cc-7a736680bea0",
    "objectives" : {
      "NumberOfConcerns" : 0.9950124688279302,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5528377863525419,
      "MetricsIntensity" : 0.05358200979253715,
      "Density" : 1.0
    },
    "euclideanDistance" : 26.044165382344577,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5456557830658553,
      "LackOfCohesion" : 0.5528377863525419,
      "MetricsIntensity" : 0.053582009792537154,
      "Density" : 3.0580645161290323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "4da21d3b-242e-49f6-8971-9a363a8611d2",
    "objectives" : {
      "NumberOfConcerns" : 0.995724973281083,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.552658435583414,
      "MetricsIntensity" : 0.053558702016105596,
      "Density" : 1.0003835826620637
    },
    "euclideanDistance" : 26.044203489756768,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5467625899280575,
      "LackOfCohesion" : 0.552658435583414,
      "MetricsIntensity" : 0.0535587020161056,
      "Density" : 3.0592375366568905
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "16845f02-78d8-44d8-a47b-d716aa46543b",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5528469666533342,
      "MetricsIntensity" : 0.053563605681372514,
      "Density" : 1.0032604526275413
    },
    "euclideanDistance" : 26.044304545428957,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969567,
      "LackOfCohesion" : 0.5528469666533342,
      "MetricsIntensity" : 0.05356360568137251,
      "Density" : 3.068035190615836
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  }, {
    "solutionId" : "10494fef-a6a0-4fca-a664-0476be9576de",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5527910574394957,
      "MetricsIntensity" : 0.05357612202978103,
      "Density" : 1.0
    },
    "euclideanDistance" : 27.04254439295405,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969565,
      "LackOfCohesion" : 0.5527910574394957,
      "MetricsIntensity" : 0.05357612202978103,
      "Density" : 3.0580645161290323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      } ]
    } ]
  }, {
    "solutionId" : "b0f1edaf-fbc4-4d7e-80ac-d6e91784ab85",
    "objectives" : {
      "NumberOfConcerns" : 0.9953687210545066,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5527598522968884,
      "MetricsIntensity" : 0.05357612202978102,
      "Density" : 1.0001917913310319
    },
    "euclideanDistance" : 28.04103343968376,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5462091864969565,
      "LackOfCohesion" : 0.5527598522968884,
      "MetricsIntensity" : 0.05357612202978102,
      "Density" : 3.058651026392962
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizationContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.AuthenticationManagerDelegator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.ClientAuthorizationRequiredException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.config.http.UserDetailsServiceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.PasswordManagementSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean)', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.security.web.jackson2.WebServletJackson2Module'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecurityMetadataSourceAdvisorRegistrar'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.acls.domain.AclImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.gradle.maven.PublishLocalPlugin'"
      } ]
    } ]
  } ]
}