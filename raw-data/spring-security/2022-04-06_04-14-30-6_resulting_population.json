{
  "executionId" : "af711fa5-00a3-4273-8410-032dce4db2ed",
  "computingTime" : 859675,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2248831775700944,
    "meanNumConcerns" : 1.654293628808864,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "53fcf713-b2e6-413f-bd5d-6709b034c45f",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523300145973074,
      "MetricsIntensity" : 0.05327994433249577,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 8.14299796286321,
    "generation" : 25,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6510215350635011,
      "LackOfCohesion" : 0.5523300145973074,
      "MetricsIntensity" : 0.05327994433249576,
      "Density" : 3.210128055878929
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e64eeaf-3940-40c6-95fd-93af109b666a",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523569094132046,
      "MetricsIntensity" : 0.05326299928287099,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 8.143018648094074,
    "generation" : 20,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515737161789066,
      "LackOfCohesion" : 0.5523569094132046,
      "MetricsIntensity" : 0.05326299928287099,
      "Density" : 3.209545983701979
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "61c487be-4972-4591-a5e0-b6c909f1b4e1",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5527751068371304,
      "MetricsIntensity" : 0.05325499389116313,
      "Density" : 0.9990943669625068
    },
    "euclideanDistance" : 8.143091411307964,
    "generation" : 32,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650662251655629,
      "LackOfCohesion" : 0.5527751068371304,
      "MetricsIntensity" : 0.05325499389116314,
      "Density" : 3.2088423502036068
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "bea1d091-eeaa-46e0-bae0-c1e46a2142dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0020093770931011,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528019840861983,
      "MetricsIntensity" : 0.05323805990950022,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 8.143112106447486,
    "generation" : 15,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6512141280353199,
      "LackOfCohesion" : 0.5528019840861983,
      "MetricsIntensity" : 0.05323805990950023,
      "Density" : 3.20826061663758
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1b6dacb-953f-47b5-87dd-3bfc7adbab18",
    "objectives" : {
      "NumberOfConcerns" : 1.0023442732752847,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 8.143131742587586,
    "generation" : 19,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6526780784097186,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 3.208963911525029
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b20aab5c-56dd-42f7-9e1c-7273a353cdd4",
    "objectives" : {
      "NumberOfConcerns" : 1.0023442732752847,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 8.143131742587586,
    "generation" : 9,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6526780784097184,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.05331026705665076,
      "Density" : 3.2089639115250295
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5ec330c1-e55e-4a98-b316-6eb6b1e78809",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5530615518705498,
      "MetricsIntensity" : 0.053313892218668994,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 10.114700369191853,
    "generation" : 4,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6508287292817678,
      "LackOfCohesion" : 0.5530615518705498,
      "MetricsIntensity" : 0.053313892218668994,
      "Density" : 3.210832847990682
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "70be4f8a-016f-4b93-a673-cd122152e672",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5530884642762548,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 10.11471700927038,
    "generation" : 17,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696137,
      "LackOfCohesion" : 0.5530884642762548,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 3.2102504368083884
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a5ad82d2-1579-4f1e-94a0-2712bbf0ab52",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538635797210892,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 10.114808104287896,
    "generation" : 20,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6524861878453032,
      "LackOfCohesion" : 0.5538635797210892,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 3.2096680256260917
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8be99d69-27ad-4ef8-8544-c3f336eaa250",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5540356297511027,
      "MetricsIntensity" : 0.053345070358788556,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 12.095726407718841,
    "generation" : 15,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6491712707182322,
      "LackOfCohesion" : 0.5540356297511027,
      "MetricsIntensity" : 0.053345070358788556,
      "Density" : 3.2114152591729757
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "419181af-b4d7-4244-8ebb-973c92cb1804",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5544798981197402,
      "MetricsIntensity" : 0.05332006104394771,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 12.095789294133935,
    "generation" : 27,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488128106018773,
      "LackOfCohesion" : 0.5544798981197402,
      "MetricsIntensity" : 0.05332006104394771,
      "Density" : 3.2101280558789296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "9d34aa02-2b74-4cf6-8136-ca97bb97478c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5545067929356372,
      "MetricsIntensity" : 0.05330311599432291,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 12.095803187268585,
    "generation" : 17,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6493649917172826,
      "LackOfCohesion" : 0.5545067929356372,
      "MetricsIntensity" : 0.0533031159943229,
      "Density" : 3.209545983701979
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "f411cc5e-b82e-4395-a2d9-8f91a435df6e",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.551644815130072,
      "MetricsIntensity" : 0.05334197307922674,
      "Density" : 0.999456620177504
    },
    "euclideanDistance" : 13.088471312199172,
    "generation" : 19,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696137,
      "LackOfCohesion" : 0.551644815130072,
      "MetricsIntensity" : 0.053341973079226744,
      "Density" : 3.2137449039021555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "67622a8a-f970-4a32-9de0-5781aa327250",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5516717275357771,
      "MetricsIntensity" : 0.05332501694716269,
      "Density" : 0.9992754935700054
    },
    "euclideanDistance" : 13.088484164653638,
    "generation" : 7,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6519337016574585,
      "LackOfCohesion" : 0.5516717275357771,
      "MetricsIntensity" : 0.0533250169471627,
      "Density" : 3.21316249271986
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "6e789dbb-ca45-4bd8-b605-602ecc55b7d1",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5520906461226448,
      "MetricsIntensity" : 0.05331696578875157,
      "Density" : 0.9996377467850027
    },
    "euclideanDistance" : 13.088529457854277,
    "generation" : 31,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6510215350635007,
      "LackOfCohesion" : 0.5520906461226448,
      "MetricsIntensity" : 0.05331696578875157,
      "Density" : 3.2124563445867294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6a3f97a-7875-4342-ba1a-5510eec0a0eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521175409385422,
      "MetricsIntensity" : 0.05330002073912681,
      "Density" : 0.999456620177504
    },
    "euclideanDistance" : 13.088542316566334,
    "generation" : 36,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515737161789066,
      "LackOfCohesion" : 0.5521175409385422,
      "MetricsIntensity" : 0.05330002073912681,
      "Density" : 3.2118742724097786
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "bff46bee-21af-4ee9-a498-c0f1ddd1fb93",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.55306440672952,
      "MetricsIntensity" : 0.053313892218669,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 14.08208259453198,
    "generation" : 8,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6502762430939224,
      "LackOfCohesion" : 0.55306440672952,
      "MetricsIntensity" : 0.053313892218668994,
      "Density" : 3.2085032032615035
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "03b73502-e31e-4565-972d-d60f642b516a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.554768762019389,
      "MetricsIntensity" : 0.053379083083909755,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 14.08209330023591,
    "generation" : 27,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648977335544499,
      "LackOfCohesion" : 0.554768762019389,
      "MetricsIntensity" : 0.053379083083909755,
      "Density" : 3.212121212121213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "f04cdc4c-69f3-44e4-867b-386de42cb008",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5530913191352249,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 14.082094547921905,
    "generation" : 24,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6508287292817672,
      "LackOfCohesion" : 0.5530913191352249,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 3.2079207920792085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5668888c-c9b4-4644-8ba2-9a5ad9ce3772",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5552128414646125,
      "MetricsIntensity" : 0.053354035167342266,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 14.082147311053353,
    "generation" : 27,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648618784530387,
      "LackOfCohesion" : 0.5552128414646125,
      "MetricsIntensity" : 0.053354035167342266,
      "Density" : 3.2108328479906816
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "1426163b-2031-4842-98f3-a24706ba5e27",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5535362047003431,
      "MetricsIntensity" : 0.0532719582320727,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 14.082148568437496,
    "generation" : 19,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480948,
      "LackOfCohesion" : 0.5535362047003431,
      "MetricsIntensity" : 0.05327195823207271,
      "Density" : 3.2066356228172292
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8b061d12-1a49-4a30-a394-d9385d367871",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5538664345800591,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 14.082159972242009,
    "generation" : 8,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6519337016574585,
      "LackOfCohesion" : 0.5538664345800591,
      "MetricsIntensity" : 0.05334423477455984,
      "Density" : 3.2073383808969127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9615ded4-0878-4acb-9374-b0a1307ec2dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5555713147572651,
      "MetricsIntensity" : 0.05340944549749425,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 14.08217068632933,
    "generation" : 20,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650635710337203,
      "LackOfCohesion" : 0.5555713147572651,
      "MetricsIntensity" : 0.05340944549749424,
      "Density" : 3.2109557109557105
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "66937618-5cef-4930-93fc-183fbf8ad7dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5528489392492871,
      "MetricsIntensity" : 0.053333981755716374,
      "Density" : 0.9990943669625068
    },
    "euclideanDistance" : 15.076759811173863,
    "generation" : 30,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513812154696137,
      "LackOfCohesion" : 0.5528489392492871,
      "MetricsIntensity" : 0.05333398175571638,
      "Density" : 3.2125800815375647
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "cd44529f-e6e9-4555-9caa-02c75126ef09",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5538238333991815,
      "MetricsIntensity" : 0.05333091731023911,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 16.07184303707879,
    "generation" : 16,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650635710337203,
      "LackOfCohesion" : 0.5538238333991815,
      "MetricsIntensity" : 0.05333091731023912,
      "Density" : 3.208624708624709
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f2f8f22b-71e8-4728-8ab5-f800ef337d05",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.554268530848735,
      "MetricsIntensity" : 0.053305900895158666,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 16.07189036526231,
    "generation" : 31,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650276243093923,
      "LackOfCohesion" : 0.554268530848735,
      "MetricsIntensity" : 0.05330590089515867,
      "Density" : 3.2073383808969127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8379ea3d-7c10-456c-9042-9faf3a64b44e",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5545994561185215,
      "MetricsIntensity" : 0.05337824695283273,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 16.071900390882167,
    "generation" : 7,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.651741293532338,
      "LackOfCohesion" : 0.5545994561185215,
      "MetricsIntensity" : 0.053378246952832734,
      "Density" : 3.2080419580419584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "17297a9a-10d7-470d-b8da-86e6e0019c85",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.553302980771041,
      "MetricsIntensity" : 0.053342365043402305,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 17.067646058461087,
    "generation" : 27,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6499171728326896,
      "LackOfCohesion" : 0.553302980771041,
      "MetricsIntensity" : 0.05334236504340231,
      "Density" : 3.204307334109429
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "98165832-2265-4351-be3b-acbf3e68ca73",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5533510980951803,
      "MetricsIntensity" : 0.053407182321994026,
      "Density" : 0.9992754935700054
    },
    "euclideanDistance" : 17.06769645092241,
    "generation" : 22,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5533510980951803,
      "MetricsIntensity" : 0.053407182321994026,
      "Density" : 3.2150349650349646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "580ce1de-a1ab-4df9-a096-1ea2a5a795b7",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5532331265352574,
      "MetricsIntensity" : 0.05334604384383195,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 19.06045950841975,
    "generation" : 26,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5532331265352574,
      "MetricsIntensity" : 0.05334604384383196,
      "Density" : 3.2061735585323237
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e0879f4-1f68-4111-a9af-0da805c2299e",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5555057131114485,
      "MetricsIntensity" : 0.053413140357459386,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 20.057467398143473,
    "generation" : 27,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955758,
      "LackOfCohesion" : 0.5555057131114485,
      "MetricsIntensity" : 0.05341314035745939,
      "Density" : 3.2104956268221567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "900d5bd9-79da-4a37-b58e-7a844ea2afb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5563087914241365,
      "MetricsIntensity" : 0.053443522654746285,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 20.057521743484653,
    "generation" : 14,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6498893805309733,
      "LackOfCohesion" : 0.5563087914241365,
      "MetricsIntensity" : 0.05344352265474629,
      "Density" : 3.2093294460641406
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "89a76c60-f438-4c36-acf1-e9bcdcb73aaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5550092322663494,
      "MetricsIntensity" : 0.05340753189422807,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 21.054755529836815,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5550092322663494,
      "MetricsIntensity" : 0.05340753189422806,
      "Density" : 3.20559114735003
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "509b641b-5472-4448-95ff-8406f2d785b7",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5518163897947794,
      "MetricsIntensity" : 0.05337412470438963,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 22.052256804540228,
    "generation" : 7,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486187845303863,
      "LackOfCohesion" : 0.5518163897947794,
      "MetricsIntensity" : 0.05337412470438964,
      "Density" : 3.209085614443798
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "177f62e1-e0a8-470b-bf87-509e045c8da7",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5518433022004844,
      "MetricsIntensity" : 0.05335716857232561,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 22.05226441939736,
    "generation" : 5,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649171270718232,
      "LackOfCohesion" : 0.5518433022004844,
      "MetricsIntensity" : 0.05335716857232561,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f8802726-9e6f-4bab-9800-36447d2a1505",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5532359813942275,
      "MetricsIntensity" : 0.053346043843831945,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 23.04992421972298,
    "generation" : 15,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6475138121546942,
      "LackOfCohesion" : 0.5532359813942275,
      "MetricsIntensity" : 0.053346043843831945,
      "Density" : 3.203843913803145
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a33a9a3b-9761-44d2-8695-f2442890c614",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5532359813942276,
      "MetricsIntensity" : 0.05334604384383192,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 23.04992421972298,
    "generation" : 9,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6475138121546962,
      "LackOfCohesion" : 0.5532359813942276,
      "MetricsIntensity" : 0.05334604384383191,
      "Density" : 3.2038439138031447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "71261446-dcbc-4757-a7b6-27d804310480",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5549404489711806,
      "MetricsIntensity" : 0.05341125575071221,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 23.049930838935364,
    "generation" : 28,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566612,
      "LackOfCohesion" : 0.5549404489711806,
      "MetricsIntensity" : 0.05341125575071221,
      "Density" : 3.207459207459207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "8c014879-acf4-4140-bc13-4ff44b3fa341",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5532628937999323,
      "MetricsIntensity" : 0.053329087711767885,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 23.04993150974343,
    "generation" : 27,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5532628937999323,
      "MetricsIntensity" : 0.05332908771176789,
      "Density" : 3.20326150262085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "85db292d-c536-4315-9f52-4016f98f2bb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5549673789897167,
      "MetricsIntensity" : 0.05339428852170306,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 23.04993810756126,
    "generation" : 34,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5549673789897167,
      "MetricsIntensity" : 0.05339428852170307,
      "Density" : 3.2068764568764565
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "7927efe9-382b-4b67-a158-9303ba150ce2",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5540380092447666,
      "MetricsIntensity" : 0.053376353754108506,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 23.049971448537708,
    "generation" : 27,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6491712707182324,
      "LackOfCohesion" : 0.5540380092447666,
      "MetricsIntensity" : 0.0533763537541085,
      "Density" : 3.2026790914385557
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ea80dfb3-f763-496d-915c-93cf88edb520",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5557430017090567,
      "MetricsIntensity" : 0.053441585497317444,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 23.04997807290195,
    "generation" : 35,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5557430017090567,
      "MetricsIntensity" : 0.05344158549731745,
      "Density" : 3.206293706293706
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0e307dd3-43ae-4773-bf19-89e4b515e62b",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5540871207891235,
      "MetricsIntensity" : 0.05344125799714029,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 23.050008743948016,
    "generation" : 36,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648783185840709,
      "LackOfCohesion" : 0.5540871207891235,
      "MetricsIntensity" : 0.0534412579971403,
      "Density" : 3.2134110787172014
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "67406ead-cc89-43a0-9942-c94c33937c20",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5525749996994317,
      "MetricsIntensity" : 0.05339118921512582,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 24.047892137707557,
    "generation" : 31,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444994,
      "LackOfCohesion" : 0.5525749996994317,
      "MetricsIntensity" : 0.05339118921512582,
      "Density" : 3.2092074592074593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2114fefe-d211-4c77-ac00-9cd70d008f98",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5539685903324373,
      "MetricsIntensity" : 0.05338005720605067,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 25.04591308418954,
    "generation" : 9,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5539685903324373,
      "MetricsIntensity" : 0.053380057206050664,
      "Density" : 3.204545454545455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "464a1187-94ee-4c11-925d-be1355dec6e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.553995520350973,
      "MetricsIntensity" : 0.05336308997704155,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 25.045919788038987,
    "generation" : 16,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493647,
      "LackOfCohesion" : 0.553995520350973,
      "MetricsIntensity" : 0.05336308997704155,
      "Density" : 3.2039627039627048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "51bdfd78-ef12-456a-b280-0924d86cb3c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5547711430703132,
      "MetricsIntensity" : 0.05341038695265594,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 25.045956562736997,
    "generation" : 16,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444992,
      "LackOfCohesion" : 0.5547711430703132,
      "MetricsIntensity" : 0.053410386952655944,
      "Density" : 3.2033799533799536
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "30edcdd2-1964-41bf-b26b-a3a707990e65",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5548212476547718,
      "MetricsIntensity" : 0.05347537833241129,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 25.045990914068657,
    "generation" : 37,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6485888212506923,
      "LackOfCohesion" : 0.5548212476547718,
      "MetricsIntensity" : 0.05347537833241128,
      "Density" : 3.2141190198366396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "b7fccb98-c7ec-47eb-876b-d506955618dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5535497150655082,
      "MetricsIntensity" : 0.053422387759787325,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 26.0442038230109,
    "generation" : 11,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5535497150655082,
      "MetricsIntensity" : 0.053422387759787325,
      "Density" : 3.20979020979021
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "c5e002fd-3d64-455a-a8fd-2defb1918a86",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5542560615769246,
      "MetricsIntensity" : 0.053473451733141684,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 28.041023073887295,
    "generation" : 7,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646570796460177,
      "LackOfCohesion" : 0.5542560615769246,
      "MetricsIntensity" : 0.053473451733141684,
      "Density" : 3.2110787172011666
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "e60e5c25-700d-4530-8c25-7e233e715dc4",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5573128023251934,
      "MetricsIntensity" : 0.05332676458006301,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 28.04114750404971,
    "generation" : 16,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6477084483710653,
      "LackOfCohesion" : 0.5573128023251934,
      "MetricsIntensity" : 0.053326764580062996,
      "Density" : 3.20932944606414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9f2c7759-b6be-4631-80fe-dbf47ab86a3e",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5573396971410906,
      "MetricsIntensity" : 0.053309819530438216,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 28.04115350455839,
    "generation" : 10,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482606294864715,
      "LackOfCohesion" : 0.5573396971410906,
      "MetricsIntensity" : 0.053309819530438216,
      "Density" : 3.2087463556851312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d7d72d42-c0ca-402b-97f4-fa8f7454ce98",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5556775124973934,
      "MetricsIntensity" : 0.053445334093460764,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 29.039558627625713,
    "generation" : 12,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699117,
      "LackOfCohesion" : 0.5556775124973934,
      "MetricsIntensity" : 0.053445334093460764,
      "Density" : 3.205830903790088
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0482e10a-b63c-488a-b198-6c88d91b3d40",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5557044601518288,
      "MetricsIntensity" : 0.053428355752972286,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 29.039564393215635,
    "generation" : 17,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.5557044601518288,
      "MetricsIntensity" : 0.053428355752972286,
      "Density" : 3.2052478134110793
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "4911900a-fbbc-4211-a095-f4b9e5f4f0ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5564805908100812,
      "MetricsIntensity" : 0.05347568370237554,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 29.039596128555832,
    "generation" : 18,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053094,
      "LackOfCohesion" : 0.5564805908100812,
      "MetricsIntensity" : 0.05347568370237555,
      "Density" : 3.204664723032071
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "c5147e0a-1317-4d27-875c-da9711a9d45d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5533105141429515,
      "MetricsIntensity" : 0.05342525441672472,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 30.03827159016843,
    "generation" : 19,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955754,
      "LackOfCohesion" : 0.5533105141429515,
      "MetricsIntensity" : 0.05342525441672472,
      "Density" : 3.2075801749271142
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "abfc364f-4c6e-4446-bd8b-b3fd6b590294",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5542858678295036,
      "MetricsIntensity" : 0.05345647339265321,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 32.03587364819824,
    "generation" : 23,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601766,
      "LackOfCohesion" : 0.5542858678295036,
      "MetricsIntensity" : 0.05345647339265322,
      "Density" : 3.208163265306123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "d8d6389c-4aa0-46e1-bce8-73b09e0b931f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5590485887386684,
      "MetricsIntensity" : 0.05337496509577476,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 32.035987553485334,
    "generation" : 2,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6464088397790049,
      "LackOfCohesion" : 0.5590485887386684,
      "MetricsIntensity" : 0.05337496509577476,
      "Density" : 3.210035005834305
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "fd5607e7-09e5-4f37-8836-def0604ec74e",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5549931596222277,
      "MetricsIntensity" : 0.05350759316522524,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 34.03374247963638,
    "generation" : 28,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6458218040951855,
      "LackOfCohesion" : 0.5549931596222277,
      "MetricsIntensity" : 0.053507593165225256,
      "Density" : 3.2094515752625434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "88356fc6-b7ab-44bd-8c65-a50ea52c3898",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5549931596222276,
      "MetricsIntensity" : 0.053507593165225256,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 34.03374247963638,
    "generation" : 11,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6458218040951857,
      "LackOfCohesion" : 0.5549931596222276,
      "MetricsIntensity" : 0.053507593165225256,
      "Density" : 3.2094515752625448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "ade0f34c-54c4-4611-a0ec-b32c68bf43a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5576351609605091,
      "MetricsIntensity" : 0.053368828165277875,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 34.033827631057434,
    "generation" : 23,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5576351609605091,
      "MetricsIntensity" : 0.053368828165277875,
      "Density" : 3.208406304728546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "3e86eccd-a8f5-4b69-bd6b-7d6f10f25983",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5583441829440245,
      "MetricsIntensity" : 0.0534198570635867,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 36.031928262870274,
    "generation" : 7,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053099,
      "LackOfCohesion" : 0.5583441829440245,
      "MetricsIntensity" : 0.0534198570635867,
      "Density" : 3.209696261682243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ffbdb945-e4ef-4220-b8c7-0fa43e680a3b",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5583711305984599,
      "MetricsIntensity" : 0.0534028787230982,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 36.03193292366364,
    "generation" : 18,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6476769911504425,
      "LackOfCohesion" : 0.5583711305984599,
      "MetricsIntensity" : 0.05340287872309821,
      "Density" : 3.209112149532711
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "09f74363-ec43-4174-a4d5-36d7ca29a6ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5587862130819973,
      "MetricsIntensity" : 0.053394766069862,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 36.03194935270566,
    "generation" : 32,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646766169154229,
      "LackOfCohesion" : 0.5587862130819973,
      "MetricsIntensity" : 0.053394766069862,
      "Density" : 3.208406304728546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "df244bde-02bd-415a-b7d2-f5876b6dc938",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5570419614036081,
      "MetricsIntensity" : 0.053383929904328484,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 37.031046407354054,
    "generation" : 3,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645303867403315,
      "LackOfCohesion" : 0.5570419614036081,
      "MetricsIntensity" : 0.053383929904328484,
      "Density" : 3.2059509918319717
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4865dc19-e8ed-4511-927a-596b9b609559",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5593195366305765,
      "MetricsIntensity" : 0.05345107603951519,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 38.03024198437729,
    "generation" : 17,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5593195366305765,
      "MetricsIntensity" : 0.0534510760395152,
      "Density" : 3.210280373831776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "10c3d8ca-d6e1-433b-957d-c2ddc0c03069",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5577770611664316,
      "MetricsIntensity" : 0.05341796806108941,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 39.02943971736881,
    "generation" : 21,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5577770611664316,
      "MetricsIntensity" : 0.053417968061089414,
      "Density" : 3.2066549912434326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b7c19d0e-27a5-4f7a-b2fe-5d6a51cf8836",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5600570923401577,
      "MetricsIntensity" : 0.05348520280862783,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 40.02871568444986,
    "generation" : 8,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6452684006640845,
      "LackOfCohesion" : 0.5600570923401577,
      "MetricsIntensity" : 0.05348520280862783,
      "Density" : 3.210987726475745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "d262932f-1f10-4a3e-ac7c-ad4509a0a9bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5605252378606222,
      "MetricsIntensity" : 0.053443074249307394,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 40.02873884646696,
    "generation" : 32,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5605252378606222,
      "MetricsIntensity" : 0.0534430742493074,
      "Density" : 3.2091121495327104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "4b7f83e0-1be0-4dd6-9ae8-4ad773f19799",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5587517765325082,
      "MetricsIntensity" : 0.05344916660575093,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 41.02799794157778,
    "generation" : 18,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688225,
      "LackOfCohesion" : 0.5587517765325082,
      "MetricsIntensity" : 0.05344916660575092,
      "Density" : 3.2072387624051366
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0316c7ee-4f6a-4516-9fe8-e8f6c9d3974f",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5587787065510444,
      "MetricsIntensity" : 0.053432199376741804,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 41.028002021977464,
    "generation" : 35,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6440022111663901,
      "LackOfCohesion" : 0.5587787065510444,
      "MetricsIntensity" : 0.053432199376741804,
      "Density" : 3.2066549912434326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "9f86a1b3-59a1-4f69-92ee-e2d68e8d032c",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5577799178937648,
      "MetricsIntensity" : 0.0534179680610894,
      "Density" : 0.9942039485600435
    },
    "euclideanDistance" : 43.02667845955869,
    "generation" : 24,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.5577799178937648,
      "MetricsIntensity" : 0.05341796806108941,
      "Density" : 3.204319906596614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ce0caed6-2cd6-4dcd-97b2-f2233632d797",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.559488477418378,
      "MetricsIntensity" : 0.05348326977551658,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 43.0266822845237,
    "generation" : 27,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643252212389381,
      "LackOfCohesion" : 0.559488477418378,
      "MetricsIntensity" : 0.05348326977551658,
      "Density" : 3.207943925233645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "6fa3f428-6590-41d1-83e9-5f30dbc6d7cf",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5578068479123007,
      "MetricsIntensity" : 0.05340100083208029,
      "Density" : 0.9940228219525449
    },
    "euclideanDistance" : 43.026682358844866,
    "generation" : 13,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5578068479123007,
      "MetricsIntensity" : 0.053401000832080305,
      "Density" : 3.20373613543491
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d9b645d8-2d00-41aa-836a-aa1b6ccc5bb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5595154250728134,
      "MetricsIntensity" : 0.05346629143502811,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 43.02668617235465,
    "generation" : 21,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6438053097345129,
      "LackOfCohesion" : 0.5595154250728134,
      "MetricsIntensity" : 0.0534662914350281,
      "Density" : 3.2073598130841128
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "12c0e471-decb-4277-82e8-51ed9eb4498b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5570945314095007,
      "MetricsIntensity" : 0.05348016843926902,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 44.02609254151508,
    "generation" : 22,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5570945314095007,
      "MetricsIntensity" : 0.05348016843926902,
      "Density" : 3.2102803738317753
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "929140fa-af7b-4cd6-b6df-64ead40f145e",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5585159823299692,
      "MetricsIntensity" : 0.053452050799588084,
      "Density" : 0.9938416953450462
    },
    "euclideanDistance" : 45.02547978859519,
    "generation" : 20,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796455,
      "LackOfCohesion" : 0.5585159823299692,
      "MetricsIntensity" : 0.053452050799588084,
      "Density" : 3.205023364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b37d5660-0148-47d8-858a-000462b9e586",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5585429299844047,
      "MetricsIntensity" : 0.053435072459099585,
      "Density" : 0.9936605687375476
    },
    "euclideanDistance" : 45.02548351189003,
    "generation" : 12,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247784,
      "LackOfCohesion" : 0.5585429299844047,
      "MetricsIntensity" : 0.05343507245909959,
      "Density" : 3.204439252336448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2d2fdf5e-6cc3-4f42-80a2-4de305bd05dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.555978012338587,
      "MetricsIntensity" : 0.05349906372932046,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 45.025515892371786,
    "generation" : 20,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6440022111663901,
      "LackOfCohesion" : 0.555978012338587,
      "MetricsIntensity" : 0.05349906372932046,
      "Density" : 3.206293706293706
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "34a02c64-585a-4496-90e6-e84186ab1b47",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5593751625646433,
      "MetricsIntensity" : 0.05354752884943294,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 45.025523179850914,
    "generation" : 31,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.64562569213732,
      "LackOfCohesion" : 0.5593751625646433,
      "MetricsIntensity" : 0.05354752884943294,
      "Density" : 3.214619883040935
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0698793c-ffd8-49af-b5ac-0144524c5cd5",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5580698850960527,
      "MetricsIntensity" : 0.05351138741519751,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 46.02495274494245,
    "generation" : 24,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6438053097345129,
      "LackOfCohesion" : 0.5580698850960527,
      "MetricsIntensity" : 0.05351138741519751,
      "Density" : 3.2108644859813085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "3eda64aa-91d9-49de-986c-1850f86276c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5535856330483018,
      "MetricsIntensity" : 0.053495964422743215,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 46.0249773633152,
    "generation" : 25,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646213377556661,
      "LackOfCohesion" : 0.5535856330483018,
      "MetricsIntensity" : 0.05349596442274322,
      "Density" : 3.208624708624709
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e67a86dc-afc1-421b-8566-7380ce0d3d0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5557817764191835,
      "MetricsIntensity" : 0.053515129493294115,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 47.02443375804778,
    "generation" : 24,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566599,
      "LackOfCohesion" : 0.5557817764191835,
      "MetricsIntensity" : 0.05351512949329412,
      "Density" : 3.2027972027972025
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d4a0bf99-9a23-4123-9843-6fb65bc05442",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.557097390007644,
      "MetricsIntensity" : 0.053480168439269025,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 48.023897369119325,
    "generation" : 26,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247786,
      "LackOfCohesion" : 0.557097390007644,
      "MetricsIntensity" : 0.053480168439269025,
      "Density" : 3.207943925233645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "884d314d-6a48-414e-ab5e-a8ed94495bb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5588066218989929,
      "MetricsIntensity" : 0.05354555370683678,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 48.02390079527907,
    "generation" : 28,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707809,
      "LackOfCohesion" : 0.5588066218989929,
      "MetricsIntensity" : 0.05354555370683678,
      "Density" : 3.211572180011689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "aad86c97-0e9c-457c-be43-bb665ebbfb4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.55712433766208,
      "MetricsIntensity" : 0.05346319009878052,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 48.02390085806052,
    "generation" : 27,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.55712433766208,
      "MetricsIntensity" : 0.053463190098780526,
      "Density" : 3.207359813084113
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e5d5b32a-2de7-4855-9b4f-5bb6d15826fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5543189507360812,
      "MetricsIntensity" : 0.05353009823940932,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 48.02392424030952,
    "generation" : 32,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150441,
      "LackOfCohesion" : 0.5543189507360812,
      "MetricsIntensity" : 0.05353009823940931,
      "Density" : 3.2093294460641397
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fa6597a2-04f0-4ccb-a2bc-76c1435365de",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5602290043076135,
      "MetricsIntensity" : 0.053517417641441814,
      "Density" : 0.9936605687375476
    },
    "euclideanDistance" : 49.02338280915476,
    "generation" : 9,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5602290043076135,
      "MetricsIntensity" : 0.05351741764144182,
      "Density" : 3.2063120981881945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "1c93648b-749e-406d-adca-2cee3d2370c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5602559696210626,
      "MetricsIntensity" : 0.05350042817491106,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 49.02338621915032,
    "generation" : 38,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643054786939679,
      "LackOfCohesion" : 0.5602559696210626,
      "MetricsIntensity" : 0.053500428174911054,
      "Density" : 3.2057276446522507
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "9600f214-baac-4049-9d79-162657b1c134",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5565165323148021,
      "MetricsIntensity" : 0.05354927586075951,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 49.02342434537773,
    "generation" : 23,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646017699115044,
      "LackOfCohesion" : 0.5565165323148021,
      "MetricsIntensity" : 0.05354927586075952,
      "Density" : 3.2034985422740525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ea013db1-a91e-4599-bbb9-fbce0afdad16",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.557833489526778,
      "MetricsIntensity" : 0.053514314272863774,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 50.02292962783121,
    "generation" : 24,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644714997232983,
      "LackOfCohesion" : 0.557833489526778,
      "MetricsIntensity" : 0.053514314272863774,
      "Density" : 3.2086499123319685
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8752b2e2-6ed0-4a94-ae01-278abb5f5a42",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5578334895267778,
      "MetricsIntensity" : 0.05351431427286379,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 50.02292962783121,
    "generation" : 25,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644714997232983,
      "LackOfCohesion" : 0.5578334895267778,
      "MetricsIntensity" : 0.053514314272863794,
      "Density" : 3.208649912331969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "aaf17cb4-61bd-4be5-a991-ca9351c35f4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5552943044226332,
      "MetricsIntensity" : 0.05356131721533781,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 50.022962173184766,
    "generation" : 32,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796455,
      "LackOfCohesion" : 0.5552943044226332,
      "MetricsIntensity" : 0.0535613172153378,
      "Density" : 3.2099125364431487
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "4e098415-02ce-4503-8058-542c5d425ee1",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5552943044226333,
      "MetricsIntensity" : 0.05356131721533779,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 50.022962173184766,
    "generation" : 26,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796455,
      "LackOfCohesion" : 0.5552943044226333,
      "MetricsIntensity" : 0.0535613172153378,
      "Density" : 3.2099125364431487
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "e41c1852-0fc6-458f-9387-46ea0a7ad232",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5567157553431018,
      "MetricsIntensity" : 0.05353319957565687,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 51.02248269889579,
    "generation" : 22,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432522123893805,
      "LackOfCohesion" : 0.5567157553431018,
      "MetricsIntensity" : 0.05353319957565688,
      "Density" : 3.2046647230320695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "12d575b5-2dde-4804-a640-574913de52e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5574918860013541,
      "MetricsIntensity" : 0.05358049483668803,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 51.022500755252665,
    "generation" : 17,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796466,
      "LackOfCohesion" : 0.5574918860013541,
      "MetricsIntensity" : 0.05358049483668803,
      "Density" : 3.2040816326530615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "4bc1e88f-989c-4617-b592-f5bf3aeafaab",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5543218093342246,
      "MetricsIntensity" : 0.05353009823940932,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 52.0220644644638,
    "generation" : 26,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5543218093342246,
      "MetricsIntensity" : 0.053530098239409324,
      "Density" : 3.2069970845481035
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "23478566-b628-4a99-bf16-25a0bb582f0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5560292223653679,
      "MetricsIntensity" : 0.0535955162263743,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 52.022067523278466,
    "generation" : 24,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018814,
      "LackOfCohesion" : 0.5560292223653679,
      "MetricsIntensity" : 0.0535955162263743,
      "Density" : 3.2106184364060675
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "1439e0c7-f5bb-484b-a40d-3a802fa2d631",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5574516047739888,
      "MetricsIntensity" : 0.053567380160979276,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 53.02162304926172,
    "generation" : 14,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643054786939679,
      "LackOfCohesion" : 0.5574516047739888,
      "MetricsIntensity" : 0.053567380160979276,
      "Density" : 3.2053675612602097
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "115c6fd2-9148-44be-a7bb-4c1a4e4541a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5582282440368664,
      "MetricsIntensity" : 0.053614706414973075,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 53.0216404337818,
    "generation" : 15,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6441615938018812,
      "LackOfCohesion" : 0.5582282440368664,
      "MetricsIntensity" : 0.053614706414973075,
      "Density" : 3.204784130688448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0744346f-364d-4d53-8513-0763e6766e18",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5550560899931528,
      "MetricsIntensity" : 0.053564276792401284,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 54.02123613523851,
    "generation" : 14,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6452684006640843,
      "LackOfCohesion" : 0.5550560899931528,
      "MetricsIntensity" : 0.05356427679240129,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "80cfb30e-d317-4821-bdba-d626ea89e34e",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5560320828367734,
      "MetricsIntensity" : 0.053595516226374276,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 56.020473065641404,
    "generation" : 24,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436081903707804,
      "LackOfCohesion" : 0.5560320828367734,
      "MetricsIntensity" : 0.053595516226374276,
      "Density" : 3.2082847141190194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "4fd447e4-bfbc-4710-83d3-cabfaaafd632",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5560320828367733,
      "MetricsIntensity" : 0.0535955162263743,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 56.020473065641404,
    "generation" : 13,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.64360819037078,
      "LackOfCohesion" : 0.5560320828367733,
      "MetricsIntensity" : 0.05359551622637429,
      "Density" : 3.2082847141190194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "0c54e939-f5ae-4d3c-8b63-2346cb207b49",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5567679664820373,
      "MetricsIntensity" : 0.0536297600885728,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 58.01975673522821,
    "generation" : 25,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434108527131785,
      "LackOfCohesion" : 0.5567679664820373,
      "MetricsIntensity" : 0.0536297600885728,
      "Density" : 3.2089900758902514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "d3410cb7-c336-40fd-b781-47253791ed85",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5567679664820371,
      "MetricsIntensity" : 0.05362976008857282,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 58.01975673522821,
    "generation" : 22,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434108527131785,
      "LackOfCohesion" : 0.5567679664820371,
      "MetricsIntensity" : 0.05362976008857282,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "a68ab6d9-a76f-41cf-b9e3-6674f07690aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.558814624533838,
      "MetricsIntensity" : 0.05350577603969769,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 61.018808112513504,
    "generation" : 17,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428966279712556,
      "LackOfCohesion" : 0.558814624533838,
      "MetricsIntensity" : 0.053505776039697694,
      "Density" : 3.2054874489200227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "3727e116-ac62-4d20-a00c-3d1a718e8320",
    "objectives" : {
      "NumberOfConcerns" : 0.9946416610850636,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5595513665775343,
      "MetricsIntensity" : 0.05353991628178419,
      "Density" : 0.9942039485600435
    },
    "euclideanDistance" : 63.0182014800468,
    "generation" : 24,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426991150442476,
      "LackOfCohesion" : 0.5595513665775343,
      "MetricsIntensity" : 0.0535399162817842,
      "Density" : 3.206191588785047
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "c78afb2c-2c2b-4ca0-8192-54dfc1efcf5f",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5605267202640866,
      "MetricsIntensity" : 0.05357113525771267,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 65.01763742386811,
    "generation" : 33,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088497,
      "LackOfCohesion" : 0.5605267202640866,
      "MetricsIntensity" : 0.05357113525771267,
      "Density" : 3.2067757009345796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "d84ef4ef-d192-461d-b6de-9c699bb206b3",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5605267202640863,
      "MetricsIntensity" : 0.0535711352577127,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 65.01763742386811,
    "generation" : 34,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088494,
      "LackOfCohesion" : 0.5605267202640863,
      "MetricsIntensity" : 0.05357113525771269,
      "Density" : 3.20677570093458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "74ddb341-aab9-400a-88af-07534554c671",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5595542251756779,
      "MetricsIntensity" : 0.05353991628178417,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 67.01709942095535,
    "generation" : 24,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5595542251756779,
      "MetricsIntensity" : 0.05353991628178418,
      "Density" : 3.2038551401869153
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "431a1ad3-2a39-42c5-85e4-b9e218fabd6b",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5612650670507536,
      "MetricsIntensity" : 0.05360534070259083,
      "Density" : 0.9940228219525449
    },
    "euclideanDistance" : 67.01710197553687,
    "generation" : 15,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640841173215274,
      "LackOfCohesion" : 0.5612650670507536,
      "MetricsIntensity" : 0.053605340702590834,
      "Density" : 3.207481005260082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "41abb7f0-6cfd-40cd-b335-766c408be19f",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5602919346785389,
      "MetricsIntensity" : 0.053574101268617814,
      "Density" : 0.9931171889150516
    },
    "euclideanDistance" : 69.01659505814892,
    "generation" : 18,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774766,
      "LackOfCohesion" : 0.5602919346785389,
      "MetricsIntensity" : 0.05357410126861782,
      "Density" : 3.204558737580362
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b4e82f6-9aa2-4516-82e7-310bea91ce63",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5611540093258978,
      "MetricsIntensity" : 0.05366980213932087,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 69.01662340273745,
    "generation" : 30,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432132963988921,
      "LackOfCohesion" : 0.5611540093258978,
      "MetricsIntensity" : 0.05366980213932087,
      "Density" : 3.214160327677004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "7ada15af-4ab8-4608-b1f5-4a0760b6fa11",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.5598455451135385,
      "MetricsIntensity" : 0.05363347676798582,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 70.01637547909529,
    "generation" : 6,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6413945766463751,
      "LackOfCohesion" : 0.5598455451135385,
      "MetricsIntensity" : 0.05363347676798583,
      "Density" : 3.2104032729398018
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "2da1e45b-f8cb-4652-8a4a-b404fd6d1751",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5612679275221595,
      "MetricsIntensity" : 0.053605340702590834,
      "Density" : 0.9932983155225502
    },
    "euclideanDistance" : 71.01612391291052,
    "generation" : 25,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6402877697841725,
      "LackOfCohesion" : 0.5612679275221595,
      "MetricsIntensity" : 0.05360534070259084,
      "Density" : 3.2051431911163064
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "bac8b5ff-b05a-4b0b-8e7e-155319199591",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5612679275221596,
      "MetricsIntensity" : 0.05360534070259082,
      "Density" : 0.9932983155225502
    },
    "euclideanDistance" : 71.01612391291052,
    "generation" : 21,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6402877697841725,
      "LackOfCohesion" : 0.5612679275221596,
      "MetricsIntensity" : 0.05360534070259083,
      "Density" : 3.2051431911163064
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "08050440-b73c-49f3-a2a6-45245b57dc1d",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5588724127413237,
      "MetricsIntensity" : 0.05360223733401282,
      "Density" : 0.9940228219525449
    },
    "euclideanDistance" : 72.01590986039085,
    "generation" : 32,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6425013835085778,
      "LackOfCohesion" : 0.5588724127413237,
      "MetricsIntensity" : 0.05360223733401283,
      "Density" : 3.207481005260082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "1b240802-08ef-4cc8-87e4-1cc2264f54b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5605839293898036,
      "MetricsIntensity" : 0.05366774552234279,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 72.01591223715587,
    "generation" : 17,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6411960132890366,
      "LackOfCohesion" : 0.5605839293898036,
      "MetricsIntensity" : 0.05366774552234279,
      "Density" : 3.2111111111111117
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "f32021b7-0137-4367-9740-5fd58ed4dd4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.5620072445082005,
      "MetricsIntensity" : 0.05363959100706882,
      "Density" : 0.9929360623075529
    },
    "euclideanDistance" : 73.01567394030701,
    "generation" : 10,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6400885935769656,
      "LackOfCohesion" : 0.5620072445082005,
      "MetricsIntensity" : 0.05363959100706881,
      "Density" : 3.2058479532163737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "a20f4a42-75ba-4aac-b5b1-0e7bdb8f6c11",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.5620072445082005,
      "MetricsIntensity" : 0.05363959100706882,
      "Density" : 0.9929360623075529
    },
    "euclideanDistance" : 73.01567394030701,
    "generation" : 11,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6400885935769656,
      "LackOfCohesion" : 0.5620072445082005,
      "MetricsIntensity" : 0.05363959100706881,
      "Density" : 3.2058479532163746
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "53a3c441-2209-4371-af2a-957d3a089bc6",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.5620072445082004,
      "MetricsIntensity" : 0.053639591007068846,
      "Density" : 0.9929360623075529
    },
    "euclideanDistance" : 73.01567394030701,
    "generation" : 23,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6400885935769656,
      "LackOfCohesion" : 0.5620072445082004,
      "MetricsIntensity" : 0.05363959100706885,
      "Density" : 3.2058479532163733
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "7a48f697-c665-4134-9f74-f34bc95794c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5596101588980001,
      "MetricsIntensity" : 0.05363648560349505,
      "Density" : 0.9936605687375476
    },
    "euclideanDistance" : 74.01547169844483,
    "generation" : 12,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423034330011077,
      "LackOfCohesion" : 0.5596101588980001,
      "MetricsIntensity" : 0.05363648560349506,
      "Density" : 3.208187134502924
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "88df6ba2-60de-4caa-bee2-964a34f617a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9922973878097789,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5605867917369282,
      "MetricsIntensity" : 0.05366774552234277,
      "Density" : 0.9938416953450462
    },
    "euclideanDistance" : 76.01506109449127,
    "generation" : 15,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640642303433001,
      "LackOfCohesion" : 0.5605867917369282,
      "MetricsIntensity" : 0.053667745522342776,
      "Density" : 3.2087719298245614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "51d8c936-ea82-4515-978d-c2142d2c8c04",
    "objectives" : {
      "NumberOfConcerns" : 0.9922973878097789,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.560586791736928,
      "MetricsIntensity" : 0.053667745522342804,
      "Density" : 0.9938416953450462
    },
    "euclideanDistance" : 76.01506109449127,
    "generation" : 35,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640642303433001,
      "LackOfCohesion" : 0.560586791736928,
      "MetricsIntensity" : 0.053667745522342804,
      "Density" : 3.20877192982456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "cd41b8b9-f2d6-4f7d-a5c7-51338e3d5de0",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.56132614689961,
      "MetricsIntensity" : 0.05370205924881834,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 78.01466719562639,
    "generation" : 11,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404432132963984,
      "LackOfCohesion" : 0.56132614689961,
      "MetricsIntensity" : 0.05370205924881833,
      "Density" : 3.2094792276184916
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "d55a2d4a-b04d-4a09-b8c2-d9c5b6358cb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.56132614689961,
      "MetricsIntensity" : 0.05370205924881834,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 78.01466719562639,
    "generation" : 22,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640443213296399,
      "LackOfCohesion" : 0.56132614689961,
      "MetricsIntensity" : 0.05370205924881834,
      "Density" : 3.20947922761849
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "f51c8add-1bc1-44e1-af50-7e9a490c69aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5613261468996101,
      "MetricsIntensity" : 0.053702059248818323,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 78.01466719562639,
    "generation" : 13,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640443213296399,
      "LackOfCohesion" : 0.5613261468996101,
      "MetricsIntensity" : 0.05370205924881833,
      "Density" : 3.20947922761849
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  }, {
    "solutionId" : "66dd0e39-40ef-41b2-ba81-8582ab9ddea3",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5613261468996101,
      "MetricsIntensity" : 0.053702059248818323,
      "Density" : 0.9934794421300489
    },
    "euclideanDistance" : 78.01466719562639,
    "generation" : 31,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404432132963986,
      "LackOfCohesion" : 0.5613261468996101,
      "MetricsIntensity" : 0.05370205924881833,
      "Density" : 3.20947922761849
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.authentication.event.AuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.access.AccessDeniedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.annotation.AlreadyBuiltException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.SecretKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.web.DefaultSecurityFilterChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.saml2.Saml2Exception'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.saml2.Saml2Exception'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.saml2.provider.service.web.Saml2AuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser.DefaultWebSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.oauth2.jwt.JwtEncodingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.OpaqueTokenBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.web.server.header.XContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyException'"
      } ]
    } ]
  } ]
}